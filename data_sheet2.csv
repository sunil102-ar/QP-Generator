Questions,MARKS,COMPLEXITY LEVEL,PRIMARY TOPIC,SECONDARY TOPIC,Assessment_Subject,Assessment_Category,Solutions
"A string is said to be complete if it contains all the characters from a to z. Given a string, check if it is complete or not. 
 Input: The first line of the input contains the number of strings N. It is followed by N lines each contains a single string.
 Output: For each test case print ""YES"" if the string is complete, else print ""NO""
 Constraints 1 <= N <= 10
 The length of the string is at max 100 and the string contains only the characters a to z
 SAMPLE INPUT: 3
 wyyga
 qwertyuioplkjhgfdsazxcvbnm
 ejuxggfsts
 SAMPLE OUTPUT
 NO
 YES
 NO",5,Medium,Conditional Statements,Loops,ITP,Final Exam,"testCases = int(input())
 while testCases:
  testCases -= 1
  string = input()
  alphabet = list(map(chr, range(97, 123)))
  if set(alphabet) == set(string):
  print('YES')
  else:
  print('NO')"
"Write a python program to build a numeric converter. The program will take integer from the user and convert it into binary, octal, hexadecimal, float, complex format. 
 
 SAMPLE INPUT AND OUTPUT:
 Enter a number 123
 The binary of the number is 0b1111011
 The octal of the number is 0o173
 The hexadecimal of the number is 0x7b
 The float of the numbers is 123.0
 The complex of the number is 123+0j)",5,Medium,Data Handling,Data Handling,ITP,Final Exam,"number=int(input(""Enter a number""))
 bin1=bin(number)
 print(""The binary of the number is "",bin1)
 oct1=oct(number)
 print(""The octal of the number is"",oct1)
 hexa1=hex(number)
 print(""The hexadecimal of the number is "",hexa1)
 float1=float(number)
 print(""The float of the numbers is"",float1)
 complex1=complex(number)
 print(""The complex of the number is"",complex1)"
"Write a python program to manipulate lists.
 Take two lists L1= [1,2,3,4,5,6,7,8,9,10] and L2=[10,20,30,40,50,60,70,80,90,100].
 a) Concatenate L1 and L2. (1 mark)
 b) Use the inbuilt function zip and save a copy of the zipped lists as L3. (2 mark)
 c) Identify the common elements between the two L1 and L2 and print the answer. (2 mark)
 
 
 SAMPLE INPUT AND OUTPUT
 L1=[1,2,3,4,5,6,7,8,9,10]
 
 L2=[10,20,30,40,50,60,70,80,90,100]
 
 Concatenation: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
 L3=[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (8, 80), (9, 90), (10, 100)]
 
 The common element in both the list is 10",5,Medium,Data containers,Data containers,ITP,Final Exam,"L1=[1,2,3,4,5,6,7,8,9,10]
 L2=[10,20,30,40,50,60,70,80,90,100]
  
  
 L1+L2
  
 L3=list(zip(L1,L2))
 print(L3)
  
  
  
 for numbers in L1:
  if numbers in L2:
  print(numbers)"
"Write a numbers guessing game in python. Roll a dice and it shows up numbers between 1 and 6. The user has to guess the number on the dice. If the guess is correct, then the user wins. If the guess is not correct the user loses the game. 
 
 
 SAMPLE INPUT AND OUTPUT:
 Guess the number on the dice 23
 your guess is wrong",5,Medium,Conditional Statements,Loops,ITP,Final Exam,"import random
 abc=random.randint(1,7)
 guess=int(input(""Guess the number on the dice""))
 if abc==guess:
  print(""your guess is correct"")
 else:
  print(""your guess is wrong"")"
"Write a python program to find the runner up of a sports competition. A running race is organised. The number of participants is asked to the user. The participants time between the start line and end line is noted in a list. The python code should announce the score of the runner up. 
 
 SAMPLE INPUT AND OUTPUT:
 How many people are participating in the running race?3
 Enter the time taken by the participants to complete the race in minutes 12 34 15
 The runner up time is 15",10,Medium,Loops,Loops,ITP,Final Exam,"# Python program for sports competition
 no_of_runners=int(input(""How many people are participating in the running race?""))
 time_of_participants=input(""Enter the time taken by the participants to complete the race in minutes "").split()
 actual=[]
 for time in time_of_participants:
  a=int(time)
  #print(a)
  actual.append(a)
  # print(actual)
 actual.sort()
 print(""The runner up time is"", actual[1])"
"Write a Python program to check the validity of a debit card.
 a) Verify and ensure that the length of the debit card is 14. (2mark)
 b) Verify that the year printed on the debit card should be either 2020 or greater than 2020. If the year is less than 2020, user should get a message that the card expired.(3 mark)
 c)Verify that the month number printed in the card should be between 1 and 12. Any number less than 1 and any number greater than 12 should be invalid. (3 mark)
 d) Enter the CVV number printed on the debit card and ensure that the length is neither less than 3 nor greater than 3. (2 mark)
 
 SAMPLE INPUT AND OUTPUT:
 Enter the debit card number 12345676543218
 The length of the card is valid
 
 Please enter the year that is printed on the card 2020
 
 your card is valid
 
 Enter the month that is printed on the card 12
 The month is valid
 
 Enter the cvv number printed on the card 234
 
 The CVV number is valid",10,Hard,Conditional Statements,Conditional Statements,ITP,Final Exam,"card=int(input(""Enter the debit card number""))
 card_str=str(card)
 if len(card_str)<14 or len(card_str)>14:
  print(""The length of the card is invalid"")
 else:
  print(""The length of the card is valid"")
  
 yy=int(input(""Please enter the year that is printed on the card"")) 
 if yy>=2020:
  print(""your card is valid"")
 else:
  print(""your card is invalid"")
 mm=int(input(""Enter the month that is printed on the card""))
 #mm_str=str(mm)
 if mm<1 or mm>12:
  print(""The month is invalid"")
 else:
  print(""The month is valid"")
  
 cvv=int(input(""Enter the cvv number printed on the card""))
 cvv_str=str(cvv)
 if len(cvv_str)<3 or len(cvv_str)>3:
  print(""the cvv number is invalid"")
 else:
  print(""The CVV number is valid"")"
"Write a program that lets the user play Rock-Paper-Scissors against the computer. 
 1. There should be five rounds, in every round user will get a chance to pick one item from [rock,paper,scissor] and computer will randomly select one. 
 2. Depending upon the selection either one of the player will get a point as per the rules or it will be draw if both the items are same.
 3. In every round, player's choice and their current score should be updated and displayed. 
 4. After those five rounds, your program should print out who won and lost or that there is a tie. 
 
 **Rules for the Game:**
 1. Scissors beats Paper
 2. Rock beats Scissors
 3. Paper beats Rock
 
 SAMPLE INPUT AND OUTPUT:
 ---------------------Round 1----------------------------
 Enter your choice : paper
 your choice : paper
 Computer's choice: paper
 Scoreboard : Your score 0 , computer's score 0 
 ---------------------Round 2----------------------------
 Enter your choice : paper
 your choice : paper
 Computer's choice: scissor
 Scoreboard : Your score 0 , computer's score 1 
 ---------------------Round 3----------------------------
 Enter your choice : rock
 your choice : rock
 Computer's choice: scissor
 Scoreboard : Your score 1 , computer's score 1 
 ---------------------Round 4----------------------------
 Enter your choice : rock
 your choice : rock
 Computer's choice: scissor
 Scoreboard : Your score 2 , computer's score 1 
 ---------------------Round 5----------------------------
 Enter your choice : rock
 your choice : rock
 Computer's choice: paper
 Scoreboard : Your score 2 , computer's score 1 
 Result : Congratulations!!! You won!!!",15,Hard,Functions,Conditional Statements,ITP,Final Exam,"import random
 comp_score=0
 user_score=0
 game=['rock','paper','scissor']
 for round in range(5):
  print('---------------------Round %d----------------------------'% (round+1))
  user= input('Enter your choice : ').lower()
  comp=random.choice(game)
  if user == 'rock':
  if comp == 'scissor':
  user_score +=1
  elif comp == 'Paper':
  comp_score += 1
  print('your choice : ', user)
  print('Computer\'s choice: ', comp)
  print('Scoreboard : Your score %d , computer\'s score %d '% (user_score,comp_score))
  elif user == 'paper':
  if comp == 'rock':
  user_score +=1
  elif comp == 'scissor':
  comp_score += 1
  print('your choice : ', user)
  print('Computer\'s choice: ', comp)
  print('Scoreboard : Your score %d , computer\'s score %d '% (user_score,comp_score))
  elif user== 'scissor':
  if comp == 'rock':
  comp_score +=1
  elif comp == 'Paper':
  user_score += 1
  print('your choice : ', user)
  print('Computer\'s choice: ', comp)
  print('Scoreboard : Your score %d , computer\'s score %d '% (user_score,comp_score))
  
  
 if (user_score > comp_score):
  print('Result : Congratulations!!! You won!!!')
 elif (user_score < comp_score):
  print('Result :Computer won !! better luck next time!!!!')
 else:
  print(""There is Tie"")"
"Ask the user to enter 10 test scores. Write five different functions to do the following: 
 (a) Print out the highest and lowest scores.
 (b) Print out the average of the scores.
 (c) Print out the second largest score.
 (d) If any of the scores is greater than 100, then after all the scores have been entered, print
 a message warning the user that a value over 100 has been entered.
 (e) Drop the two lowest scores and print out the average of the rest of them.
 
 SAMPLE INPUT AND OUTPUT:
 Enter your score : 123
 Enter your score : 1234
 Enter your score : 1234
 Enter your score : 1234
 Enter your score : 543
 Enter your score : 543
 Enter your score : 7654
 Enter your score : 23456
 Enter your score : 8765
 Enter your score : 34567
 Highest value : 34567
 Lowest value : 123
 Average value : 7935.3
 Second highest is : 23456
 You have entered 1 th value more than 100
 You have entered 2 th value more than 100
 You have entered 3 th value more than 100
 You have entered 4 th value more than 100
 You have entered 5 th value more than 100
 You have entered 6 th value more than 100
 You have entered 7 th value more than 100
 You have entered 8 th value more than 100
 You have entered 9 th value more than 100
 You have entered 10 th value more than 100
 Average after dropping lowest score is 8803.333333333334",15,Hard,Functions,Functions,ITP,Final Exam,"###### def highest_lowest(z):
 def highest_lowest(z):
  print('Highest value : ', max(z))
  print('Lowest value : ', min(z))
  
 def average_all(z):
  mean_z= sum(z) / len(z)
  print (""Average value : "", mean_z)
  
 def second_lagest(z):
  z= sorted(z,reverse=True)
  z.pop(0)
  print('Second highest is : ',z[0])
  
 def check_100(z):
  for i in range(10):
  if z[i]>100:
  print('You have entered ',str(i+1), 'th value more than 100')
  
 def fun(z):
  z=sorted(z)
  z.pop(0)
  mean_z= sum(z) / len(z)
  print ('Average after dropping lowest score is ', mean_z)
  
  
 x_list=[]
 for i in range(10):
  x=int(input('Enter your score : '))
  x_list.append(x) 
  
 highest_lowest(x_list)
 average_all(x_list)
 second_lagest(x_list)
 check_100(x_list)
 fun(x_list)"
"Create a dictionary with a single alphabet as the key and an integer as the corresponding value. Write a program to find out the highest 3 values in the dictionary. You are free to choose any alphabet of key and integer as values. 
 
 
 SAMPLE INPUT
 Initial Dictionary: 
 {'A': 67, 'B': 23, 'C': 45, 'D': 56, 'E': 12, 'F': 69}
 SAMPLE OUTPUT 
 Keys: Values F: 69 
 A: 67 
 D: 56",5,Easy,Data containers,Data containers,ITP,Final Exam,"# BASIC CODE
 from collections import Counter 
  
 # Initial Dictionary 
 my_dict = {'A': 67, 'B': 23, 'C': 45, 
  'D': 56, 'E': 12, 'F': 69} 
  
 k = Counter(my_dict) 
  
 # Finding 3 highest values 
 high = k.most_common(3) 
  
 print(""Initial Dictionary:"") 
 print(my_dict, ""\n"") 
  
 print(""Dictionary with 3 highest values:"") 
 print(""Keys: Values"") 
  
 for i in high: 
  print(i[0],"" :"",i[1],"" "")"
"In a Flipkart sale, all the people who took the phone and also ordered phone cover, other people who took shoes also ordered socks and based on the people's choice recommend them the item they are most likely to order? 
 
 a. This is a list of products and recommendations. items = [('mobile',' cover'), ('shoe', 'socks')]
 b. Take input from the customer
 c. Search for the product in items list and return the recommended product. if the input is mobile suggest mobile cover, if the input is shoe suggest socks
 d. Take input from user YES or NO, if he is interested. “Do you want to buy cover: YES”
 e. Return items in the shopping list like -
 If the mobile is bought, then it should also suggest cover.",5,Medium,Loops,Conditional Statements,ITP,Final Exam,"items = [('mobile','cover'),('shoe','socks')]
  
 select_item = input('enter item:')
  
 for each in items:
  if select_item == each[0]:
  print(""you can buy %s along with %s"" % (each[1], each[0]))
  recomendation_input = input(""Do you wish to buy %s:"" % (each[1]))
  if recomendation_input == 'YES':
  print('item sucessfully ordered')
  print(""%s"" % (each[1]))
  print(""%s"" % (each[0]))
  if recomendation_input == 'NO':
  print('item sucessfully ordered')
  print(""%s"" % (each[1]))
  break
  else:
  print(""item not in list"")"
"A robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given step n (which has to be taken manually and has to be an integer) 
 
 The trace of robot movement is shown as the following:
 UP 5
 DOWN 3
 LEFT 3
 RIGHT 2
 The numbers after the direction are steps. Please write a program to compute the Euclidean distance from the current position after a sequence of movement and original point. If the distance is afloat, then just print the nearest integer. 
 
 Example:
 
 INPUT:
 UP 5
 DOWN 3
 LEFT 3
 RIGHT 2
 
 OUTPUT:
 2",5,Medium,Conditional Statements,Conditional Statements,ITP,Final Exam,"import math
 pos = [0,0]
 n = int(input())
 for m in range(n):
  s = input()
  movement = s.split("" "")
  direction = movement[0]
  steps = int(movement[1])
  if direction==""UP"":
  pos[0]+=steps
  elif direction==""DOWN"":
  pos[0]-=steps
  elif direction==""LEFT"":
  pos[1]-=steps
  elif direction==""RIGHT"":
  pos[1]+=steps
  else:
  pass 
  
 print (int(round(math.sqrt(pos[1]**2+pos[0]**2))))"
"There is a wood log cutting factory. We are calculating the revenue and the no. of pieces that the wood is cut into. We are given a wood log of length n cms and a table of prices p[i] for i = 1, 2, …, n. Here p[i] is the price of a wood log of length ’i’ cms. We have to find the optimal way of cutting the wood log to make the furniture so that maximum revenue can be generated by selling the pieces of wood. ",10,Hard,Functions,Functions,ITP,Final Exam,"def cut_woodlog(p, n):
  """"""Take a list p of prices and the wood log length n and return lists r and s.
  r[i] is the maximum revenue that you can get and s[i] is the length of the
  first piece to cut from a rod of length i.""""""
  # r[i] is the maximum revenue for rod length i
  # r[i] = -1 means that r[i] has not been calculated yet
  r = [-1]*(n + 1)
  r[0] = 0
  
  # s[i] is the length of the initial cut needed for rod length i
  # s[0] is not needed
  s = [-1]*(n + 1)
  
  for i in range(1, n + 1):
  q = -1
  for j in range(1, i + 1):
  temp = p[j] + r[i - j]
  if q < temp:
  q = temp
  s[i] = j
  r[i] = q
  
  return r, s
  
  
 n = int(input('Enter the length of the wood log in cms: '))
  
 # p[i] is the price of a rod of length i
 # p[0] is not needed, so it is set to None
 p = [None]
 for i in range(1, n + 1):
  price = input('Enter the price of a wood log of length {} in: '.format(i))
  p.append(int(price))
  
 r, s = cut_woodlog(p, n)
 print('The maximum revenue that can be obtained:', r[n])
 print('The rod needs to be cut into length(s) of ', end='')
 while n > 0:
  print(s[n], end=' ')
  n -= s[n]"
"In a gameshow contestant can vote their competitor to get eliminated. Each contestant gets to vote twice, there are 6 contestants, write a python program to find out the name of the Contestant who is getting eliminated. 
 Input : Vote given by each contestant (i.e name of two competitor separated by comma) should be one input. Like this way you are supposed to get Vote of 6 participants as bellow.
 
 SAMPLE INPUT
 
 Danniel,Ross
 Ross,Nansy
 Nansy,Ross
 Danniel,Ross
 Danniel,Ross
 Danniel,Trisha
 
 SAMPLE OUTPUT
 
 Ross",10,Hard,Loops,Loops,ITP,Final Exam,"inp1=input()
 inp2=input()
 inp3=input()
 inp4=input()
 inp5=input()
 inp6=input()
  
 import re
 inp1=re.split(',',inp1)
 inp2=re.split(',',inp2)
 inp3=re.split(',',inp3)
 inp4=re.split(',',inp4)
 inp5=re.split(',',inp5)
 inp6=re.split(',',inp6)
 Total=[]
 #Total.append(inp1,inp2,inp3,inp4,inp5)
 #print(Total)
  
 for i in [0,1]:
  Total.extend([inp1[i],inp2[i],inp3[i],inp4[i],inp5[i],inp6[i]])
 #print(Total)
 Total_uni=list(set(Total))
 #print(Total_uni)
 Count=[]
 for i in Total_uni:
  Count.append(Total.count(i))
 #print(Count)
 for i in range(len(Count)):
  if Count[i]==max(Count):
  print(Total_uni[i])"
"In a pathology lab test, there is n number of samples for testing the health condition of a patient, each slide has 5 components, Sugar level, Blood pressure, Heartbeat rate, weight, fat percentage, based on input as provided by the patient's blood report (input has to be taken manually). (15 MARKS)
 Create a sample input for a healthy patient and also take random samples from a patient like ""Sugar level"":75, ""Blood pressure"":110, ""Heartbeat rate"":71, ""weight"":65, ""fat percentage"":10.
 Compare inputs with healthy patient data. If the patient data is not matching with the healthy patient’s data, provide a warning.
 Provide difference in readings to the patient.
 
 SAMPLE INPUT:
 Sugar level100
 Blood pressure90
 Heartbeat rate71
 weight92
 fat percentage12 
 
 SAMPLE OUTPUT:
 {'Sugar level': 100, 'Blood pressure': 90, 'Heartbeat rate': 71, 'weight': 92, 'fat percentage': 12}
 Sugar level 25
 Sugar level is 25 less than ideal value
 Blood pressure -20
 Blood pressure is -20 less than ideal value
 Heartbeat rate 0
 Heartbeat rate ideal value
 weight 27
 weight is 27 less than ideal value
 fat percentage 2
 fat percentage is 2 less than ideal value",15,Medium,Loops,Conditional Statements,ITP,Final Exam,"ideal_patient_data = {""Sugar level"":75, ""Blood pressure"":110, ""Heartbeat rate"":71, ""weight"":65, ""fat percentage"":10}
 new_patient_data = {}
 sugar = input(""Sugar level"")
 preassure = input(""Blood pressure"")
 heart_rate = input(""Heartbeat rate"")
 weight = input(""weight"")
 fat = input(""fat percentage"")
  
 #match
  
 new_patient_data[""Sugar level""] = int(sugar)
 new_patient_data[""Blood pressure""] = int(preassure)
 new_patient_data[""Heartbeat rate""] = int(heart_rate)
 new_patient_data[""weight""] = int(weight)
 new_patient_data[""fat percentage""] =int(fat)
 print('New Patient’s blood report:')
 print(new_patient_data)
  
 new_patient_data[""Sugar level""] = int(sugar)-ideal_patient_data[""Sugar level""] 
 new_patient_data[""Blood pressure""] = int(preassure)- ideal_patient_data[""Blood pressure""] 
 new_patient_data[""Heartbeat rate""] = int(heart_rate)-ideal_patient_data[""Heartbeat rate""]
 new_patient_data[""weight""] = int(weight) - ideal_patient_data[""weight""]
 new_patient_data[""fat percentage""] =int(fat) -ideal_patient_data[""fat percentage""]
  
 for key, value in new_patient_data.items():
  print(key,value)
  if value == 0:
  print(""%s ideal value"" % (key))
  elif value < ideal_patient_data[key]:
  print(""%s is %s less than ideal value"" % (key, new_patient_data[key]))
  elif value > ideal_patient_data[key]:
  print(""%s is %s greater than ideal value"" % (key, new_patient_data[key]))
  else:
  print(""wrong input"")"
"Create a scientific calculator using python. The calculator should give a menu to the user asking the type of mathematical operation to be performed (1. Arithmetic 2. Trigonometric 3. Logarithmic). According to the choice of the user, operations are performed on the numbers entered. Any innovation in this basic calculator model will be given more marks. 
 SAMPLE INPUT:
 SCIENTIFIC CALCULATOR
 1. ARITHMETIC 2. TRIGNOMETRIC 3. LOGARTITHMIC
 Please select an option of your choice1
 Enter the first number23
 Enter the second number56
 1.Addition 2. Subtraction 3. Multiplication 4. Division
 Please input the number of your choice of operation4
 SAMPLE OUTPUT:
 The division of the first number with the second numbers is 0.4107142857142857",15,Hard,Conditional Statements,,ITP,Final Exam,"# print(""SCIENTIFIC CALCULATOR"")
 print(""1. ARITHMETIC 2. TRIGNOMETRIC 3. LOGARTITHMIC"")
 metric=int(input(""Please select an option of your choice""))
 a=float(input(""Enter the first number""))
 b=float(input(""Enter the second number""))
  
 if metric==1:
  print(""1.Addition 2. Substraction 3. Multiplication 4. Division"")
  function=int(input(""Please input the number of your choice of operation""))
  if function==1:
  print(""The addition of the first and the second number is "",a+b)
  elif function==2:
  print(""The substraction of the first and the second numbers is"",a-b)
  elif function==3:
  print(""The multiplication of the first and the second numbers is"",a*b)
  elif function==4:
  print(""The division of the first number with the second numbers is"",a/b)
  else:
  print(""Invalid Input"")
  
  
 elif metric==2:
  print(""1. Sine 2. Cosine 3. Tan"")
  function=int(input(""Please input the number of your choice of operation"")) 
  import math
  if function==1:
  print(""The sine of the first number is"",math.sin(a))
  print(""The sine of the second number is"",math.sin(b))
  elif function==2:
  print(""The cos of the first number is "",math.cos(a))
  print(""The cos of the second number is"",math.cos(b))
  elif function==3:
  print(""The tan of the first number"",math.sin(a)/math.cos(a))
  else:
  print(""invalid Input"")
  
 elif metric==3:
   import math
  print(""The log of the first number is "",math.log(a))
  print(""the log of the second number is"",math.log(b))
  
 else:
  print(""check your options again"")"
"Ram built his own house and was confused about what name he should keep for it. He asked his friend Shyam to help. Shyam suggested a lot of names. Ram has certain conditions for the name:
 · It should consist of exactly three distinct characters, say C1, C2 and C3
 · It should satisfy the criteria that the string was of the form - C1n C2n C3n: This means, first C1 occurs n times, then C2 occurs n times and then C3 occurs n times. For example, xyz, ccaarr, mmmiiiaaa satisfy the criteria, but xyzw, aabbbcccc. don't.Given N names suggested by Shyam, print ""OK"" if Ram likes the name and ""Not OK"" if he doesn't.
 
 
 Input:
 First-line contains a single positive integer N - the number of names.
 N lines follow - each line contains a name.
 Output:
 For each name, Print ""OK"" if the name satisfies the criteria, else print ""Not OK"", on a new line.
 Constraints:
 1 ≤ N ≤ 100 1 ≤ Length of names ≤ 500
 Names contain only lowercase English alphabets
 
 SAMPLE INPUT
 2
 bbbrrriii
 brian
 SAMPLE OUTPUT
 OK
 Not OK",5,Medium,Loops,,ITP,Final Exam,"alphabets = 'abcdefghijklmnopqrstuvwxyz'
 print('Enter no of tries')
 testCases = int(input())
 for _ in range(testCases):
  string = input()
  count1 = 0
  count2 = 0
  count3 = 0
  i = 0
  end = 0
  c1 = 0
  while string[i] == string[c1]:
  count1 += 1
  i += 1
  c2 = i
  while string[i] == string[c2]:
  count2 += 1
  i += 1
  c3 = i
  try:
  while string[i] == string[c3]:
  count3 += 1
  i += 1
  except:
  end = 1
  pass
  
  if (count2 == count3 and end == 1 and count2 == count1):
   print('OK')
  else:
  print('Not OK')"
"Write a python program that takes orders for grocery items available in the store
 
 A. Create a dictionary with the name ""items_in_store"" = soap:5, brush:10, paste:7, chips:10 (1 mark)
 B. Create an empty dictionary with name shopping list. (1 mark)
 C. Create a loop that takes order for the grocery items by checking availability in the store and take the order. (2 marks)
 D. Note that if the items are out of the stock it will display ""out of stock”. (1 mark)",5,Easy,Data Handling,,ITP,Final Exam,"items_in_store = {""soap"":5,""brush"":10,""paste"":7,""chips"":10}
 shopping_list = {}
 while True:
  items = input(""item:"")
  quantity = input(""quantity"")
  for key, value in items_in_store.items():
  if items == key:
  if value >= int(quantity):
  print(key,""ordered"")
  else:
  print(""items not in stock"")
  else:
  pass
  more_shop = input(""Do you want to place next order: (yes/no)"")
  if more_shop == ""yes"":
  pass
  else:
  break"
"A Basket of Halloween candy has an unknown amount of candy and you need to guess exactly how much candy is in the bowl. You ask the person in charge a few questions to make a correct guess. If the candy is divided evenly among 5 people, how many pieces would be leftover? The answer is 2 pieces. You then ask about dividing the candy evenly among 6 people, and the amount left over is 3 pieces. Finally, you ask about dividing the candy evenly among 7 people, and the amount left over is 2 pieces. By looking at the bowl, you can tell that there are less than 200 pieces. Write a program to determine how many pieces are in the bowl. 
 
 1. SAMPLE INPUT:
 If the candy is divided evenly among 5 people, how many pieces would be leftover?
 2
 If the candy is divided evenly among 6 people, how many pieces would be leftover?
 3
 If the candy is divided evenly among 7 people, how many pieces would be leftover?
 2
 
 1. SAMPLE OUTPUT:
 Number of candies in the jar: 177
 
 2. SAMPLE INPUT:
 If the candy is divided evenly among 5 people, how many pieces would be leftover?
 2
 If the candy is divided evenly among 6 people, how many pieces would be leftover?
 4
 If the candy is divided evenly among 7 people, how many pieces would be leftover?
 2
 
 2. SAMPLE OUTPUT:
 Number of candies in the jar: 142",10,Medium,Functions,,ITP,Final Exam,"def guess(a,b,c,d,e,f):
  for i in range(1,201):
  sum1=(i-b)%a
  sum2=(i-d)%c
  sum3=(i-f)%e
  if (sum1==0) and (sum2==0) and (sum3==0):
  return i
  
  
 a=5
 print('If the candy is divided evenly among 5 people, how many pieces would be left over? ')
 b=int(input())
 c=6
 print('If the candy is divided evenly among 6 people, how many pieces would be left over? ')
 d=int(input())
 e=7
 print('If the candy is divided evenly among 7 people, how many pieces would be left over? ')
 f=int(input())
 g=guess(a,b,c,d,e,f)
 print('Number of candies in the jar : ', g)"
"Write a Python Program to create the following series and then print the nth Prime number from the Series,
 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89... 
 
 SAMPLE INPUT: 
 8
 
 SAMPLE OUTPUT:
 
 28657",15,Hard,Loops,Data Handling,ITP,Final Exam,"n = int(input())
 Prime = []
 A= [0,1]
 for i in range(30):
  A.append(A[i]+A[i+1])
  
 #ef prime(numm):
 p=0
 Prime = []
 for num in A:
  if num > 1:
  # check for factors
  for i in range(2,num):
  if (num % i) == 0:
  p=p+1
  break
  else:
  #print(num,""is a prime number"")
  Prime.append(num)
  # if input number is less than
  # or equal to 1, it is not prime
  else:
  p=p+1
 Prime=list(set(Prime))
  #return Prime
  
 Prime=set(Prime)
 A= set(A)
 Prime_Numbers=list(Prime.intersection(A))
 Prime_Numbers.sort()
 print(Prime_Numbers[n-1])"
"There are Government rules for a particular age group to watch specific movies. Some movies are advisable for students and some are not advisable for a specific age group. Nowadays, people have the habit of watching movies online. Before watching the movies find the age limit. If the age limits wrong, you are not providing the tickets. (5 marks) 
 a) Create a dictionary of age limit according to movie names as follows: 
 
 Movie Names Age limit and number of seats 
 A Little Princess Age= 11, seats= 5 
 Millennium Age= 18,seats= 5 
 Hangover Age= 15,seats= 7 
 Frozen Age= 12,seats= 4 
 Hangover II Age= 15,seats= 6 
 Shrek Age= 12, seats= 5
 
 
 b) After that it will ask ""What film would you like to watch?:"" You need to choose the movie name give list. 
 c) After choosing the movie program will ask ""How old are you?:"". The user should give the age as input. 
 d) If the age given by the user is in the allowed age limit , then your program should print “Enjoy the movie” on the screen 
 e) If the age limit is wrong, It should print=”You are too young to watch this movie”. Also if the movie name is not present, it should give a message- “ Sorry No tickets.”",5,Hard,Loops,Conditional Statements,ITP,Final Exam,"films = {""A Little Princess"": [11, 5],""Millennium"" : [18, 5],""Hangover"" : [15, 7],""Frozen"" : [12, 4],""Hangover II"" : [15, 6],
  ""Shrek"" : [12,5],""Fast and Furious"" : [12,5]}
  
  
 while True:
  
  choice = input(""What film would you like to watch?: "").strip().title()
  
  if choice in films:
  age = int(input(""How old are you?: "").strip())
  
  # check user's age
  if age >=films[choice][0]:
  
  # check enough seats 
  num_seats = films[choice][1]
  
   if num_seats > 0:
  print(""Enjoy the film!"")
  films[choice][1] = films[choice][1] - 1
  else: print(""Sorry, we don't have tickets."") 
  else: print(""You are too young to watch this movie."")
  else: break
 print(""We don't have this title..."")"
"generated multiplication questions to do. After each, the program should tell them whether they got it right or wrong and what the correct answer is and finally it should display the total score out of 10 scored by a user.
 
 For Example: 
 Question 1: 3 x 4 = 12 Right! 
 Question 2: 8 x 6 = 44 Wrong. The answer is 48. 
 ... 
 Question 10: 7 x 7 = 49 
 Right.",10,Medium,Loops,,ITP,Final Exam,"import random
 marks = 0
 for i in range(10):
  x= random.randint(0,10)
  y= random.randint(0,10)
  print (""Question"", i+1 ,"":"")
  print("" Enter the Result of"", x , ""x"", y ,""="")
  z = int(input())
  if (z==(x*y)):
  print (""Correct"")
  marks=marks+1
  else:
  print(""Wrong. The answer is"", x*y)
 print (""Your score is"", marks)"
"Write a program that converts Roman numerals into ordinary numbers. Here are the conversions: 
 M=1000, D=500, C=100, L=50, X=10, V=5 I=1. Don’t forget about things like IV being 4 and XL being 40. 
 
 Integer numbers and their Roman equivalent: 
 1000 : 'M' 
 900 : 'CM' 
 500 : 'D' 
 400 : 'CD' 
 100 : 'C' 90 : 'XC' 
 50 : 'L' 
 40 : 'XL' 
 10 : 'X' 
 9 : 'IX' 
 5 : 'V' 
 4: 'IV' 
 1: 'I' 
 
 
 SAMPLE INPUT: 
 Enter number to Convert: 
 417 
 
 SAMPLE OUTPUT: 
 CDXVII",15,Hard,Functions,Loops,ITP,Final Exam,"def Convert(n):
  decimal = [ 1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1 ]
  roman= [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
  roman_num = ''
  i = 0
  while n > 0:
  q= n // decimal[i]
  for _ in range(q):
  q= n // decimal[i]
  roman_num += q * roman[i]
  n -= q*decimal[i]
  i += 1
  return roman_num
  
 n=int(input('Enter number to Convert : '))
 print(Convert(n))"
"Design an air traffic control unit. The runway should be either free or busy, Each plane should request for landing if the plane is given permission for landing the runway should be changed to busy and no plane should be given access to that runway. 
 
 a. Make a list of free runways free_run_ways = [3,4,5] 
 b. Make a list of busy runways. 
 busy_run_ways = [1,2] 
 c. when pilot requests for landing give him runway from free runway and remove it from free and add to busy. The runway has given: 4 free_run_ways = [3,5] busy_run_ways = [1,2,4] 
 d. If the busy runway is given raise warning. 
 WARNING run way busy 
 e. On landing remove runway from busy and add to free Landed: YES",5,Medium,Loops,Conditional Statements,ITP,Final Exam,"free_run_ways = [3,4,5]
 busy_run_ways = [1,2]
  
 while True:
  runway = int(input(""Provide a runway for landing:""))
  print(runway,type(runway))
  if runway in busy_run_ways:
  print(""WARNING runway busy"")
  elif runway in free_run_ways:
  print(""runway alloted %i"" % (runway))
  free_run_ways.remove(runway)
  busy_run_ways.append(runway)
  
  landing_deatils = input(""is landing complete:(YES/NO)"")
  if landing_deatils == ""YES"":
  busy_run_ways.remove(runway)
  free_run_ways.append(runway)
  flag = input (""Any more landing request: (YES/NO)"")
  if flag == 'YES':
  continue
  else :
  break
  else:
  pass"
"Fibonacci Series is computed based on the following formula: 
 
 f(n)=0 if n=0 f(n)=1 if n=1 
 f(n)=f(n-1)+f(n-2) if n>1 
 Write a program using list comprehension to print the Fibonacci Sequence in the comma-separated form with a given n input by user input. 
 
 Sample input: 5 
 
 Sample Output: 0,1,1,2,",5,Easy,Functions,Conditional Statements,ITP,Final Exam,"def f(n):
  if n == 0: return 0
  elif n == 1: return 1
  else: return f(n-1)+f(n-2)
  
 n=int(input())
 values = [str(f(x)) for x in range(0, n+1)]
 print( "","".join(values))"
"An Ecommerce portal has a list of items available with them in each category (inventory) in the form of the list within the Dictionary.
 
 For example Inventory= {'Men': ['Shirt','Suit','Trouser','Jeans'], 'Women': 
 ['Saree','Dress_suit','Handbag','Jewellery'],'Home_appliances': 
 ['TV','Refrigerator'],'Kids':['Toys','Bags','Books']} 
 
 Write a program which will take the name of an item, the user wants to buy and search it in the inventory. if it’s found in the inventory then print a message like 'item is available'. otherwise ask the user 'Would you like to continue buying: yes or no'. If the user gives 'yes ' then repeat searching in the inventory otherwise program should stop the execution.",10,Hard,Loops,Conditional Statements,ITP,Final Exam,"Inventory= {'Men': ['Shirt','Suit','Trouser','Jeans'], 'Women': ['Saree','Dress_suit','Handbag','Jewellery'],'Home_appliances': ['TV','Refrigerator'],'Kids':['Toys','Bags','Books']}
 #print(Inventory)
  
 while (True):
  user_choice= input('Enter the item you want to buy : ')
  
  for key,values in Inventory.items():
  if user_choice in values:
  print('Item is available')
  break
  else:
  print('Item not available')
  break
  
  next_choice=input(""Would you like to continue buying : yes or no: "").lower()
  if next_choice == 'yes':
  continue
  else:
  break"
"Suppose the cover price of the book ‘Steve Jobs: The Life, Lessons & Rules for Success’ is $ 49.65,t Harvard bookstores get a 35% discount from the publisher "" Createspace Independent Pub”.Shipping costs are $4.65 for the first copy and 78 cents for each additional copy from the publisher. What is the total wholesale cost for 60, 100 and 150 copies?
 1. Create a list to store the cover price and also,
 2. Create a user input that takes the total wholesale cost for 60, 100 and 150 copies cost separately.
 3. Define a function that will display the shipping cost.
 4. Create another function to return the discount prices and also wholesale costs.
 5. Display the cost of a number of books bought and wholesale costs.",5,Medium,Functions,,ITP,Final Exam,"# Total wholesale book cost calculator
 cover_price = 49.65
  
 number_of_books = int(input(""How many books do you want to order at wholesale? ""))
  
 def ship_cost (number_of_books):
  if number_of_books == 1:
  return (number_of_books * 4.65) # Cost of shipping one book is $4.65
  else:
  return (4.65 + (number_of_books - 1) * 0.78) # Each additional copy of the book is $0.78 to ship
  
 def discounted_price(number_of_books):
  return(cover_price - (cover_price * .35)) # There is a 35% discount on wholesale book sales
  
 def wholesale_cost(number_of_books):
  return ((discounted_price(number_of_books) * number_of_books) + ship_cost(number_of_books))
  
 print(""The cost of buying and shipping"", number_of_books, ""books is $"",round(wholesale_cost(number_of_books), 2))"
"You are working with NASA and suddenly you got an opportunity to travel to the moon. You have to stay there for 15 years.
 Exercise1: You have to calculate your weight in kilograms on the moon in a period of 15 years,(3 marks)
 Step1: Measure your Weight on the Moon and also create a variable to store it. Assume your starting weight:30
 ● For each year, you can calculate the new weight by adding a kilogram, and then multiplying by 6.5 percent (0.65) to get the weight on the moon:
 Exercise2: Create basic Moon Weight Function: The function should take two parameters: current weight:30 and increased weight:0.5 (the amount the weight will increase each year)(2 marks)
 Note: moon_weight = weight * 0.65",5,Easy,Loops,Functions,ITP,Final Exam,"weight = 30
 for year in range(1, 16):
  weight = weight + 1
  moon_weight = weight * 0.65
  print('Year %s is %s' % (year, moon_weight))
  
  
  
 def moon_weight(weight, increase):
  for year in range(1, 16):
  weight = weight + increase
  moon_weight = weight * 0.65
  print('Year %s is %s' % (year, moon_weight)) 
  
  
 moon_weight(30, 0.5)"
Professor told the student that Today is Thursday. what day of the week will it be in 46 days of time from today (Thursday)?,5,Easy,Data containers,Conditional Statements,ITP,Final Exam,"Today = 'Thursday'
 number = 46
 day_list = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
 index = day_list.index(Today)
 print(""Today is:"" +str(day_list[index]))
 print('In:' + str(number) + "":Day is time will be a"")
  
 newday = day_list.index(Today) + number % 7
  
 if newday >= 7:
  newday = newday - 7
  
 print(day_list[newday])"
"Python program
 Create a list of items given below(2 marks)
 A. = {soap,detergent,chocolate,toothpaste}
 B. = {soap,detergent,brush,comb,toothpaste}
 C. = {juice,cake,brush,comb,chips}
 
 Create a final dictionary that will show the total count of each product sold on a given day. (3 marks)",5,Easy,Data containers,Loops,ITP,Final Exam,"list1 = [""soap"",""detergent"",""chocolate"",""toothpaste""]
 list2 = [""soap"",""detergent"",""brush"",""comb"",""toothpaste""]
 list3 = [""juice"",""cake"",""brush"",""comb"",""chips""]
  
 sampleList = list1 + list2 + list3
 print(""Origigal list "", set(sampleList))
  
 countDict = dict()
 for item in sampleList:
  if(item in countDict):
  countDict[item] += 1
  else:
  countDict[item] = 1
  
 print(""Printing count of each item "",countDict)"
"A famous hotel is maintaining its order history in the dictionary in the given format. Find out which food item is ordered the most 
 order_id: [list of items ordered]
 order_history= {165:['Noodles','Tomato Soup','Fries'],168:['Rice Idli','Rawa Dosa','Fries'],190:['Fries','Noodles']}",5,Medium,Loops,Functions,ITP,Final Exam,"order_history= {165:['Noodles','Tomato Soup','Fries'],168:['Rice Idli','Rawa Dosa','Fries'],190:['Fries','Noodles']}
 foodlist=[]
 for i in order_history:
  for item in order_history[i]:
  foodlist.append(item)
  
 print(foodlist)
 uni_foodlist=set(foodlist)
 print(uni_foodlist)
  
 count_foodlist=[]
 for i in uni_foodlist:
  count_foodlist.append([i,foodlist.count(i)])
  
 print(count_foodlist)
  
 def SortSecond(val): 
  return val[1] 
  
  
 count_foodlist.sort(key = SortSecond, reverse = True) 
  
 print('most ordered item is ', count_foodlist[0])"
"Write a program that accepts a sequence of lines as input and prints the lines after making all characters in the sentence capitalized. 
 Suppose the following input is supplied to the program:
 Hello world
 Practice makes perfect
 Then, the output should be: HELLO WORLD
 PRACTICE MAKES PERFECT",5,Easy,Loops,,ITP,Final Exam,"lines = []
 while True:
  s = input()
  if s:
  lines.append(s.upper())
  else:
  break;
  
 for sentence in lines:
  print (sentence)"
"Write a Python program to make a currency converter. The currency converter should be able to convert a specific currency to an appropriate INR (Indian National Rupee) value.
 1. USD (U.S Dollars) (1 USD =71.83 INR)
 2. YEN (Japanese YEN) (1 YEN= 0.66 INR
 3. EURO (1 EURO=79.57 INR) 
 4. U.K. POUND (1 U.K POUND=93.11 INR)
 
 INPUT AND OUTPUT SAMPLE:
 Enter the currency which you want to convert. e.g. USD
 Enter the value of the currency which you want to convert. e.g. 100
 The total converted value is 7183.0",5,Medium,Conditional Statements,,ITP,Final Exam,"currency=input(""Enter the currency which you want to convert (USD / YEN / EURO / POUND)"")
 value=float(input(""Enter the value of currency which you want to convert to INR""))
  
 if currency=='USD':
   print(""The total converted value is "",value*71.83)
 elif currency =='YEN':
  print(""the total converted value is"",value*0.66)
 elif currency=='EURO':
  print(""the total converted value is "",value*79.57)
 elif currency =='POUND':
  print(""the total converted value is "",value*93.11)
 else:
  print(""Invalid Input. Try again"")"
"Write a Python program which calculates the area of various geometrical figures as given below: 
 The program should ask the user about the geometrical figure for which he wants to calculate the area. Take the inputs accordingly and calculate the area. (units/metrics like mm, cm can be included as per the programmer’s choice)
 
 1. the formula to calculate the area of a square is Area= (Side of a square)**2
 2. The formula to calculate the area of a circle is Area=(pi)*(radius)**2
 3. The formula to calculate the area of a triangle is Area=0.5*Base *Height
 4. The formula to calculate area of a cylinder is Area=2*pi*radius*height+2*pi*(radius**2)
 
 
 SAMPLE INPUT AND OUTPUT:
 Please enter the name of the geometrical figure for which you want to calculate the area CYLINDER
 Enter the radius of a cylinder = 3
 Enter the height of a cylinder = 5
 The area of the cylinder 150.72",5,Medium,Conditional Statements,,ITP,Final Exam,"fig=input(""Please enter the name of the geometrical figure for which you want to calculate the area "")
  
 if fig=='SQUARE':
  sideofsquare=float(input(""Enter the value of the square""))
  print(""area of square is "",sideofsquare**2)
  
 elif fig=='CIRCLE':
  pi=3.14
  radius=float(input(""enter the radius of the circle""))
  print(""the area of the circle is"",pi*(radius**2))
  
 elif fig=='TRIANGLE':
  base=float(input(""Enter the base of the triangle""))
  height=float(input(""Enter the height of the triangle""))
  print(""The area of the triangle"",0.5*base*height)
  
 elif fig=='CYLINDER':
  radius=float(input(""Enter the radius of a cylinder""))
  height=float(input(""Enter the height of a cylinder""))
  print(""The area of the cylinder"",2*3.14*radius*height+2*3.14*(radius**2))
 else:
  print(""Invalid Input"")"
"Write a python program to convert a 12-hour format to a 24-hour format. The program should take the current time from the user in a 12-hour format and convert it into 24-hour format.: 
 
 Input: ""08:05:45 PM""
 Output: 20:05:45",5,Easy,Functions,Conditional Statements,ITP,Final Exam,"def convert24(str1): 
  
  # Checking if last two elements of time 
  # is AM and first two elements are 12 
  if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
  return ""00"" + str1[2:-2] 
  
  # remove the AM 
  elif str1[-2:] == ""AM"": 
  return str1[:-2] 
  
  # Checking if last two elements of time 
  # is PM and first two elements are 12 
  elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
  return str1[:-2] 
  
  else: 
  
  # add 12 to hours and remove PM 
  return str(int(str1[:2]) + 12) + str1[2:8] 
  
  
 print(convert24(""08:05:45 PM""))"
"Given a string s find the number of white spaces in the given string s.
 
 Input Format
 Take Input String S
 Output Format
 Number Of White Spaces In S
 Constraints
 0 < S < 100001
 
 SAMPLE INPUT
 Hello World
 
 SAMPLE OUTPUT: 1",5,Easy,Loops,,ITP,Final Exam,"string = input()
 count = 0
 for i in string:
  if i != "" "":
  pass
  else:
  count += 1
 print(count)"
"We are given a set of n items. Each item i has a weight w(i) and a value v(i) where 0 <= i < n. We are given a maximum capacity of a bag B. The problem is to find what all items we should take such that the total weight does not exceed w and the total value is maximized.
 Step1: Take the following inputs from User
 Number of items (n)
 Maximum capacity of the bag (w)
 Take weight and value for all 'n' items
 Step 2: Maintain a Nested list (item_list) of all items [weight, value, profit/weight]
 Step 3: Sort this list(item_list) according to ratio Profit/Weight of each item
 Step 4: Display the items weight and their value in such a way that after adding them in a bag of capacity 'w’, Total weight of the bag should not get exceeded by 'w'
 
 Sample Input:
 Enter the number of items : 3
 Enter the capacity of the bag: 10
 enter weights for item 1 : 3
 enter Profit for item 1: 2
 enter weights for item 2: 4
 enter Profit for item 2: 10
 enter weights for item 3: 5
 enter Profit for item 3: 20
 
 Sample Output:
 Added Weight 5 with Profit 20 in bag
 Added Weight 4 with Profit 10 in bag",10,Hard,Loops,,ITP,Final Exam,"n= int(input(""Enter number of items : ""))
 w= int(input('Enter capacity of bag : '))
 w_list=[]
 p_list=[]
 for i in range(n):
  w_list.append(int(input(""enter weights for item {0} : "".format(i+1))))
  
  p_list.append(int(input('enter Profit for item {0} : '.format(i+1))))
 item_list=[]
 for i in range(n):
  item_list.append([w_list[i],p_list[i],p_list[i]/w_list[i]])
  
 def sortthird(val): 
  return val[2] 
  
  
 item_list.sort(key = sortthird, reverse = True) 
  
  
 bag_sum=0
 for i in item_list:
  if bag_sum + i[0] <= w:
  bag_sum=bag_sum + i[0]
  print('Added Weight {0} with Profit {1} in bag'.format(i[0],i[1]))
  else:
  break"
"You are a teacher and playing a ""word guessing game"" with students. You choose six words relating to recent conversational themes and write sets of clues to help students. Student get 3 chances to guess the three letters word given below
 Create a word set=[""cat"", ""hat"", ""pop"", ""sea"", ""row"", ""cup""] like and take user input display like ""Let's play a word guessing game . The word has 3 letters in it. You get 3 guesses. Guess a letter "" if you guess correct it will display
 Great Guess!
 You got it!
 The word was a cat. Thanks for playing!
 Exiting
 If your guess wrongly your code will ask three times to guess the word as shown in the below example
 Sorry, try again. was
 Sorry, try again. the
 Sorry, try again. are
 Exiting",10,Hard,Data Handling,Loops,ITP,Final Exam,"set_of_words=[""cat"", ""hat"", ""pop"", ""sea"", ""row"", ""cup""]
 print(""Let's play a word guessing game . The word has 3 letters in it. You get 3 guesses."")
 for i in range(3):
  word = input(""Guess a word"")
  if word in set_of_words:
  print(""Great Guess!You got it!"")
  break
  else:
  print(""Wrong guess"")
 if i==2:
  print(""Exiting"")"
"India conducted a survey on Data Science colleges in India. Let us assume that the survey was conducted in an ‘n’ number of institutes. The experts were asked to rank the institutes based on three different metrics. The metrics are facilities, academics, and infrastructure. The maximum score in each category is as follows.
 Facilities = 25
 Academics = 50
 Infrastructure = 25
 At the end of the survey, the scores of the individual metrics are added up to get the total score and the institutes are ranked based on the total score. The institute that scores the highest score is ranked 1st. The next highest score is given the rank 2 and so on. Write a program to read the scores of the three metrics for each institute, store the scores in a list. Make a list of individual score list for 3 institutes. Print only the Total score in the sorted (Descending) order.
 Input format:
 First-line contains the number of institutes
 Next line contains the scores for Facilities of Institute 1
 Next line contains the scores for Academics of Institute 1
 Next line contains the scores for Infrastructure of Institute 1
 Next line contains the scores for Facilities of Institute 2
 Next line contains the scores for Academics of Institute 2
 Next line contains the scores for Infrastructure of Institute 2
 Next line contains the scores for Facilities of Institute
 Next line contains the scores for Academics of Institute
 Next line contains the scores for Infrastructure of Institute
 
 
 Note: Facilities = 25 if your giving above 25 code will display: ""score cant exceed 25, please enter again""
 Academics = 50 if your giving above 50 code will display: ""score cant exceed 50, please enter again""
 Infrastructure = 25 if your giving above 25 code will display: ""score cant exceed 25, please enter again""
 
 Output format:
 List of total scores in the descending order sample input:
 3 
 20
 20
 20
 22
 22
 22
 21
 21
 21
 sample output: [66,63,60]",10,Medium,Conditional Statements,,ITP,Final Exam,"a=int(input(""Enter the number of institutes:""))
 q=[]
 for i in range(0,a):
  while True:
  t=int(input(""Enter score for at institute Facilities: ""))
  if t <= 25:
  break
  else:
  print(""score can't exceed 25, please enter again"")
  while True:
  m=int(input(""Enter score for Academics: ""))
  if m <= 50:
  break
  else:
  print(""score can't exceed 50, please enter again"")
  while True:
  g=int(input(""Enter score for Infrastructure: ""))
  if g <= 25:
  break
  else:
  print(""score can't exceed 25, please enter again"")
  w=t+m+g
  q.append(w)
  q.sort(reverse=True)
 print(q)"
"Suppose you are playing rummy cards.
 Create a variable that takes a random number(1 to 10) as an input.(2 marks)
 Create a loop for the following below Conversation( 8 marks)
 Step1. System: ""guess the correct card number ""
 step2. User: Random numbers (1 to 10)
 step3. system: ""Would you like to guess again? Yes or No? ""
 step4. User: (Yes or no) if you say yes
 step5. system: ""What's your next guess? ""
 step6. User: random number(1 to 10)
 step7. system: ""Just one more try! Enter your last guess, ""
 step8. User:random number(1 to 10)
 step9. system: ""That's too bad! Thanks for playing.""
 Note: If user guessing is correct it will show ""Great job"" and Step number 4 if your guess is ""NO"" it will display ""That's too bad! Thanks for playing.""",10,Medium,Conditional Statements,,ITP,Final Exam,"import random
 a = random.randrange(10)
 question = input(""guess the correct card number "")
 if question == a:
  print (""You guessed right!"")
 else:
  q2 = input(""Would you like to guess again? Yes or No? "")
  if q2.lower() == ""yes"":
  b = input(""What's you're next guess? "")
  if b == a:
  print(""Great job!"")
  else:
  q3 = input(""Just one more try! Enter your last guess, "")
  if q3 == a:
  print(""Great job!"")
  else:
  print(""That's too bad! Thanks for playing."".format(a))
  
  
  else:
  print(""That's too bad! Thanks for playing."".format(a))"
"Your friend will take you to the doctor’s clinic for a check-up. He asks the time by which you have to book a taxi. Your friend has few works to complete For e.g : going to the dry-cleaners in the mall, have lunch in the restaurant, buy some dog food at the pet-shop, take money in the bank. It takes 'x' minutes to drive to the mall and park the vehicle, and 'y' minutes to get the clothes dry cleaned, ‘z' minutes for lunch, 'a' minutes to get dog food, 'b' minutes to get money at the bank and 'c' minutes to drive to the doctor’s clinic from the mall. Given the values for ‘x’, ‘y’, ‘z’, ‘a’ and ‘b’ and the time of appointment as 'h'. hours 'm' minutes, write an algorithm and the subsequent Python code to determine when you should leave home. For example, if x is 10, y is 30, z is 65, a is 40, b is 20, c is 80 and ‘h’ is 12 and m is 0, then the output of the program is started from home by 7hours 55minutes.
 Write appropriate functions for accomplishing the task.
 Input Format
 
 First-line contains the value for ‘x’
 Next line contains the value for ‘y’
 Next line contains the value for ‘z’
 Next line contains the value for ‘a’
 Next line contains the value for ‘b’
 Next line contains the value for ‘c’
 Next line contains the value for ‘h’
 Next line contains the value for, ‘m’
 
 
 Output Format 
 Print the start time from home in ‘hours’ and ‘minutes’ in 24-hour format. Hours and minutes shall be separated by a space.",10,Medium,Conditional Statements,,ITP,Final Exam,"x=int(input(""minutes to drive to the mall and park the vehicle:X___""))
 y=int(input(""minutes to get the clothes dry cleaned:Y____""))
 z=int(input(""minutes for lunch:Z____""))
 a=int(input(""minutes to get dog food:a____""))
 b=int(input(""minutes to get money at the bank:b ____""))
 c=int(input(""minutes to drive to the doctor’s office from the mall:c____""))
 h=int(input(""time of appointment as hours:h ____""))
 m=int(input(""time of appointment as minutes:m____""))
 w=x+y+z+a+b+c
 t=m-w
 if(t>=0):
  print(h,t)
 else:
  y=-t
  hh=(y//60)+1
  mm=60-(y%60)
  print(""hours:"",h-hh,""minutes:"",mm)"
"Write a python program to take a list from the user and find out mean, mode, median, median low and median high by using statistics module in python. 
 Sample Input li = [1, 2, 3, 3, 2, 2, 2, 1]
 
 Sample Output
 The average of list values is: 2
 The maximum occurring element is: 2
 
 Sample Input li = [1, 2, 2, 3, 3, 3]
 
 Sample Output
 The median of the list element is: 2.5
 The lower median of the list element is: 2
 The higher median of the list element is : 3",10,Medium,Data containers,,ITP,Final Exam,"# Python code to demonstrate the working of 
 # mean() and mode() 
  
 # importing statistics to handle statistical operations 
 import statistics 
  
 # initializing list 
 li = [1, 2, 3, 3, 2, 2, 2, 1] 
  
 # using mean() to calculate average of list elements 
 print (""The average of list values is : "",end="""") 
 print (statistics.mean(li)) 
  
 # using mode() to print maximum occurring of list elements 
 print (""The maximum occurring element is : "",end='') 
 print (statistics.mode(li)) 
  
 li = [1, 2, 2, 3, 3, 3] 
  
 # using median() to print median of list elements 
 print (""The median of list element is : "",end="""") 
 print (statistics.median(li)) 
  
 # using median_low() to print low median of list elements 
 print (""The lower median of list element is : "",end="""") 
 print (statistics.median_low(li)) 
  
 # using median_high() to print high median of list elements 
 print (""The higher median of list element is : "",end="""") 
 print (statistics.median_high(li))"
"Find the ""he"" in given below story and also count of 'he':
 Input: There was an old owl that lived in an oak. Every day he saw incidents happening around him. Yesterday he saw a boy helping an old man to carry a heavy basket. Today he saw a girl shouting at her mother. The more he saw the less he spoke. As he spoke less, he heard more. He heard people talking and telling stories. He heard a woman saying that an elephant jumped over a fence. He also heard a man saying that he had never made a mistake. The old owl had seen and heard about what happened to people. Some became better and some became worse. But the old owl had become wiser each and every day.
 
 Output: where he appears is indicated below ... there were:22 Instances
 T[he]re was an old owl that lived in an oak. Every day [he] saw incidents happening around him. Yesterday [he] saw a boy [he]lping an old man to carry a [he]avy basket. Today [he] saw a girl shouting at [he]r mot[he]r. T[he] more [he] saw t[he] less [he] spoke. As [he] spoke less, [he] [he]ard more. He [he]ard people talking and telling stories. He [he]ard a woman saying that an elephant jumped over a fence. He also [he]ard a man saying that [he] had never made mistake. T[he] old owl had seen and [he]ard about what happened to people. Some became better and some became worse. But t[he] old owl had become wiser each and every day.",15,Medium,Loops,Conditional Statements,ITP,Final Exam,"inp_string= ""There was an old owl that lived in an oak. Every day he saw incidents happening around him. Yesterday he saw a boy helping an old man to carry a heavy basket. Today he saw a girl shouting at her mother. The more he saw the less he spoke. As he spoke less, he heard more. He heard people talking and telling stories. He heard a woman saying that an elephant jumped over a fence. He also heard a man saying that he had never made a mistake. The old owl had seen and heard about what happened to people. Some became better and some became worse. But the old owl had become wiser each and every day.""
 string_to_find = 'he'
 count = 0
 match_index = 0
 while match_index < len(inp_string):
  if inp_string[match_index-1] != '[':
  if ""h"" == inp_string[match_index]:
  if inp_string[match_index:match_index+2] == string_to_find:
  inp_string = inp_string[:match_index] + ""["" + inp_string[match_index:]
  inp_string = inp_string[:match_index+3] + ""]"" + inp_string[match_index+3:]
  count +=1
  match_index += 1
 print(""where he appears is indicated below ... there were:"" + str(count) + "":Instance"")
 print()
 print(inp_string)
  # List of users 
  
 known_users = [""rani"", ""vani"", ""Julia"", ""Alice"", ""Ela"", ""ray"", ""sunny"", ""John"", ""Filip"", ""Jakub"", ""Kuba"", ""Robert"", ""Karol"", ""Carol""]
  
 print(len(known_users))
  
  
 while True:
  print(""Hi! My name is Bob and I am the security system robot."")
  name = input(""What is your name?: "").strip().capitalize() # Capitalize function is used to make the programme sure that user can put a name starting with a small letter.
  
  if name in known_users:
  print(""Hello {}!"".format(name))
  
  remove = input(""Would you like to be removed from the system (yes/no)?: "").lower() # No matter if user write 'yes' or 'no' with lower or capitalized letter
  
  if remove == ""yes"":
  print(known_users)
  known_users.remove(name)
  print(known_users)
  elif remove == ""no"":
  print(""No problem, I did not want you to leave anyway."")
  
  else:
  print(""I think I have not seen you on the list {}"".format(name))
  add_me = input(""Would you like to be added to the system (yes/no)?: "").strip().lower()
  if add_me == ""yes"":
  known_users.append(name)
  elif add_me == ""no"":
  print(""No worries. You will not be on the list."")"
"You have a company that creates home security technology. Over the past five years, more than one million people have come to you for home security information and recommendations. And you have helped thousands of those people pick the best home security system for their homes. you have to test, research, and compare home security companies based on the factors that matter most when looking at security systems.
 You have to create list of 10 usernames. It should print the length of the names. The security system robot will introduce itself ""Hi! My name is Bob and I am the security system robot."" (2 marks)
 Create a capitalize function to convert 1st letter of the word into capital letter.(1 marks)
 Please follow the below guidelines:
 Step1: Conversation1: If your name not present in the list then follow the below steps.( 6 marks)
 length of the names 14
 Hi! My name is Bob and I am the security system robot.
 What is your name?: sam
 I think I have not seen you on the list Sam
 Would you like to be added to the system (yes/no)?: yes
 Hi! My name is Bob and I am the security system robot.
 What is your name?: sam
 Hello Sam!
 Would you like to be removed from the system (yes/no)?: no
 No problem, I did not want you to leave anyway.
 Hi! My name is Bob and I am the security system robot.
 Step 2: Conversation2: If your name present in the list then follow below steps. (6 marks)
 What is your name?: John
 Hello John!
 Would you like to be removed from the system (yes/no)?: yes
 ['rani', 'vani', 'Julia', 'Alice', 'Ela', 'ray', 'sunny', 'John', 'Filip', 'Jakub', 'Kuba', 'Robert', 'Karol', 'Carol']
 ['rani', 'vani', 'Julia', 'Alice', 'Ela', 'ray', 'sunny', 'Filip', 'Jakub', 'Kuba', 'Robert', 'Karol', 'Carol']
 Hi! My name is Bob and I am the security system robot.
 What is your name?: John
 I think I have not seen you on the list John
 Would you like to be added to the system (yes/no)?: no
 No worries. You will not be on the list.
 Hi! My name is Bob and I am the security system robot.
 Note: This program continue loop",15,Hard,Loops,Conditional Statements,ITP,Final Exam,"# List of users 
  
 known_users = [""rani"", ""vani"", ""Julia"", ""Alice"", ""Ela"", ""ray"", ""sunny"", ""John"", ""Filip"", ""Jakub"", ""Kuba"", ""Robert"", ""Karol"", ""Carol""]
  
 print(len(known_users))
  
  
 while True:
  print(""Hi! My name is Bob and I am the security system robot."")
  name = input(""What is your name?: "").strip().capitalize() # Capitalize function is used to make the programme sure that user can put a name starting with a small letter.
  
  if name in known_users:
  print(""Hello {}!"".format(name))
  
  remove = input(""Would you like to be removed from the system (yes/no)?: "").lower() # No matter if user write 'yes' or 'no' with lower or capitalized letter
  
  if remove == ""yes"":
  print(known_users)
  known_users.remove(name)
   print(known_users)
  elif remove == ""no"":
  print(""No problem, I did not want you to leave anyway."")
  
  else:
  print(""I think I have not seen you on the list {}"".format(name))
  add_me = input(""Would you like to be added to the system (yes/no)?: "").strip().lower()
  if add_me == ""yes"":
  known_users.append(name)
  elif add_me == ""no"":
  print(""No worries. You will not be on the list."")"
"Write a function called merge that takes two already sorted lists of possibly different lengths, and merges them into a single sorted list.
 
 (a) Do this using the sort method.
 (b) Do this without using the sort method.",15,Hard,Functions,Loops,ITP,Final Exam,"def merge(a,b):
  
  n1=len(a)
  n2=len(b)
  
  i = 0 
  j = 0 
  arr=[]
  while i < n1 and j < n2 : 
  if a[i] <= b[j]: 
  arr.append(a[i])
  i += 1
  else: 
  arr.append(b[j])
  j += 1
  
  # Copy the remaining elements of a[], if there are any 
  while i < n1: 
  arr.append(a[i]) 
  i += 1
  
  # Copy the remaining elements of b[], if there are any 
  while j < n2: 
  arr.append(b[j]) 
  j += 1
  return arr
  
 a=[3,5,7,9,12,45]
 b=[1,4,6,8,10]
  
 print('Sort using sort method')
 print(sorted(a+b))
  
 print('sort using user defined function')
 print(merge(a,b))"
"Write a python program for monthly finance management system. The program should ask the user about the salary/pocket money that a person gets for a month. Then it should ask the user monthly about how much he spends on rent, food, travel, health and miscellaneous. At the end of every month it should display about the money that the user saved in that month. At the MONTH end, it should tell the complete summary of how much a person earned, saved, invested and spent on various things. You should give a choice to the user whether he wants to enter any other expense monthly or not. If yes, please ask about the extra expenditures and include it in the summary. Any innovation in this basic model will be given weightage in marks.",15,Hard,Conditional Statements,,ITP,Final Exam,"# FINANCE MANAGEMENT SYSTEM
  
 print(""WELCOME TO THE EXPENSE MANAGEMENT SYSTEM"")
 print(""LETS CALCULATE YOUR EXPENSES FOR THIS MONTH"")
  
 month=input(""Enter the name of the month for which expenses have to be calculated "")
  
 if month=='JAN':
  jsalary=float(input(""whats your salary of january?""))
  jinvest=float(input(""whats your total investment for this month?""))
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  if choice=='YES':
  jfood=float(input(""how much do you spend on food?""))
  jrent=float(input(""whats your monthly rent?""))
  jmisc=float(input(""whats else do you spend on?""))
  
  jsavings=jsalary-jinvest-jfood-jrent-jmisc
  print(""Your salary is"",jsalary)
  print(""Your food expenditure is"",jfood)
  print(""Your rent is"",jrent)
  print(""your extra expenditures are"",jmisc)
  print(""your savings are"",jsavings)
  
  elif choice=='NO':
  jsavings=jsalary-jinvest
  print(""Your total savings for january are"",jsavings)
   
 elif month=='FEB':
  fsalary=float(input(""whats your salary of feb?""))
  finvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES':
  ffood=float(input(""how much do you spend on food?""))
  frent=float(input(""whats your monthly rent?""))
  fmisc=float(input(""whats else do you spend on?""))
  fsavings=fsalary-finvest-ffood-frent-fmisc
  print(""Your salary is"",fsalary)
  print(""Your food expenditure is"",ffood)
  print(""Your rent is"",frent)
  print(""your extra expenditures are"",fmisc)
  print(""your savings are"",fsavings)
  
  elif choice=='NO':
  fsavings=fsalary-finvest
   print(""Your total savings for february are"",fsavings)
  
  
 elif month=='MAR':
  msalary=float(input(""whats your salary of mar?""))
  minvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES':
  mfood=float(input(""how much do you spend on food?""))
  mrent=float(input(""whats your monthly rent?""))
  mmisc=float(input(""whats else do you spend on?""))
  msavings=msalary-minvest-mfood-mrent-mmisc
  print(""Your salary is"",msalary)
  print(""Your food expenditure is"",mfood)
  print(""Your rent is"",mrent)
  print(""your extra expenditures are"",mmisc)
  print(""your savings are"",msavings) 
  
  elif choice=='NO':
  msavings=msalary-minvest
  print(""Your total savings for mar are"",msavings)
  
 elif month=='APR':
  asalary=float(input(""whats your salary of apr?""))
  ainvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES':
  
  afood=float(input(""how much do you spend on food?""))
  arent=float(input(""whats your monthly rent?""))
  amisc=float(input(""whats else do you spend on?""))
  asavings=asalary-ainvest-afood-arent-amisc
  print(""Your salary is"",asalary)
  print(""Your food expenditure is"",afood)
  print(""Your rent is"",arent)
  print(""your extra expenditures are"",amisc)
  print(""your savings are"",asavings) 
  
  elif choice=='NO':
  asavings=asalary-ainvest
  print(""Your total savings for april are"",asavings)
  
 elif month=='MAY':
  masalary=float(input(""whats your salary of may?""))
  mainvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES':
  
  
   mafood=float(input(""how much do you spend on food?""))
  marent=float(input(""whats your monthly rent?""))
  mamisc=float(input(""whats else do you spend on?""))
  masavings=masalary-mainvest-mafood-marent-mamisc
  print(""Your salary is"",masalary)
  print(""Your food expenditure is"",mafood)
  print(""Your rent is"",marent)
  print(""your extra expenditures are"",mamisc)
  print(""your savings are"",masavings) 
  
  elif choice=='NO':
  masavings=masalary-mainvest
  print(""Your total savings for may are"",masavings)
  
  
  
 elif month=='JUNE':
  
  jusalary=float(input(""whats your salary of jun?""))
  juinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES': 
  
  jufood=float(input(""how much do you spend on food?""))
  jurent=float(input(""whats your monthly rent?""))
  jumisc=float(input(""whats else do you spend on?""))
  jusavings=jusalary-juinvest-jufood-jurent-jumisc
  print(""Your salary is"",jusalary)
  print(""Your food expenditure is"",jufood)
  print(""Your rent is"",jurent)
  print(""your extra expenditures are"",jumisc)
  print(""your savings are"",jusavings) 
  
  elif choice=='NO':
  jusavings=jusalary-juinvest
  print(""Your total savings for june are"",jusavings)
  
  
  
 elif month=='JULY':
  julsalary=float(input(""whats your salary of july?""))
  julinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES': 
  
  
  julfood=float(input(""how much do you spend on food?""))
  julrent=float(input(""whats your monthly rent?""))
  julmisc=float(input(""whats else do you spend on?""))
  julsavings=julsalary-julinvest-julfood-julrent-julmisc
  print(""Your salary is"",julsalary)
  print(""Your food expenditure is"",julfood)
  print(""Your rent is"",julrent)
  print(""your extra expenditures are"",julmisc)
  print(""your savings are"",julsavings) 
  
  
  elif choice=='NO':
  julsavings=julsalary-julinvest
  print(""Your total savings for jul are"",julsavings)
  
  
 elif month=='AUG': 
  
  augsalary=float(input(""whats your salary of august?""))
  auginvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES': 
  augfood=float(input(""how much do you spend on food?""))
  augrent=float(input(""whats your monthly rent?""))
  augmisc=float(input(""whats else do you spend on?""))
  augsavings=augsalary-auginvest-augfood-augrent-augmisc
  print(""Your salary is"",augsalary)
  print(""Your food expenditure is"",augfood)
  print(""Your rent is"",augrent)
   print(""your extra expenditures are"",augmisc)
  print(""your savings are"",augsavings) 
  
  elif choice=='NO':
  augsavings=augsalary-auginvest
  print(""Your total savings for august are"",augsavings) 
  
  
  
  
 elif month=='SEPT':
  sepsalary=float(input(""whats your salary of september?""))
  sepinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  if choice=='YES':
  sepfood=float(input(""how much do you spend on food?""))
  seprent=float(input(""whats your monthly rent?""))
  sepmisc=float(input(""whats else do you spend on?""))
  sepsavings=sepsalary-sepinvest-sepfood-seprent-sepmisc
  print(""Your salary is"",sepsalary)
  print(""Your food expenditure is"",sepfood)
  print(""Your rent is"",seprent)
  print(""your extra expenditures are"",sepmisc)
  print(""your savings are"",sepsavings) 
  
  elif choice=='NO':
  sepsavings=sepsalary-sepinvest
  print(""Your total savings for sept are"",sepsavings) 
  
  
  
  
  
 elif month=='OCT':
  octsalary=float(input(""whats your salary of october?""))
  octinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  
  
  if choice=='YES':
  octfood=float(input(""how much do you spend on food?""))
  octrent=float(input(""whats your monthly rent?""))
  octmisc=float(input(""whats else do you spend on?""))
  octsavings=octsalary-octinvest-octfood-octrent-octmisc
  print(""Your salary is"",octsalary)
  print(""Your food expenditure is"",octfood)
  print(""Your rent is"",octrent)
  print(""your extra expenditures are"",octmisc)
  print(""your savings are"",octsavings) 
  
  
  elif choice=='NO':
  octsavings=octsalary-octinvest
  print(""Your total savings for oct are"",octsavings) 
  
 elif month=='NOV':
  novsalary=float(input(""whats your salary of november?""))
  novinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  if choice=='YES':
  novfood=float(input(""how much do you spend on food?""))
  novrent=float(input(""whats your monthly rent?""))
  novmisc=float(input(""whats else do you spend on?""))
  novsavings=novsalary-novinvest-novfood-novrent-novmisc
  print(""Your salary is"",novsalary)
  print(""Your food expenditure is"",novfood)
  print(""Your rent is"",novrent)
  print(""your extra expenditures are"",novmisc)
  print(""your savings are"",novsavings) 
  
  elif choice=='NO':
  novsavings=novsalary-novinvest
  print(""Your total savings for november are"",novsavings) 
  
 elif month=='DEC': 
  
  decsalary=float(input(""whats your salary of december?""))
  decinvest=float(input(""whats your total investment for this month?""))
  
  choice=input(""Do you wish to continue entering other expenses?YES/NO"")
  if choice=='YES':
  decfood=float(input(""how much do you spend on food?""))
  decrent=float(input(""whats your monthly rent?""))
  decmisc=float(input(""whats else do you spend on?""))
  decsavings=decsalary-decinvest-decfood-decrent-decmisc
  print(""Your salary is"",decsalary)
  print(""Your food expenditure is"",decfood)
  print(""Your rent is"",decrent)
  print(""your extra expenditures are"",decmisc)
  print(""your savings are"",decsavings) 
  
  elif choice=='NO':
  decsavings=decsalary-decinvest
  print(""Your total savings for december are"",decsavings) 
  
  
  
 else:
  print(""INVALID INPUT"")"
"Write a pseudocode and python program to reverse a given number?
 
 INPUT:12345
 
 OUTPUT:54321",5,Easy,Loops,,ITP,Final Exam,"inputvariable=int(input(""Enter number: ""))
 Reverse=0
 while(inputvariable>0):
  dig=inputvariable%10
  Reverse=Reverse*10+dig
  inputvariable=inputvariable//10
 print(""Reverse of the number:"",Reverse)"
"Write a program to print the sum of squares of first 10 natural numbers using lambda, map and reduce?",17,Medium,Functions,,ITP,Mid Exam,"import functools as f
  
 list1=[x for x in range(1,11)]
 list2=list(map(lambda x: x*x ,list1))
 print(""Squares of natural nos: \n"",list2)
  
 sum=f.reduce(lambda x,y: x+y,list2)
 print(""Sum of squares of natural nos: \n"",sum)"
"Write a program to replace the last element in a list with another list?
 
 * list1 = [1, 3, 5, 7, 9, 10]
 
 * lilst2 = [20, 40, 60, 80]",17,Easy,Data containers,,ITP,Mid Exam,"l1 = [1, 3, 5, 7, 9, 10]
 l2 = [20, 40, 60, 80]
  
 l1[-1:] = l2
 print(""Output :\n"",l1)"
Write A pseudocode and python program to find the sum of the series: 1 + 1/2 + 1/3 + ….. + 1/N?,25,Easy,Loops,,ITP,Mid Exam,"n=int(input(""Enter the number of terms: ""))
 sum1=0
 for i in range(1,n+1):
  sum1=sum1+(1/i)
 print(""The sum of series is"",round(sum1,2))"
"Given below two list of integers are there. Create a third list by user defined function such that it should contain only odd numbers from the first list and even numbers from the second list? 
 
 * list1 = [10, 20, 23, 11, 17] 
 * list2 = [13, 43, 24, 36, 12]",5,Medium,Functions,Loops,ITP,Final Exam,"def mergeList(list1, list2):
  list3= []
  for num in list1:
  if(num % 2 != 0):
  list3.append(num)
  for num in list2:
  if(num % 2 == 0):
  list3.append(num)
  return list3
  
 print(""Merged List :"")
 list1 = [10, 20, 23, 11, 17] # retrieve odd nos
 list2 = [13, 43, 24, 36, 12] # retrieve even nos
  
 print(mergeList(list1, list2))"
Write a function to find the median of the given lists which are having odd and even count?,25,Easy,Functions,,ITP,Mid Exam,"def median(lst):
  lst.sort() # to order the list
  l = len(lst) # length of list
  if (l%2 != 0) : # odd count
  index = int(l/2) # or l//2 -returns quotient
  return lst[index] # list[indexvalue]
  else: # even count
  rt_of_mid = l//2
   lt_of_mid = rt_of_mid - 1
  return (lst[rt_of_mid] + lst[lt_of_mid]) / 2
  
  
  
  #call the function - odd count
 lst = [21,3,4,5,12] # odd count sorted - 3 4 5 12 21
 print(median(lst))
  
  
 # call the function - even count
 lst = [21,76,3,4,5,12] # even count sorted - 3 4 5 12 21 76
 print(median(lst))"
"Write a program which accepts range of numbers from the user and prints all the Armstrong numbers in that given interval? 
 
 Note : A number is called Armstrong number if it is equal to the sum of the cubes of its own digits.
 
 For example: 407 is an Armstrong number since 407 = 4*4*4 + 0*0*0 + 7*7*7
 
 Sample Output : Armstrong nos. in the given range (100,1000) - 153, 370, 371, 407",25,Medium,Loops,Conditional Statements,ITP,Mid Exam,"lower = int(input(""Enter lower range: ""))
 upper = int(input(""Enter upper range: ""))
  
 print (""The Armstrong nos. in the given range as follows : \n"")
 for num in range(lower, upper + 1):
  order = len(str(num)) 
  sum = 0
  # find the sum of the cube of each digit
  temp = num
  while temp > 0:
  digit = temp % 10
  sum += digit ** order
  temp //= 10
  if num == sum:
  print(num)"
"Write a Python program to check the validity of password input by users? 
 
 1. List item
 2. List item
 
 * At least 1 letter between [a-z] and 1 letter between [A-Z].
 
 * At least 1 number between [0-9].
 
 * At least 1 character from [$#@].
 
 * Minimum length 6 characters.
 
 * Maximum length 16 characters.",17,Medium,Loops,,ITP,Mid Exam,"import re
 p= input(""Input your password"")
 x = True
 while x: 
  if (len(p)<6 or len(p)>12):
  break
  elif not re.search(""[a-z]"",p):
  break
  elif not re.search(""[0-9]"",p):
  break
  elif not re.search(""[A-Z]"",p):
  break
  elif not re.search(""[$#@]"",p):
  break
  elif re.search(""\s"",p):
  break
  else:
  print(""Valid Password"")
  x=False
  break
  
 if x:
  print(""Not a Valid Password"")"
Write a program that accepts a string from the user and calculate the number of digits and letters present in the string?,17,Easy,Loops,Conditional Statements,ITP,Mid Exam,"str = input(""Enter a string : "")
 d=l=0
 for c in str:
  if c.isdigit():
  d=d+1
  elif c.isalpha():
  l=l+1
  else:
  continue
 print(""Count of Letters :"", l)
 print(""Count of Digits :"", d)"
"Python Program which will find all which are divisible by 3,between 4000 and 4200 ?
 
 The numbers obtained should be printed in a comma-separated sequence on a single line.",17,Easy,Loops,Conditional Statements,ITP,Mid Exam,"l=[]
 for i in range(4000, 4201):
  if (i%3==0):
  l.append(str(i))
  
 print(','.join(l))"
"Python program to create user input and given value the output is the factorial of a given numbers?
 
 Input:6
 
 Output:720",17,Easy,Functions,Conditional Statements,ITP,Mid Exam,"def fact(x):
  if x == 0:
  return 1
  return x * fact(x - 1)
 print(fact(int(input())))"
"Python program that accepts a comma separated sequence of words as input and after sorting them alphabetically.
 
 INPUT:bag,food,eat,pen,with,water
 
 OUTPUT:bag,eat,food,pen,water,with",5,Easy,Data containers,,ITP,Final Exam,"items=[x for x in input().split(',')]
 items.sort()
 print(','.join(items))"
"Python program that computes the value of X+XX+XXX+XXXX with a given digit as the value of a?
 
 INPUT:9
 
 OUTPUT:11106",5,Medium,Data Handling,,ITP,Final Exam,"a = input()
 n1 = int( ""%s"" % a )
 n2 = int( ""%s%s"" % (a,a) )
 n3 = int( ""%s%s%s"" % (a,a,a) )
 n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
 print(n1+n2+n3+n4)"
"Write a program to create a dictionary as follows ?
 
 Indented block
 
 OUTPUT: * {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225}",17,Easy,Loops,Data Handling,ITP,Mid Exam,"d=dict()
 for x in range(1,16):
  d[x]=x**2
 print(d)"
A create user input and check the year is leap year or not?,5,Medium,Conditional Statements,,ITP,Final Exam,"year = int(input(""Enter Year: ""))
  
 # Leap Year Check
 if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
  print(year, ""is a Leap Year"")
 elif year % 100 == 0:
  print(year, ""is not a Leap Year"")
 else:
  print(year, ""is not a Leap Year"")"
Program to accept three digits and print all possible combinations from the digits using for and if?,10,Medium,Loops,Conditional Statements,ITP,Final Exam,"a=int(input(""Enter first digit:""))
 b=int(input(""Enter second digit:""))
 c=int(input(""Enter third digit:""))
 d=[]
 d.append(a)
 d.append(b)
 d.append(c)
 for i in range(0,3):
  for j in range(0,3):
  for k in range(0,3):
  if(i!=j&j!=k&k!=i):
  print(d[i],d[j],d[k])"
Write a program to Check if a given number is a Palindrome or not?,5,Medium,Loops,Conditional Statements,ITP,Final Exam,"n=int(input(""Enter number: ""))
 temp=n
 rev=0
 while(n>0):
  dig=n%10
  rev=rev*10+dig
  n=n//10
 if(temp==rev):
  print(""The number is a palindrome!"")
 else:
  print(""The number isn't a palindrome!"")"
"Create Python Program for adding two binary numbers value?
 
 Note: input is decimal value 5 and decimal value 21 = sum of decimal value 26",17,Easy,Data Handling,Data Handling,ITP,Mid Exam,"# decimal value 5
 num1 = '00101'
 # decimal value 21
 num2 = '10101'
  
 # sum - decimal value 26
 sum = bin(int(num1,2) + int(num2,2))
 print(sum)"
"Write a code to concatenate firstname and lastname and display the output, (where both are of string datatype)?",17,Easy,Data Handling,Data Handling,ITP,Mid Exam,"firstname,lastname='Charles','Darwin'
  
 Name= firstname + lastname
 print('Name : ',Name)"
"Write a code to add “alpha”:26 to the existing dictionary. dic={'Eddy':13,'Maria':44,'Jas':21}",5,Easy,Data Handling,Data containers,ITP,Final Exam,"dic={'Eddy':13,'Maria':44,'Jas':21}
 dic.update({'alpha':26})
 dic"
"Python program suppose the following input=6 Then, the output should be: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}?",5,Easy,Data containers,Loops,ITP,Final Exam,"n=int(input())
 d=dict()
 for i in range(1,n+1):
  d[i]=i*i
  
 print(d)"
"Python program which generate a list and a tuple which contains every number.Suppose the following
 
 input = 23,56,76,12,87 Then, the output should be:
 
 ['23', '56', '76', '12', '87']
 
 ('23', '56', '76', '12', '87')",17,Easy,Data containers,Data containers,ITP,Mid Exam,"values=input()
 l=values.split("","")
 t=tuple(l)
 print(l) 
 print(t)"
"Write a code to print “Python” for multiples of three instead of the number, “Coding” for the multiples of five, “Python Coding” for multiples of both three and five (range is from 1 to 26).",25,Medium,Loops,Loops,ITP,Mid Exam,"for x in range(1,26):
  if x % 3 == 0 and x % 5 == 0:
  print(""Python Coding"")
  continue
  elif x % 3 == 0:
  print(""Python"")
  continue
  elif x % 5 == 0:
  print(""Coding"")
  continue
  print(x)"
Write a code to find the factors of 24?,10,Medium,Functions,,ITP,Final Exam,"def print_factors(x):
  print(""The factors of "",x,""are :"")
  for i in range(1,x+1):
  if x%i ==0:
  print(i)
 #call the fun
 print_factors(24)"
"Write a code to i) extract name elements alone, ii) multiply the number element by 6.07, iii) check whether the name element is carbon (use map). d=[{'name':'hydrogen','number':1,'weight':1.0},{'name':'carbon','number':2,'weight':4.002}]",10,Easy,Data containers,Data Handling,ITP,Final Exam,"d=[{'name':'hydrogen','number':1,'weight':1.0},{'name':'carbon','number':2,'weight':4.002}]
  
 print(list(map(lambda x:x['name'],d)))
 print(list(map(lambda x:x['number']*6.07,d)))
 print(list(map(lambda x:x['name']==""carbon"",d)))"
"Python program which accepts 4 digit binary numbers input = 0100,0011,1010,1001 it will check divisible by 5 or not?",10,Medium,Loops,Conditional Statements,ITP,Final Exam,"value = []
 items=[x for x in input().split(',')]
 for p in items:
  intp = int(p, 2)
  if not intp%5:
  value.append(p)
  
 print(','.join(value))"
"Write a Python Program to swap the first and last elements in the list?
 
 A. Get the input count of ""number of elements in a list""
 B. Get the input of the elements one by one and create a list
 C. Create a program to swap the first and last elements in the list
 D. Display the results of the list before and after",10,Medium,Loops,Data Handling,ITP,Final Exam,"a=[]
 n= int(input(""Enter the number of elements in list:""))
 for x in range(0,n):
  element=int(input(""Enter element"" + str(x+1) + "":""))
  a.append(element)
  print(""Actual list is:"")
  print(a)
 temp=a[0]
 a[0]=a[n-1]
 a[n-1]=temp
 print(""New list is:"")
 print(a)"
"Python program using the filter function print the even number: The list is: [1,2,3,4,5,6,7,8,9,10]?",17,Easy,Data containers,,ITP,Mid Exam,"List = [1,2,3,4,5,6,7,8,9,10]
 evenNumbers = list(filter(lambda x: x%2==0, List))
 evenNumbers"
"Python Program using the map() square the all elements in the given List= [1,2,3,4,5,6,7,8,9,10]?",17,Medium,Functions,,ITP,Mid Exam,"List1 = [1,2,3,4,5,6,7,8,9,10]
 squaredNumbers = list(map(lambda x: x**2, List1))
 print(squaredNumbers)"
"Python program using the map() and filter() square of even number in the Given List = [1,2,3,4,5,6,7,8,9,10]?",5,Medium,Functions,,ITP,Final Exam,"List2 = [1,2,3,4,5,6,7,8,9,10]
 evenNumbers = list(map(lambda x: x**2, filter(lambda x: x%2==0, List2)))
 evenNumbers"
Python Program to Generate a random float Between 15 and 85?,5,Easy,Data Handling,,ITP,Final Exam,"import random
 print(random.random()*100-15)"
Python program To Generate a random even number between 0 and 10 using list comprehension?,5,Medium,Loops,Data Handling,ITP,Final Exam,"import random
 print(random.choice([i for i in range(11) if i%2==0]))"
"Python program it will count and print each character Vs Numbers in a string = abcdefgabc
 
 OutPut:
 
 a,2
 c,2
 b,2
 e,1
 d,1
 g,1
 f,1",17,Easy,Data Handling,Loops,ITP,Mid Exam,"dic = {}
 s=input()
 for s in s:
  dic[s] = dic.get(s,0)+1
 print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))"
"Python Program With removing all duplicate and give the original order reserved in Given List = [12,6,4,7,4,7,67,88,99,355,7887,6,467,88,4,77,8]?",25,Medium,Functions,Data containers,ITP,Mid Exam,"def removeDuplicate( li ):
  newli=[]
  seen = set()
  for item in li:
  if item not in seen:
  seen.add( item )
  newli.append(item)
  
  return newli
  
 li=[12,6,4,7,4,7,67,88,99,355,7887,6,467,88,4,77,8]
 print(removeDuplicate(li))"
Python program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included)?,5,Medium,Functions,,ITP,Final Exam,"squaredNumbers = list(map(lambda x: x**2, range(1,21)))
 squaredNumbers"
"Python program to generate random number divisible by 4 and 7,  using random module and list comprehension?",5,Medium,Loops,Data Handling,ITP,Final Exam,"import random
 print(random.choice([i for i in range(201) if i%4==0 and i%7==0]))"
"Python program assert statements to verify that every number in the list [2,4,6,8,10] is even?",5,Medium,Loops,,ITP,Final Exam,"li = [2,4,6,8,10]
 for i in li:
   assert i%2==0
  print(i)"
Python program to randomly generate a list with 10 even numbers between 500 and 700 inclusive?,5,Medium,Data Handling,Loops,ITP,Final Exam,"import random
 print(random.sample([i for i in range(500,701) if i%2==0], 10))"
"With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half values in one line and the last half values in one line?",5,Easy,Data Handling,,ITP,Final Exam,"tp=(1,2,3,4,5,6,7,8,9,10)
 tp1=tp[:5]
 tp2=tp[5:]
 print(tp1)
 print(tp2)"
"Python program that accepts a sentence and calculate the number of upper case letters and lower case letters?
 
 Input : Hello world!
 Then, the output should be:
 UPPER CASE 1
 LOWER CASE 9",17,Medium,Loops,Conditional Statements,ITP,Mid Exam,"s = input()
 d={""UPPER CASE"":0, ""LOWER CASE"":0}
 for c in s:
  if c.isupper():
  d[""UPPER CASE""]+=1
  elif c.islower():
  d[""LOWER CASE""]+=1
  else:
  pass
 print(""UPPER CASE"", d[""UPPER CASE""])
 print(""LOWER CASE"", d[""LOWER CASE""])"
"Python program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only?
 
 Input: 2 cats and 3 dogs.
 output: ['2', '3']",5,Medium,Data Handling,,ITP,Final Exam,"import re
 s = input()
 print(re.findall(""\d+"",s))"
The temperature inside a room is 30 degrees Celsius. Write a program to display the output in Fahrenheit?,17,Easy,Data Handling,,ITP,Mid Exam,"celsius=int(input(""Enter the temperature in celcius:""))
 f=(celsius*1.8)+32
 print(""Temperature in farenheit is:"",f)"
Get a list of 10 numbers as an input from the user. Find the number of times a particular number is repeated. For example in the below list,25,Medium,Loops,,ITP,Mid Exam,"a=[]
 n=int(input(""Enter number of elements:""))
 for i in range(1,n+1):
  b=int(input(""Enter element:""))
  a.append(b)
 k=0
 num=int(input(""Enter the number to be counted:""))
 for j in a:
  if(j==num):
  k=k+1
 print(""Number of times"",num,""appears is"",k)"
The volume of a Spherical water tank with radius r is 4/3 π r^3. What is the volume of the tank with radius 6.95 Meters and 5.6 Meters?,25,Easy,Data Handling,,ITP,Mid Exam,"r = 6.95 # Radius can be a float here as well, but is not _necessary_.
 r1 = 5.6
 pi = 3.14159265359
 tank1 = 4.0/3.0*pi*r**3 # Using floats give the correct answer
 tank1
  
 tank2 = 4.0/3.0*pi*r1**3
 tank2"
"Given an array of ints, return True if 8 appears as either the first or last element in the array. The array should have a length 4 or more?",5,Medium,Functions,Conditional Statements,ITP,Final Exam,"def first_last(nums):
  if (nums[0] == 8) or (nums[len(nums)-1] == 8):
  return True
  else:
  return False
  
  
 nums=[2,4,3,6,8,9,3,8]
 first_last(nums)"
"We have two Sensors in a wind turbine, a and b, and the parameters a_sensor and b_sensor indicate if each has a signal. We are in trouble if they are both ON or if neither of them isOFF. Return True if we are in trouble.Test it using a_sensor as True and b_sensor as False",10,Easy,Functions,Conditional Statements,ITP,Final Exam,"def turbine_trouble(a_sendor, b_sensor):
  if((a_sensor and b_sensor) or ((not a_sensor) and (not b_sensor))):
  return True
  else:
  return False
  
  
 a_sensor=True
 b_sensor=False 
  
 turbine_trouble(a_sensor, b_sensor)"
"A . Create a list called dairy with four elements from the dairy section of Reliance fresh for example Milk , Paneer , Curd and Butter?(1 MARK)
 
 B . Print a string with the first and last elements of the dairy list.(1 MARK)
 
 C . Create a tuple for expiration date with three elements: the month, day, and year of the expiration on the carton of milk?(1 MARK)
 
 D .Print the values in the expiration tuple in a string that reads “This milk bottle will expire on 12/10/2020”.(2 MARK)
 
 E. Create an empty dictionary called milk_packets. Add the following key/value pairs. You can make up the values or use a real milk packet:(3 MARK)
 
 expiration_date — Set it to the milk_expiration tuple.
 Size — Set it to the size of the milk carton on which you are basing this.
 Cost — Set this to the cost of the carton of milk.
 brand_name — Set this to Nandini
 
 
 
 
 F. Show how to calculate the cost of 10 Packets of Nandini milk based on the cost of a packet?(1 MARK)
 
 G. Create a list called cheeses. List all of the cheeses you can think of. Append this list to the dairy Then remove the list of cheeses from the array.(2 MARK)",10,Medium,Data Handling,,ITP,Final Exam,"#### .A Create a list called dairy with four elements from the dairy section of Reliance fresh for example Milk , Paneer , Curd and Butter?(1 MARK)
  
  dairy = [""milk"", ""Paneer"", ""butter"", ""Curd""]
  
 #### .B Print a string with the first and last elements of the dairy list.(1 MARK)
  
  
 print(""First: %s and Last %s"" % (dairy[0], dairy[1]))
  
 #### .C Create a tuple for expiration date with three elements: the month, day, and year of the expiration on the carton of milk?(1 MARK)
  
 expiration = (12, 10, 2020)
  
 #### .D Print the values in the expiration tuple in a string that reads “This milk bottle will expire on 12/10/2020”.(2 MARK)
  
 print(""This milk will expire on %d/%d/%d"" % (expiration[0],expiration[1],expiration[2]))
  
 #### .E Create an empty dictionary called milk_packets. Add the following key/value pairs. You can make up the values or use a real milk packet:(1 MARK)
  
 expiration_date — Set it to the milk_expiration tuple.
  
 Size — Set it to the size of the milk carton on which you are basing this.
  
 Cost — Set this to the cost of the carton of milk.
  
 brand_name — Set this to Nandini
  
 milk_bottle = {}
 milk_bottle[""expiration_date""] = ""milk_expiration""
 milk_bottle[""Size""] = 32
 milk_bottle[""cost""] = 1.50
 milk_bottle[""brand_name""] = ""Nandini""
  
 #### .F Show how to calculate the cost of 10 Packets of Nandini milk based on the cost of a packet?(1 MARK)
  
 print(""The cost for 10 packets of milk is %.02f"" % (10* milk_bottle[""cost""]))
  
 #### .G Create a list called cheeses. List all of the cheeses you can think of. Append this list to the dairy Then remove the list of cheeses from the array.(1 MARK)
  
  
 cheeses = [""cheddar"", ""american"", ""mozzarella""]
 dairy.append(cheeses)
 dairy
  
  dairy.pop()"
"The e-commerce business vertical of Amazon – a multinational technology company based in Seattle, has determined that its annual profit is normally 33 percent of its total sales revenue. 
 Write a python program that takes the sales revenue as user input and returns the profit for Amazon. 
 Note: Use the value 0.33 to represent 33 percent
 
 Sample Input: 65436
 
 Sample Output: $21,593.88",5,Easy,Data Handling,,ITP,Final Exam,"ProjectedTotalSales = float(input(""Please enter the projected amount""+""of total sales""))
  
 profit = 0.33*ProjectedTotalSales
 print(""The Profit is $"" + format(profit,',.2f'))"
"The acre is a unit used to measure land in the imperial and US customary systems. One acre of land is equal to 43,560 square feet. Write a python program that accepts the measure of land in square feet and returns the measure in acres.
 
 Sample Input: 875687
 
 Sample Output: 20.10",5,Easy,Data Handling,,ITP,Final Exam,"One_Acre_of_LandSize = 43560
 UserTotal_SquareFeet = int(input(""Please enter the total amount""+""of square feet:""))
  
 Number_Of_Acres = (UserTotal_SquareFeet / One_Acre_of_LandSize)*1
 print(""Number of acres:""+ format(Number_Of_Acres,"".2f""))"
"James Deen is an investor specializing in the Technology Domain. James purchases stock in successful technology companies using a stockbroker and later sells them at a profit margin. As part of his investment portfolio, James purchased 2000 units of stock in Google LLC worth $80,000 ($40 apiece) in the month of November, 2019. The stockbroker charged 3% commission on the total purchase value of the stocks. A month later, James sells his entire stock holding in Google LLC for $42.75 apiece. He pays a commission of 3% on this transaction as well to his stockbroker. 
 
 Write a Python program that returns the following output: 
 
 1. The cost of purchasing the entire stock holding in Google LLC
 
 2. The amount of money paid in commission during the purchase 
 
 3. The selling price of the entire stock holding in Google LLC 
 
 4. The amount of money paid in commission during the sale 
 
 5. The profit margin made by James in the entire transaction (purchase & sale, including commissions paid)",10,Medium,Data Handling,,ITP,Final Exam,"Number_Of_Shares_Purchased = 2000
 amount_Paid_PerShare = 40.00
 amount_Paid_For_Stock = Number_Of_Shares_Purchased*amount_Paid_PerShare
 Commission_For_Buying = 0.03*amount_Paid_For_Stock
 Number_Of_Shares_Sold = 2000
 amount_Sold_PerShare = 42.75
 amount_Received_For_Share = Number_Of_Shares_Sold*amount_Sold_PerShare
 Commission_For_Selling = 0.03 * amount_Received_For_Share
 Profit = (amount_Received_For_Share - Commission_For_Selling)-(amount_Paid_For_Stock- Commission_For_Buying)
  
 print(""Amount paid for stock:$""+format(amount_Paid_For_Stock,"",.2f""),
  ""\nCommission for buying:$""+ format (Commission_For_Buying,"",.2f""),
  ""\nAmount Received for stock:$""+ format(amount_Received_For_Share,"",.2f""),
  ""\nCommission for selling:$""+ format(Commission_For_Selling,"",.2f""),
  ""\nProfit:$""+ format(Profit,"",.2f""))"
"Ernest Shackleton led the Nimrod Expedition to within 97 nautical miles of the pole for the first time in history on the 9th of January,1909. An additional interesting fact about the date is that when expressed in the format MM/DD/YY, Month times the Day equals the Year! 
 
 Write a Python program that prompts the user to input the following:
 
 1. Month of the Year in MM format (1-12, numeric format)
 
 2. Day of the Month in DD format (1-31, numeric format)
 
 3. Year in YY format (last 2 digits of the year, numeric format)
 
 
 The program should return “Magical Year!” if the Month times the Day equals the Year else “Non Magical Year”",10,Medium,Conditional Statements,,ITP,Final Exam,"UserMonth = int(input(""Please enter a month:""))
 UserDay = int(input(""Please enter a day:""))
 UserYear = int(input(""Please enter a three digit year:""))
  
 if UserMonth*UserDay == UserYear:
  print(""the date""+str(UserMonth)+""/""+str(UserDay)+
  ""/""+str(UserYear)+""Magical Year!"")
 else:
  print(""The date""+str(UserMonth)+""/""+str(UserDay)+""/""+str(UserYear)+""Non Magical Year"")"
"Write a program to find out, the number of times a writer has used ‘A’ as a word in his writing. (5 MARKS) 
 
 
 SAMPLE INPUT: Perhaps the best way to help a child explore, express, understand emotions, problems, problemsolving, habits, and much more is via stories. Be it a quick bedtime tale or a grandma fable, each stor y helps a child enter a completely different magical and imaginative world that has no boundaries. 
 
 
 
 SAMPLE OUTPUT: 5",5,Medium,Data Handling,,ITP,Final Exam,"import re
 A = input()
 import re 
 B1 = re.split("" a "",A)
 B2 = re.split(""A "",A)
 print(len(B1) + len(B2)-2)"
"In a Casino, there is a game in which a player needs to roll a dice 6 times. If the sum of the results of the surface of the dice is greater than 25 then a person wins otherwise he losses. Write a Program to evaluate the result. (10 MARKS) 
 
 
 SAMPLE INPUT:
 
 4,6,4,6,1,6 
 
 5,3,2,1,1,4
 
 SAMPLE OUTPUT
 
 Wins
 
 Loss",10,Hard,Data Handling,Loops,ITP,Final Exam,"int1 = input()
 import re
 A=re.split(',',int1)
 sum=0
 for i in range(len(A)):
  sum=sum+int(A[i])
  
 if sum > 25:
  print('Wins')
 else:
  print('Loss')"
"Read the dataset(matches.csv) and Answer below questions
 
 A. Display the no.of matches played in the dataset?
 B. What percentages of the match are won by the toss winners?
 C. Who won the final match and also which two teams reached the finals match?
 D. Create a data frame of the team that have won the match after winning the toss?
 E. What percentage of matches are won after selecting from the toss_decision as a field?",5,Medium,Pandas Manipulation,,NPV,Final Exam,"df=pd.read_csv(""matches.csv"")
 df=df[df['season']==2017] 
 df.head(2)
  
 #### A. Display the no.of matches played in the dataset?
  
 no_of_matches=df.shape[0]
 print(no_of_matches)
  
 #### B.What percentages of match are won by the toss winners?
  
  
 p=df[df['winner']==df['toss_winner']]
 q=(p.shape[0]/df.shape[0])*100
 q
  
 #### C.Who won the final match and also which two teams reached the finals match?
  
 last_match=df.tail(1)
 last_match['winner'] 
  
 last_match[['team1','team2']]
  
 #### D. Create a dataframe of the team who have won the match after winning toss?
  
 df=df[['toss_winner','toss_decision','winner']]
 equal=df[df['toss_winner']==df['winner']] 
 equal.head(2)
  
 #### E. What percentage of matches are won after selecting from the toss_decision as a field?
  
 ZERO=equal[df.toss_decision=='field'] #this will show the dataframe of the team who have won fielding first.
 ZERO.shape[0]
  
 #28 is the number of matches won fielding first
 games_won_field_first=(ZERO.shape[0]/df.shape[0])*100
  
 games_won_field_first"
"Read the dataset(911.csv) and Answer below questions
 
 A. Find the Topmost zipcodes and townships (twp) for 911 calls?
 B. There are EMS, Fire, and TrafficMake you need to separate column to create a new column called ""Reason"" and understand our data more?
 C. What is the most common reason for a 911 call?
 D. Change the timeStamp from strings to DateTime objects and also grab specific attributes(For example Hour, Month and Day of the Week) from a DateTime object.
 E. Restructure the data frame so that the columns become the Hours and the Index becomes the Day of the Week?",5,Hard,Pandas Manipulation,,NPV,Final Exam,"df= pd.read_csv('911.csv')
 df.head(2)
  
 #### A. Find the Top 1 zipcodes and townships (twp) for 911 calls?
  
 df['zip'].value_counts().head(1)
  
 df['twp'].value_counts().head(1)
  
 #### B. There are EMS, Fire, and TrafficMake you need to separate column to create a new column called ""Reason"" and understand our data more?
  
 df['Reason']= df['title'].apply(lambda x:x.split(':')[0])
 df.Reason
  
  
 #### C. What are the most common Reason for a 911 call ?
  
 df['Reason'].value_counts()
  
 #### D.Change the timeStamp from strings to DateTime objects and also grab specific attributes(For example: Hour, Month and Day of the Week) from a Datetime object.
  
 df['timeStamp'] = pd.to_datetime(df['timeStamp'])
  
 df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)
 df['Month'] = df['timeStamp'].apply(lambda time: time.month)
 df['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)
  
 #### E. Restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week?
  
 dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()
 dayHour.head(2)"
"Read the dataset(Ecommerce_Purchases.csv) and Answer below questions?
 
 A. What were the highest and lowest purchase prices?
 
 B. How many people have English 'en' as their Language of choice on the website?
 
 C. How many people have the job title of ""Lawyer"" ?
 
 D. How many people made the purchase during the AM and how many people made the purchase during PM ?
 
 E. Someone made a purchase that came from Lot: ""90 WT"" , what was the Purchase Price for this transaction?",5,Medium,Pandas Manipulation,,NPV,Final Exam,"ecom = pd.read_csv('Ecommerce_Purchases.csv')
  
 #### A. What were the highest and lowest purchase prices?
  
 # Highest
 ecom['Purchase Price'].max()
  
 # Lowest
 ecom['Purchase Price'].min()
  
 #### B. How many people have English 'en' as their Language of choice on the website?
  
 ecom[ecom['Language']=='en'].count()
  
 #### C. How many people have the job title of ""Lawyer"" ?
  
 ecom[ecom['Job']=='Lawyer'].count()
  
 #### D. How many people made the purchase during the AM and how many people made the purchase during PM ?
  
 ecom['AM or PM'].value_counts()
  
 #### E. Someone made a purchase that came from Lot: ""90 WT"" , what was the Purchase Price for this transaction?
  
 ecom[ecom['Lot']==""90 WT""]['Purchase Price']"
"Read the dataset(2010_Report_to_Congress_on_White_House_Staff.csv) and Answer the below questions?
 
 A. Find the salary of an employee in a (1st-row 2nd-column) using a position based indexing function?
 
 B. Display all the employees whose salary is greater than 50000?
 
 C. Display all the rows whose salary is greater than 50000 and position as ""ANALYST""?
 
 D. Find the list of Employee details belonging to a position ('ANALYST','ADVISOR')?
 
 E. Find the top 10 highest-paid employees in each position?",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"data=pd.read_csv('2010_Report_to_Congress_on_White_House_Staff.csv')
 data.head()
  
 #### A. Find the salary of an employee in a 1st-row 2nd column using a position based indexing function?
  
 data.iloc[1,2]
  
 #### B. Display all the employees whose salary is greater than 50000?
  
 data.Salary>50000
 transformed_df=data[data.Salary>50000]
 transformed_df.head(2)
  
 #### C. Display all the rows whose salary is greater than 50000 and position as ""ANALYST""?
  
 transformed_df2=data[(data.Salary>50000) & (data['Position Title'] == 'ANALYST')]
 transformed_df2
  
 #### D. Find the list of Employee details belonging to a position ('ANALYST','ADVISOR')?
  
 transformed_df3=data[data['Position Title'].isin(['ANALYST','ADVISOR'])]
 transformed_df3
  
 #### E. Find the top 10 highest-paid employees in each position?
  
 df_bypositiontitle=data.groupby('Position Title')
 df_bypositiontitle[['Employee Name','Salary']].max().head(10)"
"Read the dataset(Ecommerce_Purchases.csv) and Answer below questions?
 
 A. Find the email ID of the person with the following Credit Card Number: 4926535242672853(1 marks)
 
 B. Find how many people having American Express as their Credit Card Provider and made a purchase above $95 ?(2 marks)
 
 C. How many people have a credit card that expires in 2025?(1 marks)
 
 D. What are the top 5 most popular email providers/hosts (e.g. gmail.com, yahoo.com, etc...)(1 mark)",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"ecom = pd.read_csv('Ecommerce_Purchases.csv')
  
 #### A. Find the email ID of the person with the following Credit Card Number: 4926535242672853(1 marks)
  
 ecom[ecom['Credit Card']==4926535242672853]['Email']
  
 #### B. Find how many people having American Express as their Credit Card Provider and made a purchase above $95 ?(2 marks)
  
 ecom[(ecom['CC Provider']=='American Express') & (ecom['Purchase Price']>95)].count()
  
 #### C. How many people have a credit card that expires in 2025?(1 marks)
  
 # lets grab the first item 
 ecom['CC Exp Date'].iloc[0]
  
 # as we noticed that it's a string, so the items from index 3 to onwards will be the year
 ecom['CC Exp Date'].iloc[0][3:]
  
 # now we can use a lambda function and solve it
 ecom['CC Exp Date'].apply(lambda x: x[3:]=='25').head(10)
  
 # finally sum all True values
 sum(ecom['CC Exp Date'].apply(lambda x: x[3:]=='25'))
  
 #### D. What are the top 5 most popular email providers/hosts (e.g. gmail.com, yahoo.com, etc...)(1 mark)
  
 # lets grab the first item, we noticed that it is a string. 
 ecom['Email'].iloc[0]
  
 # use a split method to get the domain name
 ecom['Email'].iloc[0].split('@')[1]
  
 # apply lambda function to solve it
 ecom['Email'].apply( lambda x: x.split('@')[1]).value_counts().head()"
"Read the dataset(chipotle.tsv.txt)
 
 A. Select only the products with quantity equals to 1. (1 marks)
 
 B. Count the item_price is greater than 10(1 mark)
 
 C. Find How many times Veggie Salad Bowl ordered? (1 mark)
 
 D. Find the quantity of the most expensive item ordered? (2 mark)",5,Easy,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"chipo = pd.read_csv(""chipotle.tsv.txt"", sep = '\t')
 chipo.head(2)
  
 #### A. Select only the products with quantity equals to 1. (1 marks)
  
 prices = [float(value[1 : -1]) for value in chipo.item_price]
  
 # reassign the column with the cleaned prices
 chipo.item_price = prices
  
 chipo_filtered = chipo.drop_duplicates(['item_name','quantity'])
  
 chipo_one_prod = chipo_filtered[chipo_filtered.quantity == 1]
 chipo_one_prod.head()
  
 #### B count the item_price is greater then 10(1 mark)
  
  
 chipo_one_prod[chipo_one_prod['item_price']>10].item_name.nunique()
  
 #### C find How many times Veggie Salad Bowl ordered?(1 mark)
  
 chipo_salad = chipo[chipo.item_name == ""Veggie Salad Bowl""]
  
 len(chipo_salad)
  
 #### D. find the quantity of the most expensive item ordered?(2 mark)
  
 chipo.sort_values(by = ""item_price"", ascending = False).head(1)"
"Read the dataset(Euro_2012_stats_TEAM.CSV)
 
 A. How many teams participated in the Euro2012 dataset. (1 mark)
 
 B. Create a data frame with a name ""discipline"" consisting of (Team, Yellow Cards and Red Cards) (1 mark)
 
 C. Find average Yellow Cards given per Team (1 mark)
 
 D. Find which teams scored more than 6 goals(1 mark)
 
 E. Display the teams start with "" G ""(1 mark)",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"euro12 = pd.read_csv('Euro_2012_stats_TEAM.csv', sep=',')
 euro12.head(2)
  
 #### A. How many teams participated in the Euro2012 dataset. (1 mark)
  
  
 euro12.shape[0]
  
 #### B. Create a data frame with a name ""discipline"" consisting of (Team, Yellow Cards and Red Cards) .(1 mark)
  
  
 discipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]
 discipline
  
 #### C. Find average Yellow Cards given per Team? (1 mark)
  
 round(discipline['Yellow Cards'].mean())
  
 #### D. Find which teams scored more than 6 goals(1 mark)
  
  
 euro12[euro12.Goals > 6]
  
 #### E. Display the teams start with G (1 mark)
  
  
 euro12[euro12.Team.str.startswith('G')]"
"Read the dataset ( hotdog.txt )
 
 A. Give Column names as Type, Calories, Sodium? (1 Mark)
 
 B. Find out average Calories and average Sodium vales for each Hotdog type (1 Mark)
 
 C. Find out rows having Calories less than 120 and Sodium values greater than 300 (1 Marks)
 
 D. Create Column Grade having values 'A' and 'B' as follows:(2 Marks)
 
 Grade A: Items having Calorie value less than 150 and Sodium value less than 400
 
 Grade B: Otherwise",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"#### A. Give Column names as Type, Calories, Sodium? (1 Mark)
  
 hotdogs=pd.read_table('hotdogs.txt',sep='\t',names=['Type','Calories','Sodium'])
 hotdogs.head()
  
 #### B. Find out average Calories and average Sodium vales for each Hotdog type (1 Mark)
  
 hotdog_gr=hotdogs.groupby(['Type']).mean()
 hotdog_gr
  
 #### C. Find out rows having Calories less than 120 and Sodium values greater than 300 (1 Marks)
  
 hotdogs[ ( hotdogs['Calories']< 120) & (hotdogs['Sodium'] > 300 )]
  
 #### D. Create Column Grade having values 'A' and 'B' as follows: 
 <br> Grade A : Items having Calorie value less than 150 and Sodium value less than 400 
 <br> Grade B: Otherwise
  
 def fun(x):
  if (x.Calories < 150) & (x.Sodium < 400):
  return 'A'
  else:
  return 'B'
  
 hotdogs['Grade'] = hotdogs.apply(fun,axis=1)
 hotdogs.head(10)"
"Read the dataset(Match.csv) and Answer below questions
 
 A. Display the no. of matches played in each Season?
 
 B. Display the percentage of matches won by runs?
 
 C. What percentages of matches are won by the toss winners who chose to bat first?
 
 D. How many matches are hosted at South Africa?
 
 E. Print the Id of the team which won Season 2.",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"df=pd.read_csv(""Match.csv"")
 df.head(2)
  
 #### A. Display the no. of matches played in each Season?
  
 df_season= df.groupby('Season_Id')
 print(df_season['Match_Id'].count())
 print (type(df_season['Match_Id'].count()))
  
 #### B. Display the percentage of matches won by runs?
  
 df[df['Win_Type']=='by runs'].shape[0]/df.shape[0] *100
  
 #### C. What percentages of matches are won by the toss winners who chose to bat first?
  
 p=df[(df['Match_Winner_Id']==df['Toss_Winner_Id'] ) & (df['Toss_Decision'] == 'bat') ]
  
 q= df[(df['Match_Winner_Id']==df['Toss_Winner_Id'] ) & (df['Toss_Decision'] == 'field')]
  
 ans= p.shape[0]/q.shape[0] *100
 ans
  
 #q=(p.shape[0]/df.shape[0])*100
 #q
  
 #### D. How many matches are hosted at South Africa?
  
 sum(df['Host_Country']=='South Africa')
  
 #### E. Print the Id of the team which won Season 2.
  
 df_season2= df[df['Season_Id'] == 2]
 winner= df_season2.tail(1)
 int(winner['Match_Winner_Id'])"
Create a Numpy array of size 20 elements using random package. Convert the above numpy array into 2 equal arrays of size 2x5 each. Convert the second array to a 1-D array and reverse the elements.And find the 4th element in the reversed array.(5 Marks),5,Easy,Numpy-Array,Numpy-Indexing & Slicing,NPV,Final Exam,"x=np.random.randint(10, size=(4, 5))
 x
  
 arr1,arr2=np.split(x,2)
  
 flat_arr2= arr2.flatten()
 print(flat_arr2)
 rev_arr=flat_arr2[::-1]
 print(rev_arr)
  
 rev_arr[3]"
"Write a Program
 
 A. Create a Series with words 'hello how are you'. as the contents. (1marks)
 
 B. Convert the first letter of every element in series to uppercase. (1marks)
 
 C. Find the length of each element in the series. And find the lengthiest word in the series. (3marks)",5,Hard,Numpy-Array,Numpy-Indexing & Slicing,NPV,Final Exam,"#### A. Create a Series with words 'hello how are you'. as the contents.(1marks)
  
 ser = pd.Series(['hello', 'how', 'are', 'you?'])
  
 #### B. Convert the first letter of every element in series to uppercase.(1marks)
  
 ser.map(lambda x: x[0].upper() + x[1:])
  
 #### C.Find the length of each element in the series. And find the lengthiest word in the series.(3marks)
  
 print(ser.map(lambda x: len(x)))
  
 ser[ser.map(lambda y: len(y) == ser.map(lambda x: len(x)).max())]"
"Read the given Dataset( UK_Flight_2018.csv)
 
 A. Find the number of rows and columns present in it. (1 Marks)
 
 B. Identify the airline names flying in the UK. (1 Marks)
 
 C. Find the list of flights that origin from Vietnam. (1 Marks)
 
 D. Find the number of airlines under each reporting airport. (1 Marks)
 
 E. Find the number of flights that origin from Los Angeles and reporting at Heathrow Airport. (1 Marks)",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"#### A. Find the number of rows and columns present in it. (1 Marks)
  
 uk=pd.read_csv('UK_Flight_2018.csv')
 uk.shape
  
 #### B. Identify the airline names flying in UK. (1 Marks)
  
 uk['airline_name'].unique()
  
 #### C. Find the list of flights that origin from vietnam. (1 Marks)
  
 uk[uk['origin_destination_country']=='VIETNAM']
  
 #### D.Find the number of airlines under each reporting airport. (1 Marks)
  
 uk.groupby(['reporting_airport'])['airline_name'].nunique()
  
 #### E Find the number of flights that origin from Los Angeles and report at Heathrow Airport. (1 Marks)
  
 uk[((uk['reporting_airport']=='HEATHROW') & (uk['origin_destination']=='LOS ANGELES INTERNATIONAL'))]['number_flights_matched'].sum()"
"Continue with the 12 questions Dataset( UK_Flight_2018.csv)
 
 A. Find the total number of flights matched, unmatched and canceled. (1 Marks)
 
 B. For flights originating from the USA and find the average delay in minutes for every airline. (1 Marks)
 
 C. Find the list of airlines whose flights are delayed for more than an hour for at least 10% of the time. Calculate the total percentage collectively as the average of all the delay percentages for 60 minutes till 360 minutes. (3 Marks)",5,Hard,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"#### A. Find the total number of matched, unmatched and cancelled flights. (1 Marks)
  
 uk[['number_flights_matched','actual_flights_unmatched','number_flights_cancelled']].sum()
  
 #### B. Find the average delay in minutes for every airline considering all the flights that are originating from USA. (1 Marks)
  
 uk[uk['origin_destination_country']=='USA'].groupby('airline_name')['average_delay_mins'].mean()
  
 #### C. Find the list of airlines whose flights are delayed for more than an hour for at least 10% of the time.
  Calculate the total percentage collectively as the average of all the delay percentages for 60 minutes till 360 minutes.(3 Marks)
  
 total_delay_percent=uk[['flights_between_61_and_120_minutes_late_percent',
  'flights_between_121_and_180_minutes_late_percent',
  'flights_between_181_and_360_minutes_late_percent',
  'flights_more_than_360_minutes_late_percent']].mean(axis=1)
 total_delay_percent
  
 uk['total_delay_percent']=total_delay_percent
  
 uk[uk['total_delay_percent']>=10]['airline_name'].unique()"
"Write a Program
 
 A. Create a 5x5 array with random values and find the minimum and maximum values
 
 B. Add a padding (filled with 0's) around random array of size 5*5 created in Question number 'A' (1 Mark)
 
 C. Create a zero matrix of size 5x5 and add values 1,2,3,4,5 as diagonal values of that matrix (1 Mark)
 
 D. Given a 1D array (1-20), negate all elements which are between 11 and 18 (Both included), in place. (2 Marks)",5,Hard,Numpy-Array,,NPV,Final Exam,"#### A. Create a 5x5 array with random integer values between 10 to 50 and find the minimum and maximum values (1 Marks)
  
 Z = np.random.randint(10,50,size=(5,5))
 Zmin, Zmax = Z.min(), Z.max()
 print(Zmin, Zmax)
  
 #### B. Add a padding (filled with 0's) around random array of size 5*5 created in Question number 'A'? (1 Marks)
  
 Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)
 print(Z)
  
 #### C. Create a zero matrix of size 5x5 and add values 1,2,3,4,5 as diagonal values of that matrix (1 Marks)
  
 Z= np.zeros((5,5),dtype='int')
 Z = np.diag([1,2,3,4,5])
 print(Z)
  
 #### D. Given a 1D array (1-20), negate all elements which are between 11 and 18 (Both included), in place. (2 Marks)
  
 Z = np.arange(1,21)
 Z[(11 <= Z) & (Z <= 18)] *= -1
 print(Z)"
"Read the dataset(YOUTUBE.csv) and Answer below questions?
 
 Note: names = ['v_id', 'v_uploader', 'v_interval', 'v_category', 'v_length', 'views_count', 'v_rating', 'no_ratings_given',
 'comments_count','v_ids_related','v_ids_related_1','v_ids_related_2','v_ids_related_3','v_ids_related_4',
 'v_ids_related_5','v_ids_related_6','v_ids_related_7','v_ids_related_8','v_ids_related_9','v_ids_related_10',
 'v_ids_related_11','v_ids_related_12','v_ids_related_13','v_ids_related_14']
 
 A.Find out the top 5 categories with a maximum number of videos uploaded and also find out the top 10 rated videos? (5 MARKS)
 
 B. Find out the 10 most viewed videos and also find the top 5 which video having the most of comments and count?(5 MARKS)",10,Medium,Pandas Manipulation,,NPV,Final Exam,"youtube = pd.read_csv(""youtube.csv"", names = ['v_id', 'v_uploader', 'v_interval', 'v_category', 'v_length', 'views_count', 'v_rating', 'no_ratings_given', 'comments_count', 'v_ids_related','v_ids_related_1','v_ids_related_2','v_ids_related_3','v_ids_related_4','v_ids_related_5','v_ids_related_6','v_ids_related_7','v_ids_related_8','v_ids_related_9','v_ids_related_10','v_ids_related_11','v_ids_related_12','v_ids_related_13','v_ids_related_14'], delimiter = '\t', header = None)
 youtube.head()
  
 #### A.Find out the top 5 categories with maximum number of videos uploaded and also find out the top 10 rated videos ?
  
 categories = youtube.v_category.value_counts()
 categories.head()
  
 rated_video = youtube.no_ratings_given.sort_values(ascending = False)
 rated_video.head(10)
  
 top_rated = youtube.sort_values(['no_ratings_given'], ascending= False)
 top_rated.head(10)
  
 #### B. Find out the 10 most viewed videos and also find the top 5 which video having the most of comments and count?
  
 top_viewed = youtube.sort_values(['views_count'], ascending= False)
 top_viewed.head(10)
  
 top_commentcount = youtube.sort_values(['comments_count'], ascending= False)
 top_commentcount.head(5)"
"Read data set(2017.csv)
 
 A. Find the top 10 most generous countries and find top 10 countries with trust in government? (7 MARKS)
 
 B. Find the top 10 Countries in Family Satisfaction and also find top 10 Countries with Best Economy? (5 MARKS)
 
 C. Find the top 10 Most Freedom Oriented Countries and also Find top 10 Happiest Countries? (5 MARKS)",17,Medium,Pandas Manipulation,,NPV,Mid Exam,"data_2017 = pd.read_csv('2017.csv')
 data_2017.head(2)
  
  
 ### A. Find the top 10 most generous countries and find top 10 countries with trust in government?
  
 data_2017[['Country', 'Generosity']].sort_values(by = 'Generosity',
  ascending = False).head(10)
  
 data_2017[['Country', 'Trust..Government.Corruption.']].sort_values(by = 'Trust..Government.Corruption.',
   ascending = False).head(10)
  
 #### B. Find top 10 Countries in Family Satisfaction and also find top 10 Countries with Best Economy?
  
  
 data_2017[['Country', 'Family']].sort_values(by = 'Family', ascending = False).head(10)
  
 data_2017[['Country', 'Economy..GDP.per.Capita.']].sort_values(by = 'Economy..GDP.per.Capita.',
  ascending = False).head(10)
  
 ### C. Find top 10 Most Freedom Oriented Countries and also Find top 10 Happiest Countries?
  
 data_2017[['Country', 'Freedom']].sort_values(by = 'Freedom', ascending = False).head(10)
  
 data_2017[['Country','Happiness.Rank']].head(10)"
"Read the dataset(who_suicide_statistics.CSV)
 
 Looking at the data, you can observe long-time trends and differences between countries, as well as within countries across a few demographic groups - in both cases you will see that these differences may be very large.
 
 A. Create an age group like below and based on age group give me the count of suicides? (4 MARK)
 
 '5-14 years':0,
 
 '15-24 years':1,
 
 '25-34 years':2,
 
 '35-54 years':3,
 
 '55-74 years':4,
 
 '75+ years':5
 
 B. Total no of Suicides based on gender( male and female)(2 marks)
 
 C. Find the suicide of top most 10 countries? (1 marks)
 
 D. Find the total no of suicides each year in descending order? (2 marks)
 
 E. Find the number of suicides based on year and age? (1 marks)",10,Hard,Pandas Manipulation,,NPV,Final Exam,"suicide_analysis = pd.read_csv(""who_suicide_statistics.csv"")
 suicide_analysis.head(2)
  
 suicide_analysis.suicides_no.fillna(0,inplace=True)
  
 #### A. Create an age group like below and based on age group give me the count of suicides? (4 MARK)
  
 age_coder = {'5-14 years':0,
  '15-24 years':1,
  '25-34 years':2,
  '35-54 years':3,
  '55-74 years':4,
   '75+ years':5}
 gender_coder = {'female':0,'male':1}
  
 suicide_analysis['age_encoder'] = suicide_analysis['age'].map(age_coder)
 suicide_analysis['sex_encoder'] = suicide_analysis['sex'].map(gender_coder)
  
 suicide = suicide_analysis.groupby('age_encoder')[['suicides_no']].sum()
 suicide
  
 #### B. Total no of Suicides based on gender( male and female)(2 marks)
  
 male_suicide = suicide_analysis[suicide_analysis.sex_encoder == 0]['suicides_no'].values.sum()
 female_suicide = suicide_analysis[suicide_analysis.sex_encoder == 1]['suicides_no'].values.sum()
  
 age_differance = pd.DataFrame([male_suicide,female_suicide],index=['male','female'])
 age_differance.head()
  
 #### C. Find the suicide of top most 10 countries? (1 marks)
  
 suicide_analysis.groupby('country').sum().sort_values(by='suicides_no',ascending=False)[['suicides_no']][:10]
  
 #### D. Find the total no of suicides each year in descending order? (2 marks)
  
  
 suicide_analysis.groupby(""year"").sum().sort_values(by='suicides_no',ascending=False)[['suicides_no']][:10]
  
 #### E. Find the number of suicides based on year and age? (1 marks)
  
 suicide_data = suicide_analysis.groupby(['year','age']).sum()['suicides_no'].reset_index()
  
 suicide_country_age = suicide_analysis.groupby(['country','age']).sum()['suicides_no'].reset_index()
 suicide_country_age.head()"
"Read the dataset (stock_data.csv)
 
 A. Give column names as timestamp, AA, AAPL, GE, IBM, JNJ, MSFT, PEP, SPX, XOM. List all the columns of the dataset, Identify the numerical, categorical columns. (4 Marks)
 
 B. Convert the column timestamp into python datetime object (1 Marks)
 
 C. Find Average value of stock AAPL in the year 2010 (5 Marks)",10,Easy,Pandas Manipulation,,NPV,Final Exam,"#### A. Give colum names as `timestamp`, `AA`,`AAPL`,`GE`,`IBM`,`JNJ`,`MSFT`,`PEP`,`SPX`,`XOM` . List all the columns of dataset, Identify the numerical, categorical columns.(4 Marks)
  
 stocks=pd.read_csv('stock_data.csv', parse_dates=True)
 stocks.rename( columns={'Unnamed: 0':'timestamp'}, inplace=True )
 stocks.head(2)
  
 stocks.columns
  
 #### B. Convert the column `timestamp` into python datetime object (1 Marks)
  
 stocks['timestamp']=pd.to_datetime(stocks['timestamp'])
  
  
 stocks.info()
  
 #### C. Find Average value of stock `AAPL` in year 2010 (5 Marks)
  
 stocks_year=stocks.groupby(stocks.timestamp.dt.year)
 yearwise_mean=stocks_year.mean()
 #print(yearwise_mean)
 yearwise_mean.loc[2010]['AAPL']"
"Read the Dataset (Ramen-ratings.CSV)
 
 A. Identify the number of columns and rows. (1 Marks)
 
 B. Identify for how many brands the data is captured. (1 Marks)
 
 C. Identify for how many rows the data for column Top Ten exists? (1 Marks)
 
 D. Display the data of bowl noodles for countries China and Taiwan. (3 Marks)
 
 E. Store the result in a data frame. Using the data frame find the brands that have ranking more than 4. (1 Marks) F. For Every Country and Style of noodle find the average Stars. Order them by stars highest to lowest. (3 Marks)
 
 G. Write a function to return the year in numbers or null if there is no value for Top Ten column. Use this value to create a new column Top_Year. (5 Marks)
 
 Add the column to the dataset. ( Marks)",10,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"ramen=pd.read_csv('ramen-ratings.csv')
 ramen.head()
  
 ramen.shape
  
 The dataset has 2580 rows and 7 columns.
  
 ramen['Brand'].nunique()
  
 ramen['Brand'].unique()
  
 ramen[ramen['Top Ten'].isnull()==False]['Top Ten']
  
 ramen[ramen['Top Ten'].isnull()==False]['Top Ten'].count()
  
 #### D. Display the data of bowl noodles for countries China and Taiwan. (3 Marks) 
  
 #### E. Store the result in a data frame. Using the data frame find the brands that have ranking more than 4.(1 Marks) 
  
 china_taiwan=ramen[((ramen['Country']=='China') | (ramen['Country']=='Taiwan'))&(ramen['Style']=='Bowl')]
 china_taiwan
  
 china_taiwan[china_taiwan['Stars']>4.0]['Brand'].unique()
  
 #### F. For Every Country and Style of noodles find the average Stars. Order the stars from highest to lowest.(3 Marks)
  
 x=ramen[['Country','Style','Stars']]
 x.groupby(['Country','Style'])['Stars'].mean().sort_values( ascending=False)
  
  
 #### G. Write a function to return the year in numbers or null if there is no value for Top Ten column.
 ####Use this value to create a new column Top_Year.(5 Marks) and Add the column to the dataset.( Marks)
  
 ramen[ramen['Top Ten'].isnull()==False][['Brand','Top Ten']]
  
 def find_year(x):
  if x.split('#')[0]:
  return x.split('#')[0]
  else:
  return null
  
 y=ramen['Top Ten'].apply(lambda x: find_year(str(x)))
 y
  
 ramen['Top_year']=y
 ramen.head()"
"Read the datasets
 
 airport-codes.csv - airport-codes.csv - this file contains metadata for all airports in the world.
 
 us_air_transport_stats.csv - this file contains the stats like number of passengers, amount of freight etc. for each airport origin and destination and each airline carrier.
 
 Problem statement
 Exercise:1 You have to create a table that compares the number of passengers flown by each major airline out of each large airports in the US. Our final table should have one row for each airport, and one column for each carrier. We will eventually limit the number of columns by selecting only the large carriers.(Hint: Joins and pivot tables) (10 MARKS)
 
 Exercise:2 Find the passenger count and freight load for each route among the large airports in the US.(5 MARKS)
 
 Exercise:3Find the busiest routes for passengers and freights in the US.(5 MARKS)",15,Medium,Pandas Manipulation,Numpy-Array,NPV,Final Exam,"codes_df = pd.read_csv('airport-codes.csv')
 stats_df = pd.read_csv('us_air_transport_stats.csv')
 stats_df.head(10)
  
 codes_df['type'].unique()
  
 <span style=""font-family: Arial; font-weight:bold;font-size:1.5em;color:#16850c;"">Exercise:1 You have to create a table that compares the number of passengers flown by each major airline out of each large airports in the US. Our final table should have one row for each airport, and one column for each carrier. We will eventually limit the number of columns by selecting only the large carriers.
  
  
 #### step1:Identify all large airports in the US from airport codes dataframe.
  
 large_airports_df = codes_df[(codes_df['type'] == 'large_airport') & (codes_df['iso_country'] == 'US')][['iso_region', 'name', 'municipality', 'local_code']]
 large_airports_df.head(10)
  
 #### step2:Inner join the stats df with the dataframe containing only the large airports.
  
 large_airport_stats_df = pd.merge(stats_df, large_airports_df, left_on='ORIGIN', right_on='local_code', how='inner')
 large_airport_stats_df.head(2)
  
 large_airport_stats_df['ORIGIN'].nunique()
  
 #### Step3:Pivot on the origin airport code to get the stats for each airline in different columns.
  
 pivot_df = pd.pivot_table(large_airport_stats_df, 
  index=['ORIGIN', 'iso_region', 'name', 'municipality'], 
  columns=['CARRIER_NAME'], 
  values='PASSENGERS', 
  aggfunc=sum,
  fill_value=0)
 pivot_df.head(2)
  
 len(pivot_df.columns)
  
 #### Step4:Filter only large airlines.
  
 imp_airlines = pivot_df.columns[pivot_df.apply(lambda x: sum(x) > 10 * 1000000, axis=0)]
 imp_airlines
  
 #### Step5: Output table for Exercise:1
  
 airlines_compare_df = pivot_df[imp_airlines]
 airlines_compare_df.head(2)
  
 <span style=""font-family: Arial; font-weight:bold;font-size:1.5em;color:#16850c;"">Exercise:2 Find the passenger count and freight load for each route among the large airports in the US.
  
  
 #### Step 1: We want to look at routes among the large airports of US. The dataframe that we used for our last problem, `large_airport_stats_df` has only the large airports in the `ORIGIN` column, but every single airport present in the `DEST` column. We need to do another join with the `large_airports_df` to truncate the number of destination airports.
  
 large_route_stats = pd.merge(large_airport_stats_df, large_airports_df, left_on='DEST', right_on='local_code')
 large_route_stats.head(2)
  
 #### Step 2:We need to group by the origin and destination columns, so that we form groups for each route. Then we need to aggregate the `PASSENGER` and `FREIGHT` columns by summing them within each group.
  
 summary_stats = large_route_stats.groupby(['ORIGIN', 'municipality_x', 'DEST', 'municipality_y'])['PASSENGERS', 'FREIGHT'].sum()
 summary_stats.head(10)
  
 <span style=""font-family: Arial; font-weight:bold;font-size:1.5em;color:#16850c;"">Exercise:3Find the busiest routes for passengers and freights in the US.
  
 #### Step 1:To solve the second part of this problem, we need to sort the dataframe by passenger count or freight volume.
  
  
 summary_stats.sort_values(by='FREIGHT', ascending=False)"
"Read the dataset(2010_Report_to_Congress_on_White_House_Staff.csv) and Answer below questions?
 
 Exercise:1 Find the position title to which more amount is spent on salaries? (6 marks)
 
 Exercise:2
 
 2A. Find the position title to which the least amount is spent on salaries? (2 marks)
 
 2B) Find the highest-paid position title? (2 marks)
 
 Exercise:3
 
 3.A) Find the least paid position title? (1 marks)
 
 3.B) Find the percentage of the amount spent on each position w.r.t Salaries? (3 marks)",15,Hard,Pandas Manipulation,Numpy-Array,NPV,Final Exam,"data=pd.read_csv('2010_Report_to_Congress_on_White_House_Staff.csv')
  
 #### **Exercise:1** Find the position title to which more amount is spent on salaries? (6 marks)
  
 # Firstly ,group the employees based on position title
 df_bypositiontitle=data.groupby('Position Title')
  
 # After grouping ,perform sum operation on salary to get the total amount spent on each position title
 df_bypositiontitle['Salary'].sum()
  
 # If we want the result to be sorted in descending order then 
 df_bypositiontitle['Salary'].sum().sort_values(ascending=False)
  
 # Result represented in dataframe
 pd.DataFrame(df_bypositiontitle['Salary'].sum().sort_values(ascending=False))
  
 # Position Title to which more Amount is spent
 df_positiontitle=pd.DataFrame(df_bypositiontitle['Salary'].sum().sort_values(ascending=False))
 df_positiontitle.iloc[0]
  
 ### **Exercise:2** 
  
 #### 2A. Find the position title to which the least amount is spent on salaries? (2 marks)
  
  
 # case 2 : Find the position title to which least amount is spent on salaries
 df_positiontitle_asc=pd.DataFrame(df_bypositiontitle['Salary'].sum().sort_values(ascending=True))
 df_positiontitle_asc.iloc[0]
  
 #### 2B) Find the highest-paid position title? (2 marks)
  
 df_case3=pd.DataFrame(df_bypositiontitle['Salary'].max().sort_values(ascending=False))
 df_case3
  
 #### **Exercise:3** 
  
 #### 3.A)Find the least paid position title? (1 mark)
  
 #case : Find the least paid position title
 df_bypositiontitle['Salary'].max().sort_values(ascending=True)
  
 #### 3.B) Find the percentage of the amount spent on each position w.r.t Salaries? (3 marks)
  
 s=sum(data['Salary'])
 df_case7=pd.DataFrame(df_bypositiontitle['Salary'].sum().sort_values(ascending=False))
 result =(df_case7/s)*100 
 result"
"Read the dataset(student-mat.csv) and (student-por.csv) Answer below questions
 
 Problem statement:
 
 Exercise:1 (10 marks)
 
 1A. Read student-mat.csv as df1. Add extra column Course with values 'Maths' in df1
 Read student-por.csv as df2. Add extra column Course with value 'Portuguese' in df2
 append df2 below df1
 
 1B. Find the school name which has the highest number of absentees? 
 
 Exercise:2(8 Marks)
 
 2A. Find the school name which has the maximum number of students scored greater than 8 in all three grades G1, G2, G3 
 
 Exercise : 3 (7 Marks)
 
 2C. Find students who need counseling by analyzing the following column (You can get Dataset Description in student.txt file). ‘famrel’ - the quality of family relationships (numeric: from 1 - very bad to 5 - excellent)
 
 And add one column 'Need_counselling' (1 or 0) in the dataset
 
 Find out the school name in which maximum counselling needed",25,Hard,Pandas Manipulation,,NPV,Mid Exam,"df1= pd.read_csv('student-mat.csv',sep=';')
 df2= pd.read_csv('student-por.csv',sep=';')
 print(df1.shape)
 print(df2.shape)
  
 df1['Course'] = 'maths'
 df2['Course'] ='Portuguese'
 student= df1.append(df2)
 print(student.head(3))
  
 #### 1B. Find the school name in which has highest number of absent students?
  
 # Firstly ,group the students basedon School
 df_byschool=student.groupby('school')
  
 # After grouping ,perform sum operation on absentees 
 df_byschool['absences'].sum()
  
 # If we want the result to be sorted in descending order then 
 df_byschool['absences'].sum().sort_values(ascending=False)
  
 # Result represented in dataframe
 pd.DataFrame(df_byschool['absences'].sum().sort_values(ascending=False))
  
 # school name in which has highest number of absent students
 df_byschool =pd.DataFrame(df_byschool['absences'].sum().sort_values(ascending=False))
 df_byschool.iloc[0]
  
 #### 2A. Find the school name which has maximum number of students scored greater than 8 in all three grades G1,G2,G3 (3 Marks)
  
 max_students= student[ (student['G1']> 10) & (student['G2']> 10) & (student['G3']> 10)]
 max_students.shape
  
 df_byschool=max_students.groupby('school')
  
 count_byschool=df_byschool.count()
  
 count_byschool.index[0]
  
 #### 2C. Find students who needs counselling by analysing following column (You can get Dataset Description in student.txt file).
  <br>famrel - quality of family relationships (numeric: from 1 - very bad to 5 - excellent)</br>
  
  And add one column 'Need_counselling' (1 or 0) in dataset
  
  Find out the school name in which maximum counselling needed
  
 student['Need_couselling']= student['famrel'].apply(lambda x: 1 if x <=2 else 0)
  
 # Firstly ,group thestudents based on School Title
 df_byschool=student.groupby('school')
  
 # After grouping ,perform sum operation on Need_couselling column
 df_byschool['Need_couselling'].sum()
  
 # If we want the result to be sorted in descending order then 
 df_byschool['Need_couselling'].sum().sort_values(ascending=False)
  
 # Result represented in dataframe
 pd.DataFrame(df_byschool['Need_couselling'].sum().sort_values(ascending=False))
  
 # school name in which maximum counselling needed
 df_byschool =pd.DataFrame(df_byschool['Need_couselling'].sum().sort_values(ascending=False))
 df_byschool.iloc[0]"
"Write a Program to
 A. Create a 1D array from 10 to 30(including both) and turn all elements which are between 13 and 21, into their respective negative numbers. (1 Mark)
 B. Normalize a 4x4 random matrix (2 Marks)
 C. Consider a (3,6,5,4) shape array, what is the index (w,x,y,z) of the 100th element located in the matrix? For example: In 3*5 matrix, 6th element will be at (1,1) (2 Mark)",5,Medium,Numpy-Array,,NPV,Final Exam,"## 1.A. Create a 1D array from 10 to 30(including both) and turn all elements which are between 13 and 21, into their respective negative numbers. (1 Mark)
  
 Z = np.arange(10,31)
 Z[(13 < Z) & (Z < 21)] *= -1
 print(Z)
  
 ## 1.B. Normalize a 4x4 random matrix (2 Marks)
  
 Z = np.random.random((4,4))
 Z = (Z - np.mean (Z)) / (np.std (Z))
 print(Z)
  
 ## 1.Consider a (3,6,5,4) shape array, what is the index (w,x,y,z) of the 100th element located in the matrix? For example: In 3*5 matrix, 6th element will be at (1,1) (2 Mark)
  
 print(np.unravel_index(99,(3,6,5,4)))"
"Write a program to 
 A. Create a pandas Series with consecutive numbers between 10 to 20 (include both the boundary values in the series). (1 Mark)
 B. Replace all the even numbers with number 30. (1 Mark)
 C. Display the series in descending order. (1 Mark)
 D. Create a Data frame from the above-created series with column names as numbers. Fetch the data from 2nd, 6th, and 7th rows. (2 Marks)",5,Easy,Pandas Manipulation,,NPV,Final Exam,"## 25. A. Create a pandas Series with consecutive numbers between 10 to 20 (include both the boundary values in the series). (1 Mark)
  
 data = np.arange(11,21,1)
 data
 ser = pd.Series(data) 
 ser
  
 ## 25.B. Replace all the even numbers with number 30. (1 Mark)
  
 ser[ser%2==0]=30
 ser
  
 ## 25.C. Display the series in descending order. (1 Mark)
  
 ser.sort_values(ascending=False)
  
 ## 25.D. Create a Data frame from the above-created series with column names as numbers. Fetch the data from 2nd, 6th, and 7th rows. (2 Marks)
  
 df = pd.DataFrame({'numbers':ser})
 df
  
  
 df.iloc[[2,6,7]]"
"Read the dataset blockbusters.csv and Answer the below questions
 A. Identify the number of blockbuster movies under the Main Genre Comedy. (1 Mark)
 B. List all the names of all the blockbuster movies with imdb ratings above 8. (1 Mark)
 C. List the names of the movies which were 2nd movie in their own movie franchise (Part 2 of the movie series). (1 Mark)
 D. Display the details of all the movies which were produced by Walt Disney Pictures and suitable to be viewed by General Audiences. (2 Marks)",5,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"blockbusters=pd.read_csv('blockbusters.csv')
 blockbusters.head()
  
 ## 26.A. Identify the number of blockbuster movies under the Main Genre Comedy. (1 Mark)
  
 blockbusters[blockbusters['Main_Genre']=='Comedy']['title'].count()
  
 ## 26.B. List all the names of all the blockbuster movies with imdb ratings above 8. (1 Mark)
  
 blockbusters[blockbusters['imdb_rating']>8]['title']
  
 ## 26.C. List the names of the movies which were 2nd movie in their own movie franchise (Part 2 of the movie series). (1 Mark)
  
 blockbusters[blockbusters['title'].str.contains('2')]['title']
  
 ## 26.D. Display the details of all the movies which were produced by Walt Disney Pictures and suitable to be viewed by General Audiences. (2 Marks)
  
 blockbusters[(blockbusters['rating']=='G') & (blockbusters['studio']=='Walt Disney Pictures')]"
"Using the blockbusters dataset 
 A. Display all the details of the blockbusters dataset in descending order of their imdb ratings. (1 Mark)
 B. Calculate the total “worldwide_gross” for all the blockbuster movies in the year 2018. (1 Mark)
 C. Find the Studios who produced the movies that has ranked 1 in the year 2015 and 2017. (3 Marks)",5,Easy,Pandas Manipulation,Numpy-Sorting & Ranking,NPV,Final Exam,"## 27.A. Display all the details of the blockbusters dataset in descending order of their imdb ratings. (1 Mark)
  
 blockbusters.sort_values(by=['imdb_rating'], ascending=False)
  
 ## 27.B. Calculate the total “worldwide_gross” for all the blockbuster movies in the year 2018. (1 Mark)
  
 blockbusters[blockbusters['year']==2018]['worldwide_gross'].sum()
  
 ## 27.C. Find the Studios who produced the movies that has ranked 1 in the year 2015 and 2017. (3 Marks)
  
 blockbusters[((blockbusters['year']==2015) | (blockbusters['year']==2017))&(blockbusters['rank_in_year']==1)]['studio']"
"Read the dataset (blockbusters.csv) 
 
 A. Read the dataset and find the Unique Genres category for ‘Main_Genre’. Find the total number of movies made under each one of them. (3 Marks)
 B. Calculate the average imbd-rating for each genre under Second category of Genre(Genre_2). (3 Marks)
 C. Identify the movie which had the highest length of duration in the dataset. Also display it’s genre, imbd_rating and 'worldwide_gross'. (4 Marks)",10,Easy,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"### Read the dataset (blockbusters.csv) and understand the dataset description given below
  
 blockbusters=pd.read_csv('blockbusters.csv')
 blockbusters.head()
  
 #### 28.a. Read the dataset and find the Unique Genres category for ‘Main_Genre’. Find the total number of movies made under each one of them. (3 Marks)
  
 blockbusters['Main_Genre'].unique()
  
 blockbusters['Main_Genre'].value_counts()
  
 ## 28.b. Calculate the average imbd-rating for each genre under Second category of Genre(Genre_2). (3 MARKS)
  
 blockbusters[['Genre_2','imdb_rating']].groupby(['Genre_2']).mean()
  
 ## 28.c. Identify the movie which had the highest length of duration in the dataset. Also display it’s genre, imbd_rating and 'worldwide_gross'. (4 Marks)
  
 blockbusters[['title','Main_Genre','imdb_rating','worldwide_gross']][blockbusters['length']==blockbusters['length'].max()]"
"Read the dataset blockbusters.csv 
 
 A. Identify the categories of MPAA Rating which got the highest number of blockbusters every year. (Provide a year wise breakup) (6 Marks)
 B. Plot a bar graph to show the total worldwide gross for year. (4 Marks)",10,Hard,Pandas Manipulation,Numpy-Sorting & Ranking,NPV,Final Exam,"## 29.a.Identify the categories of MPAA Rating which got the highest number of blockbusters every year. (Provide a year wise breakup) (6 Marks)
  
 x=blockbusters[['year','rating','title']].groupby(['year','rating']).count().reset_index()
 x
  
 max_ids = x['title'] == x.groupby(['year'])['title'].transform(max)
 x[max_ids]
  
 ## 29.b. Plot a bar graph to show the total worldwide gross for year. (4 Marks)
  
 x=blockbusters[['year','worldwide_gross']].groupby('year').sum().reset_index()['year']
 y=blockbusters[['year','worldwide_gross']].groupby('year').sum().reset_index()['worldwide_gross']
  
 plt.bar(x, y, width=0.8)"
"Read the Dataset 'kc_house_data_mini.csv' and answer the following questions.
 A. Convert date column in datetime object (1 Mark)
 B. Create a new column for Apartment_age in years of an apartment as difference between the year in which apartment is built and date column in dataset. (2 Marks) (2 Marks)
 C. Find out 5 most recently renovated apartments (2 Marks)
 D. Find out an apartment which recently got renovated but has least Apartment age (3 Marks)
 E. Count the number of apartments for each bedroom’s category. Plot it using count plot. (2 Marks)
 F. What is mean price for the 3 Bedroom apartment with atleast 3 bathrooms. (2 Marks)
 G. Display the top ten apartments in ascending order of price per square feet. (3 Marks)",15,Medium,Pandas Manipulation,Numpy-Array,NPV,Final Exam,"## 30. Read the Dataset 'kc_house_data_mini.csv' and answer the following questions. (15 Marks)
  
 df=pd.read_csv('kc_house_data_mini.csv')
  
 df.shape
  
 df.info()
  
 ## 30A.Convert date column in datetime object (1 Mark)
  
 df.info()
  
 df['date'] = df['date'].astype('datetime64[ns]') 
  
 # Check the format of 'Date' column after converting
 df.info() 
  
 ## 30B Create a new column for Apartment_age in years of an apartment as difference between the year in which apartment is built and date column in dataset. (2 Marks)
  
 df['Apartment_age']= pd.DatetimeIndex(df['date']).year - df['yr_built']
 df['Apartment_age']= df['Apartment_age'] 
  
 df.Apartment_age.describe()
  
 ## 30C. Find out 5 most recently renovated apartments (2 Marks)
  
 df_sort=df.sort_values(by=['yr_renovated'], ascending=False)
 df_sort.head(100)
  
 ## 30D. Find out an apartment which recently got renovated but has least Apartment age
  
 recent= df.yr_renovated.max()
 df_recent=df[df['yr_renovated']==recent]
 print(df_recent)
  
  
 least_age=df_recent.Apartment_age.min()
 df1=df_recent[ (df_recent['Apartment_age']==least_age)]
 df1.head()
  
 ## 30E. Count the number of apartments for each bedroom’s category. Plot it using count plot.. (2 Marks)
  
 df.bedrooms.value_counts()
  
 sns.countplot(df.bedrooms)
  
 ## 30F. What is mean price for the 3 Bedroom apartment with atleast 3 bathrooms.
  
 df[ (df['bedrooms'] == 3) & (df['bathrooms'] >=3)]['price'].mean()
  
 ## 30G. Display the top ten apartments in ascending order of price per square feet. (3 Marks)
  
 df['price_sqft']=df['price'] / (df['sqft_living'] + df['sqft_lot'] + df['sqft_above'] + df['sqft_basement'])
  
 df.sort_values(by=['price_sqft'])[0:10]"
"Read the dataset (german_credit_data.csv) and understand the dataset description given below
 A. Observe the column `Pstatus_sex` consists of Personal status and gender of the person together. (5 marks)
 1. Create two separate columns `Pstatus` and `Sex` of a person from this column. 
 2. Add new columns in this dataset and drop old `Pstatus_sex `column.
 B. Find male and female percentage (%) in job category out (5 Marks)
 C. 1. Create a new column `age_group` by grouping `Age` column (5 Marks)
 Age_group - '<30', '31-40', '41-50', '51-60','>61'
 2. Find Average amount credited in each of the above age group
 3. Plot it using bar plot",15,Hard,Pandas Manipulation,Visualisation,NPV,Final Exam,"## 31 Read the Dataset 'german_credit_data.csv' and answer the following questions. (15 Marks)
  
 german=pd.read_csv('german_credit_data.csv')
  
 german.shape
  
 german.info()
  
 german.describe()
  
 german.describe(include='object')
  
 ## 31A. Observe the column `Pstatus_sex` consists of Personal status and gender of the person together. 
  
  
 1. Create two separate columns `Pstatus` and `Sex` of a person from this column. 
  
 2. Add new columns in this dataset and drop old `Pstatus_sex `column.
  
  
 def convert_p(value):
  sex,pstatus=value.split(':')
  return pstatus.strip()
  
 def convert_s(value):
  sex,pstatus=value.split(':')
  return sex.strip()
  
 german['Pstatus']= german['Pstatus_sex'].apply(convert_p)
 german['Sex']= german['Pstatus_sex'].apply(convert_s)
  
 german.drop(['Pstatus_sex'],inplace=True,axis=1)
  
 german.head()
  
 ## 31B. Find out male and female percentage (%) in job catogory (5 Marks)
  
 res = german.pivot_table(index='Job', columns='Sex', aggfunc='size', fill_value=0)
 res
  
 # calculate ratios
 sums = res[['female', 'male']].sum(axis=1)
 res['FemaleRatio'] = res['female'] / sums
 res['MaleRatio'] = res['male'] / sums
 res
  
 ## 31C. Create a new column `age_group` by grouping `Age` column in following categories : (5 Marks)
 1. Age_group - '<30', '31-40', '41-50', '51-60','>61'
 2. Find Average amount credited in each of the above age group
 3. Plot it using bar plot
  
 cut_labels_4 = ['<30', '31-40', '41-50', '51-60','>61']
 cut_bins = [0,30,40,50,60,80]
 german['Age_group'] = pd.cut(german['Age'], bins=cut_bins, labels=cut_labels_4)
  
 german.head()
  
 gf= german.groupby('Age_group').mean()['Credit amount']
 gf=gf.reset_index()
 gf
  
 plt.bar(gf['Age_group'],gf['Credit amount'])"
"Write a Program to
 Create a list of numbers from 1 to 10 in python (do not hardcode numbers). (1 MARKS)
 Find the number of elements present in the list. (1 MARKS)
 Convert the above list into a series. (1 MARKS)
 Display the elements at even position (as per the index values). (1 MARKS)
 Add the elements 11,12 and 13 to the existing series. (1 MARKS)",5,Hard,Pandas Manipulation,Numpy-Array,NPV,Final Exam,"#### A. Create a list of numbers from 1 to 10 in python (do not hardcode numbers). (1 MARKS)
  
 ls= list(range(1, 11)) 
  
 #### B. Find the number of elements present in the list. (1 MARKS)
  
 len(ls)
  
 #### C. Convert the above list into a series. (1 MARKS)
  
 s=pd.Series(ls)
 s
  
 #### D. Display the elements at even position (as per the index values). (1 MARKS)
  
 s[ : : 2]
  
 #### E. Add the elements 11,12 and 13 to the existing series. (1 MARKS))
  
 s=pd.Series(range(1,10))
 s=list(s)
 s.extend(list(range(11,14)))
 s=pd.Series(s)
 print(s)"
"Read the Dataset (Ramen-ratings.CSV)
 
 A. Identify number of brands about which the information is being captured in the dataset (2 MARKS)
 B. Which brands are having the highest number of reviews (2 MARKS)
 C. Store the data of bowl noodles for countries China and Taiwan in a data frame and display it. (3 MARKS)
 D. Find the brands that have ranking more than 4 in the above data frame in question C (2 MARKS) 
 E. For every “Country” and “Style” of noodle find the average “Stars”. Order them by stars highest to lowest. (3 MARKS)
 F. Which “Country” and “Style” of the noodle combinations are having the overall highest rating (5 MARKS)
 G. Find out the “Country” about which we have maximum number of information in the dataset (3 MARKS)",15,Hard,Pandas Manipulation,Visualisation,NPV,Final Exam,"Dataset=pd.read_csv('ramen-ratings.csv')
 Dataset.head(3)
  
 ramen.shape
  
 The dataset has 2580 rows and 7 columns.
  
 #### A. Identify number of brands about which the information is being captured in the dataset(2 Marks)
  
 Dataset['Brand'].nunique()
  
 Dataset['Brand'].unique()
  
 #### B. Which brands are having the highest number of reviews (2 Marks)
  
 Dataset[Dataset['Review #']==Dataset['Review #'].max()]['Brand']
  
 Dataset[Dataset['Brand']=='New Touch']
  
 * Here we can see highest number of reviews is 'New Touch'
  
 #### C. Display the data of bowl noodles for countries China and Taiwan. (3 Marks)
  
 Dataset1 = Dataset[(Dataset[""Country""]==""China"") | (Dataset[""Country""]==""Taiwan"")]
 Dataset1 = Dataset1[Dataset1[""Style""]==""Bowl""] 
 Dataset1.head()
  
 #### D. Find the brands that have ranking more than 4 and store the result in a data frame .(2 Marks) 
  
 Dataset1[Dataset1['Stars']>4.0]['Brand'].unique()
 Dataset1.head()
  
 #### E. For every “Country” and “Style” of noodle find the average “Stars”. Order them by stars highest to lowest. (3 Marks)
  
 x=Dataset[['Country','Style','Stars']]
 x.groupby(['Country','Style'])['Stars'].mean().sort_values( ascending=False)
  
  
 #### F. Which “Country” and “Style” of the noodle combinations are having the overall highest rating (5 Marks)
  
 y=Dataset[['Country','Style','Stars']]
 Count=[]
 for i,j in x.groupby(['Country','Style'])['Stars']:
  Count.append(j.mean())
 Count=np.array(Count)
 for i,j in x.groupby(['Country','Style'])['Stars']:
  if j.mean() ==Count.max():
  print(i)
  
  
 #### G. Find out the “Country” about which we have maximum number of information in the dataset (3 Marks)
  
 Count=[]
 for i,j in Dataset.groupby([""Country""])['Style']:
  Count.append(j.count())
 Count=np.array(Count) 
 for i,j in Dataset.groupby([""Country""])['Style']:
  if j.count() == Count.max():
  print(i)"
"Read the dataset(Election_Contributions.csv) and Answer the below questions?
 
 A. There are four parties namely: 'Republican','Democrat','Reform','Libertarian'. One or more candidates can appear for elections from each party as shown in the figure below. Create a dictionary for storing the data given below in the figure. Create a new column 'Party' in the election dataset and map the party information for each candidate in the election dataset. (5 MARKS) 
 
 
 Candidate name Party
 
 Bachmann, Michelle': 'Republican'
 'Romney, Mitt': 'Republican'
 'Obama, Barack': 'Democrat'
 ""Roemer, Charles E.'Buddy' III"": 'Reform'
 'Pawlenty, Timothy': 'Republican'
 'Johnson, Gary Earl': 'Libertarian'
 'Paul, Ron': 'Republican'
 'Santorum, Rick': 'Republican'
 'Cain, Herman': 'Republican'
 'Gingrich, Newt': 'Republican'
 'McCotter, Thaddeus G': 'Republican'
 'Huntsman, Jon': 'Republican'
 'Perry, Rick': 'Republican'
 
 
 
 
 B. Create columns first_name and last_name from column cand_nm. Add them to the data frame. Find the count of contributions for every last_name. (4 MARKS)
 
 C. Display the name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) of Top 10 Contributors (given as “contb_receipt_amt”) in the dataset (3 MARKS)
 
 
 D. There can be duplication for the combination of name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) in the dataset. Accumulate it according to each unique combination of name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) then display the name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) of Top 10 Contributors (given as “contb_receipt_amt”) in the dataset (3 Marks)
 
 E. There can be duplication for the candidate name (given as 'cand_nm') in the dataset. Accumulate it according to each unique candidate name (given as “cand_nm”) then display top 10 candidates who got maximum contribution amount (given as “contb_receipt_amt”) (3 MARK)
 
 
 F. Display which city and the amount that has given maximum contribution to Democrat party (6MARKS)
 G. Count the number of unique contributors for every candidate from each state and the total amount of contribution made. Plotline graphs for every state for each of the aggregations calculated separately. (6 MARKS)",15,Hard,Pandas Manipulation,,NPV,Final Exam,"fec = pd.read_csv('Election_Contributions.csv')
  
 fec.head()
  
 #### A. There are four parties namely: 'Republican','Democrat','Reform','Libertarian'. One or more candidates can appear for elections from each party as shown in the figure below. Create a dictionary for storing the data given below in the figure. Create a new column 'Party' in the election dataset and map the party information for each candidate in the election dataset. (5 MARKS) 
  
 parties = {
  'Bachmann, Michelle': 'Republican',
  'Romney, Mitt': 'Republican',
  'Obama, Barack': 'Democrat',
  ""Roemer, Charles E. 'Buddy' III"": 'Reform',
  'Pawlenty, Timothy': 'Republican',
  'Johnson, Gary Earl': 'Libertarian',
  'Paul, Ron': 'Republican',
  'Santorum, Rick': 'Republican',
  'Cain, Herman': 'Republican',
  'Gingrich, Newt': 'Republican',
  'McCotter, Thaddeus G': 'Republican',
  'Huntsman, Jon': 'Republican',
  'Perry, Rick': 'Republican' 
  }
  
  
 fec['party'] = fec.cand_nm.map(parties)
  
 parties
  
  
 fec['party'].unique()
  
 #### B. Create columns first_name and last_name from column cand_nm. Add them to the data frame. Find the count of contributions for every last_name. (4 MARKS)
  
 name= fec['cand_nm'].str.split(',' , expand = True)
 name
  
 fec['first_name']=name[1]
 fec['last_name']=name[0]
  
 fec['last_name'].value_counts()
  
 #### C. Display the name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) of Top 10 Contributors (given as “contb_receipt_amt”) in the dataset (3 MARKS)
  
 fec.sort_values('contb_receipt_amt',ascending= False)[['contbr_nm','contbr_occupation']].iloc[:10]
  
 #### D. There can be duplication for the combination of name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) in the dataset. Accumulate it according to the each unique combination of name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) then display the name (given as 'contbr_nm'), occupation (given as “contbr_occupation”) of Top 10 Contributors (given as “contb_receipt_amt”) in the dataset (3 Marks)
  
 result = fec.groupby(['contbr_nm','contbr_occupation'])['contb_receipt_amt'].sum()
 result= result.sort_values(ascending=False)
 result[0:10]
  
 #### E. There can be duplication for the candidate name (given as 'cand_nm') in the dataset. Accumulate it according to the each unique candidate name (given as “cand_nm”) then display top 10 candidates who got maximum contribution amount (given as “contb_receipt_amt”) (3 MARK)
  
 result = fec.groupby(['cand_nm'])['contb_receipt_amt'].sum()
 result= result.sort_values(ascending=False)
 result[0:10]
  
 #### F. Display which city and the amount that has given maximum contribution to Democrat party (6MARKS)
  
 fec_republic=fec[fec['party'] == 'Democrat']
 fec_st=fec_republic.groupby('contbr_city')['contb_receipt_amt'].sum()
 max_sum=fec_st.sort_values(ascending = False)
  
 print('City : ', max_sum.index[0])
 print('Max amount received :',max_sum[0])
  
 #### G. Count the number of unique contributors for every candidate from each state and the total amount of contribution made. Plotline graphs for every state for each of the aggregations calculated separately. (6 MARKS)
  
 new_df= fec[['contbr_nm','cand_nm','contbr_st','contb_receipt_amt']]
 new_df=new_df.groupby(['contbr_st','cand_nm']).agg({'contbr_nm':'count','contb_receipt_amt':'sum'}).reset_index()
 new_df.head()
  
 new_df.plot.line(x='contbr_st',y='contbr_nm')
 new_df.plot.line(x='contbr_st',y='contb_receipt_amt')"
"A. Write a code snippet to create a numpy array with elements between 12 and 36 which has a difference of 2 between two consecutive numbers (no hardcoding of values allowed). Display the contents of the array. (1 Marks) 
 
 B. Write a code snippet to convert the above-mentioned 1-D array into an array of dimension 3x4. (1 Marks) 
 
 C. Write a code snippet to fetch the elements present in the 2nd to 4th position of 2nd row from the above-created data frame. Store the result set in a variable. (1 Marks) 
 
 D. Write a code snippet to create an array of one's of size 3x1. And perform multiplication between the array of one’s and the array extracted above (in question C). (1 Marks) 
 
 E. Write a code snippet to join the data frames resulted from Question C and Question D in such a fashion that the rows resulting from Question D should follow the rows resulting from Question C. (1 Marks)",5,Medium,Numpy-Array,Numpy-Sorting & Ranking,NPV,Final Exam,"x=np.arange(12,36,2)
 x
  
  
 b.Write a code snippet to convert the above-mentioned 1-D array into an array of dimension 3x4. (1 Marks) 
  
 y=x.reshape(3,4)
 y
  
  
 c.Write a code snippet to fetch the elements present in the 2nd to 4th position of 2nd row from the above-created data frame. Store the result set in a variable. (1 Marks)
  
 z=y[1:2,1:]
 z
  
  
 d.Write a code snippet to create an array of one's of size 3x1. And perform multiplication between the array of one’s and the array extracted above (in question C). (1 Marks)
  
 a=np.ones((3,1))
 a
 res= z*a
 res
  
  
 e. Write a code snippet to join the data frames resulted from Question C and Question D in such a fashion that the rows resulting from Question D should follow the rows resulting from Question C. (1 Marks)
  
 np.vstack((res,z))"
"A. Write a code snippet to create a pandas series with numbers between 1 to 5. Create another series with names john, tom, dave, king and jack. (2 marks) 
 
 B. Write a code snippet to create a data frame with column names as ‘’id’’ and ‘’name’’ using the series created above. Display the data frame. (2 Marks) 
 
 C. Write a code snippet to break the data frame into 2 smaller data frames having 3 rows and 2 rows respectively. (1 Marks)",5,Easy,Numpy-Array,,NPV,Final Exam,"a.Write a code snippet to create a pandas series with numbers between 1 to 5. Create another series with names john, tom, dave, king and jack. (2 marks)
  
 data1=[1,2,3,4,5]
 ser1=pd.Series(data1)
 data2 =['john' ,'tom', 'dave' , 'king' , 'jack']
 ser2=pd.Series(data2)
  
 ser1
  
 ser2
  
 b.Write a code snippet to create a data frame with column names as id and name using the series created above. Display the data frame. (2 Marks)
  
 dictionary= { 'id': ser1, 'name': ser2 } 
 df = pd.DataFrame(dictionary) 
 df
  
 c. Write a code snippet to break the data frame into 2 smaller data frames of size 3 and 2 rows each. (1 Marks)
  
 df1=df[0:3]
 df1
  
 df2=df[3:]
 df2"
"Read the Dataset (Ramen-ratings.CSV) 
 A. Identify how many brands the data is captured. (2 Marks) 
 B. Identify for how many rows the data for column Top Ten exists? (2 Marks) 
 C. Display the data of bowl noodles for countries China and Taiwan. (3 Marks) 
 D. Store the result in a data frame. Using the data frame find the brands that have ranking more than 4. (3 Marks) 
 E. For Every Country and Style of noodle find the average Stars. Order them by stars highest to lowest. (4 Marks) 
 F. Write a function to return the year in numbers or null if there is no value for the Top Ten column. Use this value to create a new column Top_Year. (5 Marks) Add the column to the dataset. (1 Marks)",10,Medium,Pandas Manipulation,Numpy-Indexing & Slicing,NPV,Final Exam,"ramen=pd.read_csv('ramen-ratings.csv')
 ramen.head()
  
 ramen.shape
  
 ramen['Brand'].nunique()
  
 ramen['Brand'].unique()
  
 ramen[ramen['Top Ten'].isnull()==False]['Top Ten']
  
 ramen[ramen['Top Ten'].isnull()==False]['Top Ten'].count()
  
 #### D. Display the data of bowl noodles for countries China and Taiwan. (3 Marks) 
  
 china_taiwan=ramen[((ramen['Country']=='China') | (ramen['Country']=='Taiwan'))&(ramen['Style']=='Bowl')]
 china_taiwan
  
 #### E. Store the result in a data frame. Using the data frame find the brands that have ranking more than 4.(2 Marks)
  
 china_taiwan[china_taiwan['Stars']>4.0]['Brand'].unique()
  
 #### F. For Every Country and Style of noodles find the average Stars. Order the stars from highest to lowest.(4 Marks)
  
 x=ramen[['Country','Style','Stars']]
 x.groupby(['Country','Style'])['Stars'].mean().sort_values( ascending=False)
  
 #### G. Write a function to return the year in numbers or null if there is no value for Top Ten column. Use this value to create a new column Top_Year.(5 Marks) and Add the column to the dataset.(1 Marks)
  
 ramen[ramen['Top Ten'].isnull()==False][['Brand','Top Ten']]
  
 def find_year(x):
  if x.split('#')[0]:
  return x.split('#')[0]
  else:
  return null
  
 y=ramen['Top Ten'].apply(lambda x: find_year(str(x)))
 y
  
 ramen['Top_year']=y
 ramen.head()"
"Read the dataset (Adult1.csv) and understand the dataset description given below 
 
 A. Write a code snippet to find the average age of women from the United States. 2 Marks 
 
 B. Write a code snippet to find the proportion of US citizens (native-country feature) in the dataset. 2 Marks 
 
 C. Write a code snippet to find which occupation has the maximum number of workers who earn a salary more than 50K? 2 Marks 
 
 D. Is it true that people who receive more than 50K salary have at least a high school education? (education - Bachelors, Profschool, Assoc-acdm, Assoc-voc, Masters or Doctorate feature). Justify your answer with all facts and figures from the dataset 2 Marks 
 
 E. Write code to count the average time of work (hours-per-week) for those who earn a little (<50 K ) and a lot (salary) (>=50 K ) for each country (native-country). 2 Marks 
 
 F. Among whom the proportion of those who earn a lot(>50K) is 5 Marks 
 
 more: among married or single men (marital-status feature)? Consider married as those who have a marital-status starting with Married (Married-civ-spouse, Married-spouse-absent or Married-AF-spouse), the rest are considered bachelors. Find out the proportion.",10,Hard,Pandas Manipulation,,NPV,Final Exam,"df=pd.read_csv('Adult1.csv')
 df.head(3)
  
 df.shape
  
 A. Write a code to find the average age of women from the United States. (2 Marks)
  
 df1=df.loc[df['native-country'] == 'United-States']
 round(df1.loc[df['sex'] == 'Female','age'].mean(),2)
  
 B. Write a code to find the proportion of US citizens (native-country feature) in the dataset.
  
 float((df['native-country'] == 'United-States').sum()) / df.shape[0] *100
  
 c.Write a code to find which occupation has the maximum number of workers who earn more than 50K salary? 
  
 df_occ=df.groupby('occupation')
 df_occ=df_occ['salary'].value_counts().reset_index(name='Counts')
 df_occ[df_occ['salary'] == '>50K'].max()
  
  d. Is it true that people who receive more than 50K salary have at least a high school education? (education - Bachelors, Prof-school, Assoc-acdm, Assoc-voc, Masters or Doctorate feature). 
 Justify your answer with all facts and figures from the dataset
  
  
 df.loc[df['salary'] == '>50K','education'].unique()
  
 Looking at the result we can conclude that Its **not always true** that people who receive more than 50k have at least high school education but we can find out the proportion of people not having atleast high school education and earning more than 50 K
  
 df1=df.loc[df['salary'] == '>50K']
 df1=df1.groupby(['education','education-num']).size().reset_index(name='counts')
  
 total= df1.counts.sum()
 not_educated = df1.loc[df['education-num'] <9,'counts'].sum()
 educated = df1.loc[df['education-num'] >=9,'counts'].sum()
 not_educated/ total *100
  
  e.Write code to count the average time of work (hours-per-week) those who earn a little (<50 K ) and a lot (salary) (>=50 K ) for each country (native-country)
  
 for (country, salary), sub_df in df.groupby(['native-country', 'salary']):
  print(country, salary, round(sub_df['hours-per-week'].mean(), 2))
  
  f.Among whom the proportion of those who earn a lot(>50K) is more: among married or single men (marital-status feature)? Consider married those who have a marital-status starting with Married (Married-civ-spouse, Married-spouse-absent or Married-AF-spouse), the rest are considered bachelors. Find out this proportion.(5 Marks)
  
 single_men_count=df.loc[(df['sex'] == 'Male') &
  (df['marital-status'].isin(['Never-married', 
   'Separated', 
  'Divorced',
  'Widowed'])), 'salary'].value_counts()
 single_men_count
  
 married_count=df.loc[(df['sex'] == 'Male') &
  (df['marital-status'].str.startswith('Married')), 'salary'].value_counts()
 married_count
  
 From Above result we can conclude that proprtion of married men earning more than 50 k is more than single men.
  
 total=df['marital-status'].value_counts().sum()
  
 print('proportion of married men earning >50 K : ',married_count[0]/total*100)
 print('proportion of single men earning >50 K : ',single_men_count[0] / total*100)"
"Refer to the same dataset (adult.csv) and answer the following questions 
 
 A. Write a code block to find, what is the maximum number of hours a person works per week (hours-per-week feature)? How many number of people work for the above mentioned number of hours? What is the percentage of those who earn more than >50 K among them? 5 Marks 
 
 B. Observe the column occupation, every entry has two parts: 
 profession-specialty. Make two separate columns namely profession and specialty out of this column. Drop the column occupation from the dataset. 5 Marks 
 
 C. Find out the percentage of males and females in every profession using the ‘profession’ column created in the above question. 5 Marks",15,Medium,Pandas Manipulation,,NPV,Final Exam,".a.Write a code to find, what is the maximum number of hours a person works per week (hours-per-week feature)? How many people work such a number of hours and what is the percentage of those who earn a lot (>50 K) among them? (5 Marks)
  
 max_load = df['hours-per-week'].max()
 print(""Max time - {0} hours./week."".format(max_load))
  
 num_workaholics = df[df['hours-per-week'] == max_load].shape[0]
 print(""Total number of such hard workers {0}"".format(num_workaholics))
  
 rich_share = float(df[(df['hours-per-week'] == max_load)
  & (df['salary'] == '>50K')].shape[0]) / num_workaholics
 print(""Percentage of rich among them {0}%"".format(int(100 * rich_share)))
  
 b. Observe occupation column, every entry has two parts profession-specialty. Make two separate columns namely profession and specialty out of this one column. Drop the column occupation from the dataset. (5 Marks) 
  
 df[['profession','speciality']] = df['occupation'].str.split(""-"",expand=True)
 df.drop(['occupation'],axis=1,inplace=True)
  
  c.Find out male and female percentage (%) in every profession using a profession column created in the above question. (5 Marks)
  
 res = df.pivot_table(index='profession', columns='sex', aggfunc='size', fill_value=0)
  
 # calculate ratios
 sums = res[['Female', 'Male']].sum(axis=1)
 res['FemaleRatio'] = res['Female'] / sums
 res['MaleRatio'] = res['Male'] / sums
 res"
Create a null vector of size 7 and replace the fifth value with '1',5,Easy,Numpy-Array,,NPV,Final Exam,"Array = np.zeros(7)
 Array[4] = 1
 print(Array)"
Create a random vector of size 100 and find the mean value?,5,Easy,Numpy-Array,,NPV,Final Exam,"Array = np.random.random(100)
 mean_value = Array.mean()
 print(mean_value)"
"Create a DataFrame df from this dictionary data which has the index labels.For example consider the following DataFrame:
 
 data = {'animal': ['cow', 'cat', 'cow', 'dog', 'dog', 'cat', 'cow', 'cat', 'dog', 'dog'],
 'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
 'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1]}
 
 labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']",5,Medium,Pandas Manipulation,,NPV,Final Exam,"data = {'animal': ['cow', 'cat', 'cow', 'dog', 'dog', 'cat', 'cow', 'cat', 'dog', 'dog'],
  'age': [2.5, 3, 0.5, np.nan, 5, 2, 4.5, np.nan, 7, 3],
  'visits': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1]}
  
 labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
  
 df = pd.DataFrame(data, index=labels)
 df.head()"
Select the rows where the animal is a cat and the age is less than 3.,5,Easy,Numpy-Sorting & Ranking,,NPV,Final Exam,df[(df['animal'] == 'cat') & (df['age'] < 3)]
"Create 3 differents Series, each of length 100, as follows:
 
 A) Create
 
 * The first a random number from 1 to 4
 * The second a random number from 1 to 3
 * The third a random number from 10,000 to 30,000
 
 B). Create a DataFrame by joinning the Series by column",5,Easy,Pandas Manipulation,,NPV,Final Exam,"A) Create
  
  * The first a random number from 1 to 4
  * The second a random number from 1 to 3
  * The third a random number from 10,000 to 30,000
  
 s1 = pd.Series(np.random.randint(1, high=5, size=100, dtype='l'))
 s2 = pd.Series(np.random.randint(1, high=4, size=100, dtype='l'))
 s3 = pd.Series(np.random.randint(10000, high=30001, size=100, dtype='l'))
  
 B). Create a DataFrame by joinning the Series by column
  
 Data = pd.concat([s1, s2, s3], axis=1)
 Data.head()"
"Given an array with strings - 
 
 str_arr = np.array(['Python', 'Machine learning', 'Sql', 'Excel']).
 
 Use inbuilt numpy functions to print the array in upper and lower case.",5,Easy,Numpy-Array,,NPV,Final Exam,"str_arr = np.array(['Python', 'Machine learning', 'Sql', 'Excel'])
 print(str_arr)
 lowered_case = np.char.lower(str_arr)
 uppered_case = np.char.upper(str_arr)
 print(""Lowered: "", lowered_case)
 print(""Uppered: "", uppered_case)"
Create NumPy to generate an array of 100 random numbers sampled from a standard normal distribution?,5,Easy,Numpy-Array,,NPV,Final Exam,np.random.randn(100)
"Delete an element in Numpy Array = [4,5,6,7,8,9,10,11] with Index position 2?",5,Easy,Numpy-Indexing & Slicing,,NPV,Final Exam,"arr = np.array([4,5,6,7,8,9,10,11])
 arr = np.delete(arr, 2)
  
 print('Modified Numpy Array by deleting element at index position 2')
 print(arr)"
"Read The data phone_data.csv and Answer the below questions
 
 1.A) How many rows and columns are there in the dataset (phone_data.csv) (2 Marks)
 1.B) What was the longest phone call / data entry? (2 Marks)
 
 1.C) How many seconds of phone calls are recorded in total? (4 Marks)
 
 1.D) Get the first entry for each month? (2 Marks)
 
 1.E) Get the sum of the durations per month? (4 Marks)
 
 1.F) What is the sum of durations of calls to each network? (4 Marks)
 
 1.G) How many calls, sms, and data entries are there in each month? (2 Marks)
 
 1.H) How many calls, texts, and data are sent per month, split by network_type? (2 Marks)
 
 1.I) Group the data frame by month and item and extract a number of stats from each group? (3 Marks)
 
 1.J) Write Conclusion about Data set? (2 MARKS)",25,Hard,Pandas Manipulation,,NPV,Mid Exam,"data = pd.read_csv('phone_data.csv')
 data.head(3)
  
 .A) How many rows and column in the dataset (phone_data.csv)
  
 data.shape
  
 .B) What was the longest phone call / data entry
  
 data['duration'].max()
  
 .C) How many seconds of phone calls are recorded in total
  
 data['duration'][data['item'] == 'call'].sum()
  
 .D) Get the first entry for each month
  
 data.groupby('month').first()
  
 .E) Get the sum of the durations per month
  
 data.groupby('month')['duration'].sum()
  
 .F) What is the sum of durations, for calls only, to each network
  
 data[data['item'] == 'call'].groupby('network')['duration'].sum()
  
 .G) How many calls, sms, and data entries are in each month
  
 data.groupby(['month', 'item'])['date'].count()
  
 .H) How many calls, texts, and data are sent per month, split by network_type
  
 data.groupby(['month', 'network_type'])['date'].count()
  
  .I) Group the data frame by month and item and extract a number of stats from each group
  
 data.groupby(
  ['month', 'item']
 ).agg(
  {
  'duration':sum, # Sum duration per group
  'network_type': ""count"", # get the count of networks
  'date': 'first' # get the first date per group
  }
 )
  
 .J) Write Conclusion about Data set
  
 1. The data set have total time of 5 months.
 2. The Highest total calls is 2014-11 call:107
 3. The Highest mobile Netwok is 189
 4. We find the total Highest month:2014-11 is in call:107 and network:25547.000"
"Read the Dataset Fifa.csv 
 
 1. Data Manipulation for Value Column (5 Marks).
 Step1: Clean Value column by removing '?' from each row.
 Step2: Convert the column in uniform unit i.e. 'K' by using given conversion rate 1 =1000 K and also remove the letter 'K' and 'M' from each row.
 Step3: Convert the Datatype of the column to 'float'
 First 5 values of Sample output column should look like this:
 
 0 750.0
 1 21500.0
 2 4000.0
 3 240.0
 4 150.0
 
 Name: Value, dtype: float64
 2. Data Manipulation for Height Column (5 Marks).
 Step1: Convert Height column from Feet’ Inches unit to Inches unit by using given conversion rate 1 feet = 12 inches Step2: Convert the Datatype of the Height column to 'int'
 First 5 values of Sample Output Height column should look like this:
 0 70
 1 67
 2 67
 3 71
 4 66
 Name: Height, dtype: int32 
 
 3. Data Manipulation for Weight Column (5 Marks).
 Step1: Clean Weight column by removing ‘lbs’ from each row’
 Step2: Convert the Datatype of the Weight column to 'int'
 First 5 values of Sample Output Weight column should look like this:
 
 0 143
 1 150
 2 159
 3 168
 4 154
 Name: Weight, dtype: int32",15,Hard,Pandas Manipulation,,NPV,Final Exam,"### 1. Data Manipulation for Value Column (5 Marks).
  
 **Step1:** Clean Value column by removing '?' from each row.
  
 **Step2:** Convert the column in uniform unit i.e. 'K' by using given conversion rate 1 =1000 K and also remove the letter 'K' and 'M' from each row.
  
 **Step3:** Convert the Datatype of the column to 'float'
  
 **First 5 values of Sample output column should look like this:**
  
  
 |0 | 750.0|
 |----|-------|
 |1 | 21500.0|
 |2 | 4000.0|
 |3 | 240.0|
 |4 | 150.0|
  
 Name: Value, dtype: float64
  
  
  
 fifa=pd.read_csv('Fifa.csv')
 fifa.head()
  
 def convert_curr(value):
  value=value.replace('?','')
  
  value=value.replace('K','')
  
  if 'M' in value:
  value=value.replace('M','')
  value=str(float(value)*1000)
  
  return value
  
 fifa['Value']=fifa['Value'].apply(convert_curr)
 fifa['Value']=fifa['Value'].astype('float')
 fifa.Value.head()
  
  
 ### 2. Data Manipulation for Height Column (5 Marks).
  
 Step1: Convert Height column from Feet’ Inches unit to Inches unit by using given conversion rate 1 feet = 12 inches
 Step2: Convert the Datatype of the Height column to 'int'
  
 First 5 values of Sample Output Height column should look like this:
  
 |0 | 70|
 |-|-|
 |1| 67|
 |2 | 67|
 |3 | 71|
 |4 | 66|
 Name: Height, dtype: int32
  
  
 def convert_height(value):
  feet,inch=value.split('\'')
  value= str(int(feet)* 12 + int(inch))
  return value
  
  
  
  
 fifa['Height']=fifa['Height'].apply(convert_height)
 fifa['Height']=fifa['Height'].astype(int)
  
 fifa.Height.head()
  
 ### 3. Data Manipulation for Weight Column (5 Marks).
  
 **Step1:** Clean Weight column by removing ‘lbs’ from each row’
  
 **Step2:** Convert the Datatype of the Weight column to 'int'
  
 **First 5 values of Sample Output Weight column should look like this:**
  
 |0 | 143|
 |--|--|
 |1 | 150|
 |2 | 159|
 |3 | 168|
 |4 | 154|
 |Name: Weight,| dtype: int32|
  
  
 def convert_weight(value):
  value=value.replace('lbs','')
  return value 
  
  
 fifa['Weight']=fifa['Weight'].apply(convert_weight)
 fifa['Weight']=fifa['Weight'].astype(int)
  
 fifa.Weight.head()"
What are the rules for local variables and global variables?,8,Easy,variables ,,ITP,Mid Exam,"In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.
 Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.
 Local variables: If a variable is assigned a new value anywhere within the function's body, it's assumed to be local.
 Global variables: Those variables that are only referenced inside a function are implicitly global."
Explain the namespaces in python? Why are they used,8,Easy,,,ITP,Mid Exam,"Python implements these namespaces as dictionaries with 'name as key' mapped to a corresponding 'object as value'. This allows for multiple namespaces to use the same name and map it to a separate object
  
 Local Namespace includes local names inside a function. the namespace is temporarily created for a function call and gets cleared when the function returns.
  
 Global Namespace includes names from various imported packages/ modules that is being used in the current project. This namespace is created when the package is imported in the script and lasts until the execution of the script.
  
 Built-in Namespace includes built-in functions of core Python and built-in names for various types of exceptions.
  
 Lifecycle of a namespace depends upon the scope of objects they are mapped to. If the scope of an object ends, the lifecycle of that namespace comes to an end. Hence, it isn't possible to access inner namespace objects from an outer namespace."
What is the difference between append() and extend() methods?,8,Easy,,,ITP,Mid Exam,"Both append() and extend() methods are methods used to add elements at the end of a list.
  
 * append(element): Adds the given element at the end of the list that called this append() method
 * extend(another-list): Adds the elements of another list at the end of the list that called this extend() method"
What are the Immutable and Mutable built-in datatypes of Python,8,Easy,,,ITP,Mid Exam,"**Immutable built-in datatypes of Python**
 * Numbers
 * Strings
 * Tuples
  
  
 **Mutable built-in datatypes of Python**
 * List
 * Dictionaries
 * Sets"
What is negative indexes and What are they and why are they used?,8,Easy,,,ITP,Mid Exam,"The sequences in Python are indexed. It consists of positive and negative numbers. Positive numbers use 0 as the first index, 1 as the second index, and so on. Hence, any index for a positive number n is n-1.
  
 Unlike positive numbers, index numbering for the negative numbers start from -1 and it represents the last index in the sequence. Likewise, -2 represents the penultimate index. These are known as negative indexes. Negative indexes are used for:
  
 * Removing any new-line spaces from the string, thus allowing the string to except the last character, represented as S[:-1]
 * Showing the index to representing the string in the correct order"
What are the differences between the lambda and def ?,8,Easy,,,ITP,Mid Exam,"* Def can hold multiple expressions while lambda is a uni-expression function.
 * Def generates a function and designates a name to call it later. Lambda forms a function object and returns it.
 * Def can have a return statement. Lambda can’t have return statements.
 * Lambda supports to get used inside a list and dictionary."
"Explain List , Tuple ,Dictionary data types with examples? and also write key characteristics for each of these data type",8,Easy,,,ITP,Mid Exam,"# List - A list is a mutable, ordered sequence of items. As such, it can be indexed, sliced, and changed.
 # Each element can be accessed using its position in the list.Lists are declared in square brackets []
 List1 = [2, 4, 'john', 45.78] 
  
 # Tuples are used to hold together multiple objects similar to lists,
 # One major feature of tuples is that they are immutable like strings i.e. you cannot modify tuples.
 # However, you can take portions of existing tuples to make new tuples. 
 # Tuple is declared in parentheses ()
  
 tup_num = (1,2,3,4,'KFK')
  
  
 # A dictionary is a key:value pair, similar to an associative array found in other programming languages.
 # A dictionary is like an address-book where you can find the address or contact details of a person by knowing only his/her name
 # i.e. we associate keys (name) with values (details).
  
 my_dict = {1: 'one', 2: 'two', 3: 'three'}"
"Write a function called print_perfect_squares() that takes an integer and prints out all the perfect squares from 1 upto that number.
 Write a function definition in such a way that It should take an intger as a paramter and should not return anything to the calling program. 
 The perfect squares are the squares of the whole numbers: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 …
   
 Sample Input/Output:
 Enter a number: 200
 Perfect square numbers from 1 to 200 are :
 1 4 9 16 25 36 49 64 81 100 121 144 169 196",17,Medium,Functions and Loops,,ITP,Mid Exam,"import math
 def print_perfect_squares(n):
  print('Perfect square numbers from {} to {} are : '.format(1,n))
  for i in range(1,n+1):
  sq= math.sqrt(i)
  if sq - math.floor(sq) == 0:
   print(i,end=' ') 
  
 n = int(input(""Enter a number: ""))
 print_perfect_squares(n)"
"Write a program that generates and prints a list of 20 random numbers from 1 through 1000 preferebly using list comprehension. Then print out how many even numbers are in the list preferebly using filter function. 
 (Hint: Import random package, use randint(startval,endval) function)
 Sample Input/Output:
 20 Random numbers between 1,1000: [56, 515, 570, 860, 277, 631, 259, 66, 991, 941, 862, 776, 690, 728, 321, 540, 674, 297, 151, 89]
  
 List of Even numbers from the list of 20 random numbers: [56, 570, 860, 66, 862, 776, 690, 728, 540, 674]
  
 count of even numbers : 10",17,Medium,list comprehension,,ITP,Mid Exam,"## more marks can be awarded if student is using list comprehension and filter function
  
 import random
  
 random_list= [random.randint(1,1000) for a in range(20)]
  
 print('20 Random numbers between 1,1000:')
  
 print(random_list)
  
 even_no = list(filter(lambda x:x%2 == 0,random_list))
 print('\nList of Even numbers from the list of 20 random numbers:')
 print(even_no)
  
 print('\ncount of even numbers : ', len(even_no))"
"Write a program that asks the user for a month number and the print out the month name associated with that number (where 1 is January, 2 is February, etc.). Do this in three ways?
 (a) Using 12 if statements
  
 (b) Using lists
  
 (c) Using dictionary
  
 Sample Input/Output:
  
 Enter a month number: 8
 Part a: Using if Statements
  
 Month is August
  
 Part b: Using lists
  
 Month is August
  
 Part c: Using Dictionary
  
 Month is August",25,Medium,Statements,,ITP,Mid Exam,"n = int(input(""Enter a month number: ""))
  
 print('Part a: Using if Statements')
 print('Month is ',end='')
  
 if n == 1:
  print('January')
 elif n == 2:
  print('February')
 elif n == 3:
  print('March')
 elif n == 4:
  print('April')
 elif n == 5:
  print('May')
 elif n == 6:
  print('June')
 elif n == 7:
  print('July')
 elif n == 8:
  print('August')
 elif n == 9:
  print('Sepetember')
 elif n == 10:
  print('October')
 elif n == 11:
  print('November')
 elif n == 12:
  print('December')
  
  
  
  
 print('\n\nPart b: Using lists')
  
 month_names = ['January','February','March','April','May','June','July','August','September','October','November','December']
 print('Month is ',month_names[n-1])
  
  
 print('\n\nPart c: Using Dictionary')
  
 month_dict = {1: 'January',2: 'February',3:'March',4:'April',
  5:'May',6:'June',7:'July',8:'August',9:'September',
  10:'October',11:'November',12:'December'}
  
 print('Month is ',month_dict[n])"
"Write a function called reverse_only_letters() that takes a string and returns a new string where all the positions of all the alphabets have been reversed, but all other special characters are kept as it is in the position. (17 MARKS)
 Sample Input/Output:
  
 Sample1:
  
 Enter a string: ab$c@d*ef
  
 New string : fe$d@c*ba
  
 Sample2:
  
 Enter a string: ABC#E$F$G*X%Z
  
 New string : ZBX#G$F$E*C%A",25,Medium,Functions,,ITP,Mid Exam,"def reverse_only_letters(s):
  list_s = list(s)
  for pos in range(len(list_s)//2):
  a = pos
  b = -(pos+1)
  if (list_s[a].isalpha()) and (list_s[b].isalpha()):
  list_s[b],list_s[a] = list_s[a],list_s[b]
  s = ''.join(list_s)
  return s 
  
  
  
  
  
 s = input('Enter a string: ')
 new_s = reverse_only_letters(s)
 print('New string : ',new_s)"
What are the differences between the lambda and def? Give syntactical structures of both,8,Easy,,,ITP,Mid Exam,"* Def can hold multiple expressions while lambda is a uni-expression function.
 * Def generates a function and designates a name to call it later. Lambda forms a function object and returns it.
 * Def can have a return statement. Lambda can’t have return statements.
 * Lambda is used get used inside a list and dictionary.
 * Lambda can be used with map, reduce and filter to process the data containers
 * Syntactical structure of def
 def fuction_name(arguments):
  function body
  optional return statement
  
 * Syntactical structure of lambda
 lambda arguments: expression"
Explain Break and continue statements with examples,8,Easy,,,ITP,Mid Exam,"In Python, break and continue statements can alter the flow of a normal loop.
  
 Loops iterate over a block of code until the test expression is false, but sometimes we wish to terminate the current iteration or even the whole loop without checking test expression.
  
 The break and continue statements are used in these cases.
  
 **The break statement** terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.
  
 If the break statement is inside a nested loop (loop inside another loop), the break statement will terminate the innermost loop."
"The Body Mass Index, BMI, is calculated as, 703∗(𝑊/𝐻2) where W is the person’s weight in pounds and H is the person’s height in inches. Write a program that asks the user for their height , weight and prints out their BMI and Weight class based on BMI. (8 Marks)
 Use classification given below:
  
 “Under weight: BMI <18.5”
  
 “Healthy weight: BMI 18.5–24”
  
 “Overweight: BMI 25–29.9”
  
 “Obese: BMI >30”
  
 Sample Input/Output:
  
 Enter your weight in pounds: 125
  
 Enter your height in inches: 68
  
 Your BMI is: 19.004
  
 Healthy Weight",17,Medium,Statements,,ITP,Mid Exam,"W = int(input('Enter your weight in pounds: '))
 H = int(input('Enter your height in inches: '))
  
 bmi= 703 * (W/ H**2)
  
 print('Your BMI is: %.3f'%bmi)
  
 if bmi >= 30:
  print('Obese')
 elif bmi>= 25 and bmi < 30:
  print('Overweight')
 elif bmi>= 18.5 and bmi < 25:
  print('Healthy Weight')
 else:
  print('Under weight')"
"Write a program for temperature conversion. Take input from user for a temperature. Then ask user what units, Celsius or Fahrenheit, the temperature is in. Your program should convert the temperature to the other unit. 
 The conversions are
 F = 9/5 * C + 32 and C = 5/9 * (F - 32)
 Sample Input/Output:
 Enter Temperature: 34
  
 Enter unit : Celsius or Fahrenheit? Celsius
  
 34 degree Celsius is 93.2 degree Fahrenheit",17,Medium,Statements,,ITP,Mid Exam,"t = int(input(""Enter Temperature: ""))
 unit = input(""Enter unit : Celsius or Fahrenheit? "")
 if unit.lower() == 'celsius':
  F = (9/5) * t + 32
  print('{0} degree Celsius is {1} degree Fahrenheit'.format(t,F))
 else:
  C = 5/9 * (t - 32)
  print('{0} degree Fahrenheit is {1} degree Celsius'.format(t,C))"
"To convert from inches to centimeters, the conversion is to multiply by 2.54. To convert from inches to meters, the conversion is to multiply by .0254. To convert from inches to feet, the conversion is to multiply by 1/12. To convert from inches to yards, the conversion is to multiply by 1/36. Write program that creates a dictionary whose keys are cm, m, ft and yd and whose values are these conversion factors. Then ask the user to enter a value in inches and the unit (abbreviation) that they want to convert to. Use the dictionary to do the conversion and print out the result. 
 Sample Input/Output:
  
 Enter inches : 10
  
 Enter conversion unit: cm
  
 10 Inches converted to 25.4 cm",17,Medium,,,ITP,Mid Exam,"convert_d= {'cm':2.54,'m':0.0254,'ft':1/12,'yd':1/36}
  
 inches = int(input('Enter inches : '))
  
 conv_factors = input('Enter conversion unit: ').lower()
  
 ans = inches * convert_d[conv_factors]
  
 print(""{0} Inches converted to {1} "".format(inches,ans) + str(conv_factors))"
"Write a program that asks the user to enter a string of at least six characters. Then print out the following: 
 (a) The string backwards
  
 (b) Every character of the string except the last one
  
 (c) Every character of the string except the first and last
  
 (d) If the string contains a lowercase a, print out the index of the first a. Otherwise say that there is no lowercase a
  
 (e) The string in all caps
  
 (f) The string with every space replaced with an underscore",17,Medium,Statements,,ITP,Mid Exam,"#str1 = input('Enter a string: ')
 str1= 'great learning'
 print('a. The string backwards: ', str1[::-1])
 print('b. Every character of the string except the last one: ', str1[:-1:])
 print('c. Every character of the string except the first and last: ', str1[1:-1:])
 print('d. ',end= '')
 if 'a' in str1:
  print('index of lowercase a is : ',str1.index('a'))
 else:
  print('there is no lowercase a')
  
 print('e. The string in all caps ', str1.upper())
 print('f. The string with every space replaced with an underscore ', str1.replace(' ','_'))"
What is the difference between a list and an array?,8,Easy,,,NPV,Mid Exam,"Arrays and lists are both used in Python to store data, but they don't serve exactly the same purposes.
  
 They both can be used to store any data type (real numbers, strings, etc), and they both can be indexed and iterated through, but the similarities between the two don't go much further.
  
 The main difference between a list and an array is the functions that you can perform to them."
What is the difference between numpy and pandas,8,Easy,,,NPV,Mid Exam,"The Pandas module mainly works with the tabular data, whereas the NumPy module works with the numerical data.
  
 The Pandas provides some sets of powerful tools like DataFrame and Series that mainly used for analyzing the data, whereas in NumPy module offers a powerful object called Array.
  
 Instacart, SendGrid, and Sighten are some of the famous companies that work on the Pandas module, whereas NumPy is used by SweepSouth.
  
 The performance of NumPy is better than the NumPy for 50K rows or less.
  
 NumPy library provides objects for multi-dimensional arrays, whereas Pandas is capable of offering an in-memory 2d table object called DataFrame.
  
 NumPy consumes less memory as compared to Pandas."
"### Answer the below questions
  
 1.A) Rename the columns into ['date', 'state','country',lat',long','confirmed','deaths','recovered'] and create new columns called ""active"" = confirmed - deaths - recovered (4 Marks)
  
 1.B) Create a new columns Day and Hour using the Last Update column. (4 Marks)",8,Easy,,,NPV,Mid Exam,"### 1.A) Rename the columns into ['date', 'state','country',lat',long','confirmed','deaths','recovered'] and create new columns called ""active"" = confirmed - deaths - recovered (4 Marks)
  
 df.rename(columns={'ObservationDate': 'date', 
  'Province/State':'state',
  'Country/Region':'country',
  'Lat':'lat', 'Long':'long',
  'Confirmed': 'confirmed',
  'Deaths':'deaths',
  'Recovered':'recovered'
  }, inplace=True)
 df['active'] = df['confirmed'] - df['deaths'] - df['recovered']
  
 ### 1.B) Create a new columns Day and Hour using the Last Update column. (4 Marks)
  
 df['Last Update'] = pd.to_datetime(df['Last Update'])
 df['Day'] = df['Last Update'].apply(lambda x:x.day)
 df['Hour'] = df['Last Update'].apply(lambda x:x.hour)"
"Read the dataset covid_19_data_GL.csv and follow the required the below all steps for plotting. 
 Step1: Create a data frame for the top 10 countries that have the most confirmed cases. (8 Marks)
  
 Step2: Display the bar plot using the top 10 data frame. (4 Marks)
  
 Step3: In the bar-plot, visualize the count of confirmed cases (5 Marks)",17,Medium,,,NPV,Mid Exam,"**Step1:** Create a data frame for the top 10 countries that have the most confirmed cases. (8 Marks)
  
 **Step2:** Display the bar plot using the top 10 data frame. (4 Marks)
  
 **Step3:** In the bar-plot, visualize the count of confirmed cases (5 Marks)
  
 top = df[df['date'] == df['date'].max()]
 top_casualities = top.groupby(by = 'country')['confirmed'].sum().sort_values(ascending = False).head(10).reset_index()
 top_casualities
  
 plt.figure(figsize= (18,8))
 plt.xticks(fontsize = 15)
 plt.yticks(fontsize = 15)
 plt.xlabel(""Total cases"",fontsize = 15)
 plt.ylabel('Country',fontsize = 15)
 plt.title(""Top 10 countries having most confirmed cases"" , fontsize = 15)
 ax = sns.barplot(x = top_casualities.confirmed, y = top_casualities.country)
 for i, (value, name) in enumerate(zip(top_casualities.confirmed,top_casualities.country)):
  ax.text(value, i-.05, f'{value:,.0f}', size=10, ha='left', va='center')
 ax.set(xlabel='Total cases', ylabel='Country')"
"Read the dataset covid_19_data_GL.csv and follow the required the below all steps for plotting.
 Step1: Create a separate data frame called rate by using the group by method ('country')['recovered', 'deaths', 'confirmed'] (4 Marks)
  
 Step2: Create a new column called ""recovery percentage"" by using the formula (['recovered'] / ['confirmed'])*100 (4 mark)
  
 Step3: Create a another new column called ""death percentage"" by using the formula (['deaths'] / ['confirmed'])*100 (4 mark)
  
 Step4: Create another data frame called Mortality using group by method ('country')['death percentage'] (4 marks)
  
 Step5: Display the top 10 countries having most mortality rate using the barplot. (4 marks)
  
 Step6: Bar plot need to show each countries mortality rate count (5 Marks)",25,Hard,,,NPV,Mid Exam,"Read the dataset covid_19_data_GL.csv and follow the required the below all steps for plotting.
 Step1: Create a separate data frame called rate by using the group by method ('country')['recovered', 'deaths', 'confirmed'] (4 Marks)
  
 Step2: Create a new column called ""recovery percentage"" by using the formula (['recovered'] / ['confirmed'])*100 (4 mark)
  
 Step3: Create a another new column called ""death percentage"" by using the formula (['deaths'] / ['confirmed'])*100 (4 mark)
  
 Step4: Create another data frame called Mortality using group by method ('country')['death percentage'] (4 marks)
  
 Step5: Display the top 10 countries having most mortality rate using the barplot. (4 marks)
  
 Step6: Bar plot need to show each countries mortality rate count (5 Marks)
  
 rate = top.groupby(by = 'country')['recovered','confirmed','deaths'].sum().reset_index()
 rate['recovery percentage'] = round(((rate['recovered']) / (rate['confirmed'])) * 100 , 2)
 rate['death percentage'] = round(((rate['deaths']) / (rate['confirmed'])) * 100 , 2)
 rate.head()
  
 mortality = rate.groupby(by = 'country')['death percentage'].sum().sort_values(ascending = False).head(10).reset_index()
 mortality
  
 plt.figure(figsize= (18,8))
 plt.xticks(fontsize = 15)
 plt.yticks(fontsize = 15)
 plt.xlabel(""Total cases"",fontsize = 15)
 plt.ylabel('Country',fontsize = 15)
 plt.title(""Top 10 countries having most mortality rate"" , fontsize = 15)
 ax = sns.barplot(x = mortality['death percentage'], y = mortality.country)
 for i, (value, name) in enumerate(zip(mortality['death percentage'], mortality.country)):
  ax.text(value, i-.05, f'{value:,.0f}', size=10, ha='left', va='center')
 ax.set(xlabel='Mortality Rate in percentage', ylabel='Country')"
What are the different types Of data structures in Pandas?,8,Easy,,,NPV,Mid Exam,"Pandas has mainly two data structures
  
 Series
 DataFrame
 Both of which are built on top of NumPy. Series is one dimensional homogenous array. And Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes.
  
 Series:
 Series is a one-dimensional object similar to an array, list, or column in a table. It will assign a labeled index to each item in the Series.
  
 Data Frame:
 A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components, the data, rows, and columns."
"


What are the different techniques for filling missing values in data. Explain different techniques for both Numerical and Categorical data.


",8,Easy,,,EDA,Mid Exam,"If the null value percentage is more than 70%/80% we can drop the variable
Numerical Variable:

We can fill with mean or median: We fill with either mean or meadian if the null values are around 5%-10%
Mean: We generally fill with the mean when the distribution is normal 
Median: If the distribution is skewed we fill with median
If the null values are more than 10% we should impute the null values on the basis of analysis of other variables if they can be grouped and filled
KNN IMPUTER is one more and most of the time the best way of filling null values 
    
Categorical variable:
Following the same percentage rule we can fill 5-10% null values with the mode
To maintain the ratio of the categories we can use ffil and bfill also for filling null values
"
"Read the ObesityDataSet.csv file and answer the following questions-

A)Plot a graph to show the relationship between Gender and the Obesity levels(NObeyesdad).Provide Inference on the same. (5 marks)
B)Age column has values in float , round them off and covert it into int type. Show how does the Age affects the target using a plot or show the average age of samples in different weight categories(NObeyesdad) (5 marks)
C)Check if there are any outliers in any numerical columns: AGE, Height, Weight (2 Marks)
D)Answer the following questions using any kind of analysis of the data?(5 Marks)
    
    1.Does eating high caloric food frequently leads to obesity?
    2.Does keeping a track of your calories prevents you to fall in obese category?
    3.Does drinking alcohol makes you fall in obese category?
",17,Medium,,,EDA,Mid Exam,"
 ### Read the dataset and answer the below questions

import matplotlib.pyplot as plt
import random
import pandas as pd
import numpy as np
import seaborn as sns

df=pd.read_csv('ObesityDataSet.csv') 
df.head()
#### a) Plot a graph to show the relationship between Gender and the Obesity levels(NObeyesdad).Provide Inference on the same. (5 marks)
df.Gender.value_counts()

# a.)
Gender_vs_Obesitylevels = pd.crosstab(index=df[""NObeyesdad""], columns=df[""Gender""], normalize='columns')
print(Gender_vs_Obesitylevels)
Gender_vs_Obesitylevels.plot.bar()

We can observe that:
    1) Maximum proportion of Females are Obesity_TypeIII
    2) Maximum proportion of Males are Obesity_TypeII
    3) Normal weight category has an equal proportions of male and females
    4) Very less proportion of males are insuffucient weights

#### b) Age column has values in float , round them off and covert it into int type. Show how does the Age affects the target using a plot or show the average age of samples in different weight categories(NObeyesdad) (5 marks)

df['Age']=df.Age.round().astype('int64')
df['Age'].unique()
df_age_Noobeyesdad = df[['Age','NObeyesdad']].copy()
df_age_Noobeyesdad['NObeyesdad']=df_age_Noobeyesdad['NObeyesdad'].map({'Normal_Weight':1, 'Overweight_Level_I':2, 'Overweight_Level_II':3,\
       'Obesity_Type_I':4, 'Insufficient_Weight':0, 'Obesity_Type_II':5,\
       'Obesity_Type_III':6})
df_age_Noobeyesdad['NObeyesdad'].unique()

print(df_age_Noobeyesdad.corr())
sns.heatmap(df_age_Noobeyesdad.corr(),annot=True)
plt.show()
sns.barplot(data=df, x='NObeyesdad', y='Age')
plt.xticks(rotation=45)
print(df.Age.max())
print(df.Age.min())

We can observe that average age of people around 28 are Obesity_Type_II
We can observe that average age of people around 19(lower in age) are Insufficient Weight
df['Height'].max()

#### c) Check if there are any outliers in any numerical columns: AGE, Height, Weight (2 Marks)

for i in df:
    if (i =='Age') or (i=='Height') or (i=='Weight'):
        sns.boxplot(df[i])
        plt.show()
We can observe that there are outliers in all the three columns.
Age has many outliers: so ages between 35-65 lie in the outlier range
Weight has 1 outlier: ie weight abover 160
Height also has 1 outlier that is hieght above 1.97 metres

#### d) Answer the following questions using any kind of analysis of the data?(5 Marks)
    
    -> Does eating high caloric food frequently leads to obesity?
    -> Does keeping a track of your calories prevents you to fall in obese category?
    -> Does drinking alcohol makes you fall in obese category?

#d) 1)
df.groupby('NObeyesdad')['FAVC'].value_counts(1)
df['FAVC'].value_counts()

So looking at the results above we can see that eating high caloric food can lead to obesity but we can also see that people with normal weight and insufficient weight eat high caloric food. Therefor only eating high caloric food may not be the sole reason to be obese 

#d 2)
df.groupby('NObeyesdad')['SCC'].value_counts(1)

#So yes we can observe that keeping a calorie count compared to not keeping a calorie count matters as people in normal weight and overweigh 1 do keep a count of their calories

#d 3)
df['CH2O']=df['CH2O'].astype('int64')
df.groupby('NObeyesdad')['CH2O'].value_counts(1)
# df['SMOKE']=df['SMOKE'].astype('int64')
df.groupby('NObeyesdad')['CALC'].value_counts(1)

 So even drinking alcohol can contribute as 99% of obesetype 3 dring alcohol occasionally. Whereas in normal and insufficient weights we have more percentage of people not drinking alcohl compared to 1% in obese category
"
"What is the difference between transformation and scaling the data. Explain the different types of transforming and scaling techniques.

",8,Medium,,,EDA,Mid Exam,"#### Transformation: The overall goal of transforming our data is to create a more normal distribution (a bell curve). In general, normal distributions tend to produce better results in a model because there are about equal observations above and below the mean and the mean and median are the same. Some models run under the assumption your data is normally distributed.

#### Transformations always change the distribution of the data.
    There are different ways we can do transformations:
        If the data is positive-skewed, 
            1.) log transformation 
            2). Square root transfromation 
        can be good ways to make them behave in the normal distribution, and 
        Whereas, if the data is negative-skewed, 
            1.) exponential transformation like square, cube
        helps in transforming them into a normal distribution.
    
    
#### Scaling: The goal of scaling is to transform features to be on a similar scale. This improves the performance and training stability of the model.
#### Scaling the data does not change the distribution of the data

    Different ways of scaling techniques are:
        1) Standard Scaler(standization): This scaler helps in making a normal distribution in standard normal distribution where the mean is represented by 0 and the standard deviation is represented by 1.A value is standardized as follows: 
                        y = (x – mean) / standard_deviation
        2) MinMax Scaler(normalization) :This scales down the data between 0 and 1 range where minimum value corresponds to 0 and maximum was 1
If the distribution of the quantity is normal, then it should be standardized, otherwise, the data should be normalized. Standardization can give values that are both positive and negative centered around zero. It may be desirable to normalize data after it has been standardized.
    
"
"Read the ObesityDataSet.csv file and answer the following questions-

a) Divide the Age into 5 bins such that now there will be 3 categories of ages with labels as Young, middle aged and old.(5 marks)
Make a new column Age_Groups.(2 mark)
Provide inference on how the Age_groups are distributed with respect to the target, also use to aplot to show the relationship.(3 marks)
b)Now for each categorical variable do appropriate 'encodings' for the same and give reasons for selecting the respective encoding technique(10 marks)
c)Create bar plots to visualize the relationship of the features on the basis of the variable 'NOObeyesdad',  with family_history_with_overweight,FAVC,FCVC,NCP,CAEC,SMOKE,CH2O,SCC,FAF,TUE,CALC,MTRANS.State your observations (5 MARKS)
",25,Medium,,,EDA,Mid Exam,"pd.cut(df['Age'], bins=3, labels = ['young', 'middle aged', 'old'])
df['Age_Groups']= pd.cut(df['Age'], bins=3, labels = ['young', 'middle aged', 'old'])
sns.countplot(x=df['NObeyesdad'],hue=df['Age_Groups'])
plt.xticks(rotation=45)
plt.show()

We can observe that max Obese type 1,2 are young
Most of the middle aged people have insuffiecient weight
old people are not obese

Qb)Now for each categorical variable do appropriate 'encodings' for the same and give reasons for selecting the respective encoding technique(10 marks)
df.info()
df_cat = df.select_dtypes(include = 'object')
df_cat.head()

#There are two kinds of encodings that can be applied on categorical variables:

        a) If the feature is ordinal in nature we should apply label encoding
        b) Else if the there is no order we should apply one hot encoding
        
We can observe that Gender, Mtrans has no order hence we apply one hot encoding for them

Whereas for the others as we see order we will apply label encoding
(Students can apply one hot on variables having yes , no)
pd.get_dummies(df_cat[['Gender','MTRANS']])
df_cat=pd.concat((df_cat,pd.get_dummies(df_cat[['Gender','MTRANS']])), axis=1).drop(['Gender','MTRANS'],axis=1)
df_cat.head()
df_cat['family_history_with_overweight']=df_cat['family_history_with_overweight'].map({'yes':1,'no':0})
df_cat['FAVC']= df_cat['FAVC'].map({'yes':1,'no':0})
df_cat['SMOKE']= df_cat['SMOKE'].map({'yes':1,'no':0})
df_cat['SCC']= df_cat['SCC'].map({'yes':1,'no':0})
df_cat['CAEC'].unique()
df_cat['CAEC']= df_cat['CAEC'].map({'no':0,'Sometimes':1,'Frequently':2, 'Always':3})
df_cat['CAEC'].unique()
df_cat['CALC'].unique()
df_cat['CALC']= df_cat['CALC'].map({'no':0,'Sometimes':1,'Frequently':2, 'Always':3})
df_cat['CALC'].unique()
df_cat['NObeyesdad'].unique()

# Underweight: Less than 18.5
# Normal 18.5 to 24.9
# Overweight 25.0 to 29.9
# Obesity I 30.0 to 34.9
# Obesity II 35.0 to 39.9
# Obesity III Higher than 40Table

df_cat['NObeyesdad']= df_cat['NObeyesdad'].map({'Normal_Weight':1, 'Overweight_Level_I':2, 'Overweight_Level_II':3,\
       'Obesity_Type_I':4, 'Insufficient_Weight':0, 'Obesity_Type_II':5,\
       'Obesity_Type_III':6})
df_cat['NObeyesdad'].unique()

df_cat.head()

##### c. Create bar plots to visualize the relationship of the features on the basis of the variable 'NOObeyesdad',  with family_history_with_overweight,FAVC,FCVC,NCP,CAEC,SMOKE,CH2O,SCC,FAF,TUE,CALC,MTRANS.State your observations (5 MARKS)

df.head()
df_new = df.loc[:,'family_history_with_overweight':'NObeyesdad']
df_new.head()
df_new.info()
for i in df_new:
    if df[i].dtype=='float64':
        print(i)
        df_new[i]= df_new[i].astype('int64')
df_new.info()

## Generating 3*4 matrix of box plots
fig, axes = plt.subplots(3, 4, figsize = (15,15))
axes = axes.flatten()
for i in range(0,len(df_new.columns)-1):
    pd.crosstab(index=df[""NObeyesdad""], columns=df_new.iloc[:,i], normalize='columns').plot.bar(ax=axes[i])

#     sns.boxplot(x=""NOobeyesdad"", y=df_new.iloc[:,i], data=df_new, orient='v', ax=axes[i])
#fig.delaxes(axes[1,1])
plt.tight_layout()
plt.show()"
"Read the aw_fb_dataset dataset and do the below following questions:

A) Draw a Countplot for activity column and piechart for the devices used for checking the activity.(2 Marks)
B) Split the Dataset into Train and Test. Also give us the reason behind your split. Assume activity column to be the target (2 Marks)
C) How does the distribution of the 'age', 'height' and 'weight' column look like and justify your results using metrics? (3 Marks)
D) Separate categorical data and numerical data also each category number of percentages.(3 Marks)
E) How do you handle object variables in this dataset? Write down the code for encoding all the object variables and the reason for selecting the same encoding type? (4 Marks)
F) Give inferences as to how is the height , weight and steps related with the activity using respective plots.(3 marks) 



",17,Medium,,,EDA,Mid Exam,"df = aw_fb_data
df.head()
#### A) Draw a Countplot for activity column and piechart for the devices used for checking the activity.(2 Marks)

# A)
sns.countplot(x=""activity"", data=df)
plt.xticks(rotation=45)
plt.show()
plt.pie(df['device'].value_counts(1), labels = df['device'].value_counts(1).index, autopct='%1.1f%%' )plt.show()

# We can observe that maximum samples in the data lie in Lying category.
# And more percentage of samplesa are using apple watch compared to fitbit
#### 2.B) Split the Dataset into Train and Test. Also give us the reason behind your split. Assume activity column to be the target (2 Marks)from sklearn.model_selection import train_test_split
X=df.drop(['activity'],axis=1)
y=df.activity
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size = 0.3, random_state=100, stratify=y)
y_train.value_counts(1)
y_test.value_counts(1)
df.shape
X_train.shape
We have used the train test split to split the data intp 70% -30% as it gives us enough data to train and test both. Also keeping stratify= Y helps in having a balanced ratio of labels in the train set.
#### .C) How does the distribution of the 'age', 'height' and 'weight' column look like and justify your results using metrics? (3 Marks)
from scipy import stats
l = ['age', 'height', 'weight']
for i in l:
    sns.distplot( df[i])
    plt.show()
    print('Skewness:',df[i].skew())
    print('Kurtosis:', df[i].kurt())
    
# We can observe that for all the cases the distribution is not normal
#### D) Separate categorical data and numerical data also each category number of percentages.(3 Marks)
cat_cols = df.select_dtypes(include = 'object')
num_cols = df.select_dtypes(include = np.number)
print('Continuous variables are : ',num_cols.columns)
print('Categorical Columns are : ',cat_cols.columns)
print('% Values in each categorical columns')
for i in cat_cols.columns:
    print('\n% Values in column ',i)
    print((df[i].value_counts(1)))

#### E) How do you handle object variables in this dataset? Write down the code for encoding and the reason for selecting the same encoding type? (4 Marks)
df.head()
#There are two kinds of encodings that can be applied on categorical variables:
 a) If the feature is ordinal in nature we should apply label encoding
 b) Else if the there is no order we should apply one hot encoding
 We can observe that there are 3 categorical variables: gender, device and activity 
Gender is already encoded. Device has no order hence we apply one hot encoding for it.

Whereas for the activity as we see order we will apply label encoding
pd.get_dummies(cat_cols['device'])
cat_cols=pd.concat((cat_cols,pd.get_dummies(cat_cols['device'])), axis=1).drop('device',axis=1)
cat_cols.head()
cat_cols.activity.value_counts()
cat_cols['activity']= cat_cols['activity'].map({'Lying':0,'Sitting':1,'Self Pace walk':2, 'Running 3 METs':3, 'Running 5 METs':4, 'Running 7 METs':5})
cat_cols['activity'].unique()
cat_cols.head()
#### .F) Give inferences as to how is the height , weight and steps related with the activity using respective plots.(3 marks) 
l= ['height', 'weight', 'steps']
for i in l:
    sns.barplot(df['activity'],df[i])
    plt.xticks(rotation=45)
    plt.show()

We can observe that avg weight and height for all the level of activities is similar.
We can observe the average steps of the activities but cannot compare them with each other as the number of samples in each activity is different
"
"Read the dataset(BEML.csv) answer the questions below
    
A)Create new columns by splitting the date column into Day,Month and Year ?(5 Marks)
B)What was the highest daily swing(highest price - lowest price) in the price ?(5 Marks)
C)Check the distribution of the close price ? What type of transformation can be applied ?(5 Marks)
D) Check for outliers and how to treat them ? (5 Mark)
E) Check if there is correlation between the variables and write down your observations. Looking at the correlations can you decide as which columns are providing similar information and which other columns you feel can be removed according to their importance. (5 marks)
",25,Medium,,,EDA,Mid Exam,"data = BEML
print(data.shape)
data.head()

#### A) Create new columns by splitting the date column into Day,Month and Year ?(5 Marks)
import datetime
data['year'] = pd.DatetimeIndex(data['Date']).year
data['month'] = pd.DatetimeIndex(data['Date']).month
data['day'] = pd.DatetimeIndex(data['Date']).day
data.head()
#### B)What was the highest swing in the price for every month ?(5 Marks)
Note : Daily Swing = High - Low 
data['Swing']=data['High']-data['Low']
data[data.month==1].max()
data.groupby('month')['Swing'].nlargest(1)

#### C)Check the distribution of the close price ? What type of transformation can be applied ?(5 Marks)
sns.distplot( data['Close']);
Box-Cox Transformation
from scipy import stats
data['Close'], lmda = stats.boxcox(data['Close'])
pd.Series(data['Close']).hist()
plt.show()

Square Root Transformation 
pd.Series(np.sqrt(data['Close'])).hist()
plt.show()

Log Tranformation 
pd.Series(np.log1p(data['Close'])).hist()
plt.show()

#### D) Check for outliers and how to treat them ? (5 Mark)
data_num =data.select_dtypes(include = np.number)
for i in data_num:        sns.boxplot(data_num[i])
        plt.show()
Outliers are present 
Outlier removal cam be using Z Score
data_num.shape
from scipy import stats
z = np.abs(stats.zscore(data_num))
print(z)
numeric = data_num[(z < 3).all(axis=1)]
numeric.shape

#Students can also use interquartile range and capping for removal.
#But this will remove many outliers
1739-1658

#### E) Check if there is correlation between the variables and write down your observations. Looking at the correlations can you decide as which columns are providing similar information and which other columns you feel can be removed according to their importance. (5 marks)

import matplotlib.pyplot as plt
import seaborn as sns
correlations = df.corr()
fig = plt.figure(figsize=(12, 10))
sns.heatmap(correlations, annot=True, cmap='GnBu_r', center=1)
plt.show()
"
"What are different techniques of Outlier Detection and treatment of outliers?

",8,Easy,,,EDA,Mid Exam,"Outliers : Anomalies, or outliers, can be a serious issue when training machine learning algorithms or applying statistical techniques. They are often the result of errors in measurements or exceptional system conditions and therefore do not describe the common functioning of the underlying system. Indeed, the best practice is to implement an outlier removal phase before proceeding with further analysis.

In some cases, outliers can give us information about localized anomalies in the whole system; so the detection of outliers is a valuable process because of the additional information they can provide about your dataset.

There are two main techniques to detect and optionally remove outliers from a dataset. 
 1. Using IQR   

This is the simplest, nonparametric outlier detection method in a one dimensional feature space. Here outliers are calculated by means of the IQR (InterQuartile Range).
The first and the third quartile (Q1, Q3) are calculated. An outlier is then a data point xi that lies outside the interquartile range. 

Using the interquartile multiplier value k=1.5, the range limits are the typical upper and lower whiskers of a box plot.

2. Z-Score
Z-score is a parametric outlier detection method in a one or low dimensional feature space.
This technique assumes a Gaussian distribution of the data. The outliers are the data points that are in the tails of the distribution and therefore far from the mean. How far depends on a set threshold zthr for the normalized data points zi calculated with the formula:
zi = (xi - μ )/sigma(x)
where xi is a data point, μ is the mean of all xi and sigma(x) is the standard deviation of all xi.
An outlier is then a normalized data point which has an absolute value greater than zthr. That is:
zi > abs(zthr)
Commonly used zthr values are 2.5, 3.0 and 3.5.
"
"Read the dataset(dresses.csv) answer the questions below

A) Separate categorical data and numerical data also each category number of percentages.(3 Marks)
B) Replace '?' from the Dataset to NaN values (3 Marks)
C) There are some garbage and repetative entries in the columns like Price,Size,Season and sleevlength. use appropriate treatment to convert these columns to have unique and meaningfull classes. (5 Marks)
D) Draw a Countplot for Season column and plot piechart for price column. Write down the inference for the same(3 marks)
E) Calculate the number of dreeses available in different size in every price class.  plot the data using appropriate visualisation plot.Write down the inference for the same. (3 Marks)

    
",17,Medium,,,EDA,Mid Exam,"df = dresses
df.head(2)

#### .A) Separate categorical data and numerical data also each category number of percentages.(3 Marks)
cat_cols = df.select_dtypes(include = 'object')
num_cols = df.select_dtypes(include = np.number)
print('Continuous variables are : ',num_cols.columns)
print('Categorical Columns are : ',cat_cols.columns)
print('% Values in each categorical columns')
for i in cat_cols.columns:
    print('\n% Values in column ',i)
    print((df[i].value_counts(1)))

#### B) Find out the percentage of '?' values in each column and Replace '?' from the Dataset to NaN values (3 Marks)
(df=='?').sum()/df.shape[0]*100
# '?' replacing with np.NaN
df = df.replace('?',np.NaN)
#percentage of '?' values in each column after replacing with NaN
(df=='?').sum()/df.shape[0]*100

#### C) There are some garbage and repetative entries in the columns like Price,Size,Season and SleeveLength. use appropriate treatment to convert these columns to have unique and meaningfull classes. (5 Marks)

# Treatment for Price column
df['Price'] = df['Price'].str.lower().str.title()
df['Price'].value_counts()

# Treatment for Size column
df['Size'].value_counts()

df['Size'] = df['Size'].replace(['small','s'],['S','S'])
df['Size'].value_counts()
# Treatment for Season column
df['Season'].value_counts()
df['Season'] = df['Season'].replace(['Automn','summer','winter','spring'],['Autumn','Summer','Winter','Spring'])
df['Season'].value_counts()

# Treatment for Sleevlength column
df['SleeveLength'].value_counts()

df['SleeveLength'] = df['SleeveLength'].replace(['sleevless','sleeevless','sleveless','sleeveless'],['Sleeveless','Sleeveless','Sleeveless','Sleeveless'])
df['SleeveLength'] = df['SleeveLength'].replace(['thressqatar','threequater'],['threequarter','threequarter'])
df['SleeveLength'] = df['SleeveLength'].replace(['half','cap-sleeves','urndowncollor'],['halfsleeve','capsleeves','turndowncollor'])
df['SleeveLength'].value_counts()

#### D) Draw a Countplot for Season column and plot piechart for price column. Write down the inference for the same(3 marks)

df['Season'].value_counts().plot(kind='bar')
**Conclusion: The dataset has more dress collection of summer an winter dresses as compared to autumn collection**
plt.pie(df['Price'].value_counts(1), labels = df['Price'].value_counts(1).index, autopct='%1.1f%%' )
plt.show()
**Conclusion:Almost 50% dresses are in Average price category and 40% in low price category**

#### E) Calculate the number of dreeses available in different size in every price class.  plot the data using appropriate visualisation plot.Write down the inference for the same. (3 Marks)

pd.crosstab(df['Size'],df['Price'])
pd.crosstab(df['Size'],df['Price']).plot(kind='bar')
**Conclusion: Average priced dresses are more in Medium size category**
**Low priced dresses are more in free size category**
"
"Read the dataset(Product_sales.csv) answer the questions below
    
A) Create new columns by splitting the `Date` column into Day,Month and Year ?(5 Marks)
B) Create new column `Product_profit` from `Product_Price` and `Product_Cost` columns ?Check the distribution of the `Product_profit`. What inferences can be made about distribution of the `Product_profit` ? (5 Marks)
C) Use the appropriate plot to display product categories and the average profit in every product category. Display the plot in order of highest to profit to lowest.(5 Marks)
D) Make recommendations to the company about which products should be ordered and kept in inventory from the stock in hand and demand of the products.(5 Marks)
E) Check if there is correlation between the variables and write down your observations. Looking at the correlations can you decide as which columns are providing similar information and which other columns you feel can be removed according to their importance. (5 marks)
",25,Medium,,,EDA,Mid Exam,"
df=Product_sales
df.head(2)

#### A) Create new columns by splitting the `Date` column into Day,Month and Year ?(5 Marks)
df['Date'] = pd.to_datetime(df['Date'])
df['Day'] = df['Date'].dt.day
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year
df.head()
#### B) Create new column `Product_profit` from `Product_Price` and `Product_Cost` columns ?
#### Check the distribution of the `Product_profit`.
#### What inferences can be made about distribution of the `Product_profit` ? (5 Marks)
df['Product_Price'] = df['Product_Price'].str.strip('$').astype('float')
df['Product_Cost'] = df['Product_Cost'].str.strip('$').astype('float')
df['Product_profit'] = df['Product_Price'] - df['Product_Cost']
sns.distplot(df['Product_profit'])
plt.show()
print('Skewness : ',df['Product_profit'].skew())

**Conclusion: Distribution of 'Product_profit' column is not normal and is slightly positively skewed data**

#### C) Use the appropriate plot to display product categories and the average profit in every product category. Display the plot in order of highest to profit to lowest.(5 Marks)
data = pd.pivot_table(df,values = ['Product_profit'],index = ['Product_Category'])
data = data.sort_values(by='Product_profit',ascending = False).plot(kind='bar')

**Conclusion: Electronics items are making highest profits followed by toys**

#### D) Make recommendations to the company about which products should be ordered and kept in inventory from the stock in hand and demand of the products. (5 Marks)

# finding out products which has zero stock left in the inventory
zero_stock_products = df[df['Stock_On_Hand'] == 0]
zero_stock = zero_stock_products['Product_Name'].unique()
zero_stock

high_demanded_products = df.sort_values(by='Units',ascending =False).iloc[:50,:]
high_demand = high_demanded_products['Product_Name'].unique()
high_demand
np.intersect1d(zero_stock,high_demand)

**Conclusion: 'Action Figure', 'Animal Figures', 'Dino Egg','Mini Ping Pong Set' are highly demanded products with zero stocks are in hand. These products must be kept in inventory to have uninterrupted supply.**
#### E) Check if there is correlation between the variables and write down your observations. Looking at the correlations can you decide as which columns are providing similar information and which other columns you feel can be removed according to their importance. (5 marks)
correlations = df.corr()
fig = plt.figure(figsize=(12, 10))
sns.heatmap(correlations, annot=True, cmap='GnBu_r', center=1)
plt.show()

**Product Price and Product cost are highly positevely correlated with each other**
**There is no variability in year column since it has same value 2018 throughout it can be dropped**"
Explain how do you handle missing values in the data. Explain various techniques for continous (numerical) and discrete (categorical) variables.,8,Medium,,,EDA,Mid Exam,"If the null value percentage is more than 60-70% we can drop the variable
Numerical Variable:
We can fill the Nan values with mean or median: We fill with either mean or meadian if the null values are between 5%-10%
Mean: We fill na values  with the mean when the distribution is normal
Median: If the distribution is skewed we fill them with median
If the null values are more than 10% we should impute the null values on the basis of analysis of other variables if they can be grouped and filled
KNN IMPUTER is one more method to impute the null values, if the grouping of the observations can't be done properly.    
Categorical variable:
Following the same percentage rule we can fill 5-10% null values with the mode
To maintain the ratio of the categories we can use ffil and bfill also for filling null value"
"Read the dataset(data_set.csv) answer the questions below
    
A) Check if dataset is having any null values : (1 Mark)
B) Remove the columns ""Unnamed 0 and Unnamed 0.1"" from the data : (1 Mark)
C) Set the column 'Application ID' as index for the dataset : (1 Mark)
D) Plot a bar graph to check the distribution of Loan defaulter status. (1 Mark)
E) Create a new column ""Approved_Year"" of the loan using Approved_Timestamp and find in which year we have maximum loan approvals (5 marks)
F) Write a function to Normalize the column ""Gross_Apprv_Amount"" and statdardize the column ""Final Approved Amount"" and store the resultant columns in another dataframe . (8 marks)

",17,Medium,,,EDA,Mid Exam,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('data_set.csv')

#### A) Check if dataset is having any null values : (1 Mark)
#### B) Remove the columns ""Unnamed 0 and Unnamed 0.1"" from the data : (1 Mark)
#### C) Set the column 'Application ID' as index for the dataset : (1 Mark)
#### D) Plot a bar graph to check the distribution of Loan defaulter status. (1 Mark)
#### E) Create a new column ""Approved_Year"" of the loan using Approved_Timestamp and find in which year we have maximum loan approvals (5 marks)
#### F) Write a function to Normalize the column ""Gross_Apprv_Amount"" and statdardize the column ""Final Approved Amount"" and store the resultant columns in another dataframe . (8 marks)

df.head()
#### A) Check if dataset is having any null values : 1 Mark
df.isnull().sum()
#### B) Remove the columns ""Unnamed 0"" from the data : 1 Mark
df=df.drop(['Unnamed: 0'],axis=1)
#### C) Set the column 'Application ID' as index for the dataset : 1 Mark
df=df.set_index(['Application ID'])
df.head(2)
#### D) Plot a bar graph to check the distribution of Loan defaulters status. 1 mark
df['Default_Status'].value_counts().plot(kind='bar')
#### E) Create a new column ""Approved_Year"" of the loan using Approved_Timestamp and find in which year we have maximum loan approvals (5 marks)
df[""Approved_Timestamp""] = pd.to_datetime(df[""Approved_Timestamp""], dayfirst=True)
df[""Approved_Timestamp""]
df['Approved Year'] = df['Approved_Timestamp'].apply(lambda x: x.year)
df['Approved Year'].describe()
df['Approved Year'].value_counts(normalize=True)[:1]
We have maximum (16% of total)loans approved in the year 2011. 
#### F) Write a function to Normalize the column ""Gross_Apprv_Amount"" and statdardize the column ""Final Approved Amount"" and store the resultant columns in another dataframe . (8 marks)
df_new=pd.DataFrame()
x_min=min(df['Gross_Apprv_Amount'])
x_max=max(df['Gross_Apprv_Amount'])
def norm(i):
    n=((i-x_min)/(x_max-x_min))
    return n
df_new['Gross_Apprv_Amount']=df['Gross_Apprv_Amount'].apply(norm)
df_new['Gross_Apprv_Amount'].describe()
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
df_new['Final_Appved_Amount']=pd.DataFrame(sc.fit_transform(df[['Final_Appved_Amount']]),index=df.index)
df_new['Final_Appved_Amount'].describe()df_new.head(2)
"
"Read the dataset(data_set.csv) answer the questions below
    
A)Check if we have outliers in the dataset (3 Marks)
B)Using the subplot display the histogram and box plot of Final_Appved_Amount. (3 Marks) 
C)If the outliers are there in Final_Appved_Amount and data distribution is skewed. Apply the required trasnformation technique to reduce the variation that the outlier values cause in the data set. (3 Marks) 
D)Are there any outliers after transformation? Remove the outliers if required. (4 Marks)
E)Find the relationship between Numerical variables (2 marks)
F) Check Categorical variables in the dataset,and apply required encoding techniques on Bank Type, City or Rural, Documents Provided, Buisness Owner State and Bank State and specify reasons for selecting the respective encoding technique. (10 marks)
",25,Medium,,,EDA,Mid Exam,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('data_set.csv')

#### A)Check if we have outliers in the dataset (3 Marks)
#### B)Using the subplot display the histogram and box plot of Final_Appved_Amount. (3 Marks) 
#### C)If the outliers are there in Final_Appved_Amount and data distribution is skewed. Apply the required trasnformation technique to reduce the variation that the outlier values cause in the data set. (3 Marks) 
####  D)Are there any outliers after transformation? Remove the outliers if required. (4 Marks)
#### E)Find the relationship between Numerical variables (2 marks)
#### F) Check Categorical variables in the dataset,and apply required encoding techniques on Bank Type, City or Rural, Documents Provided, Buisness Owner State and Bank State and specify reasons for selecting the respective encoding technique. (10 marks)

#### A)Check if we have outliers in the dataset (3 Marks)

df_numeric=df.select_dtypes('number')
for i in df_numeric:
    sns.boxplot(df_numeric[i])
    plt.show()

Here, with boxplots we get to know that we have many outliers in various features.
#### B)Using the subplot display the histogram and box plot of Final_Appved_Amount. (3 Marks) 
fig, ax = plt.subplots(1, 2, figsize=(18,8))
sns.distplot(df['Final_Appved_Amount'], hist=False,kde = True, ax=ax[0], color = 'red', hist_kws={'edgecolor':'black'})
ax[0].set_title(' Final Approved Amount',fontsize=14)
sns.boxplot(y=df['Final_Appved_Amount'], ax=ax[1])
ax[1].set_title('Box plot of Final Approved Amount',fontsize=14)
plt.ylim(0,50000)

We can see that, we can't check the boxplot of Final Approved Amount,as the data is highly skewed, we need to perform some transformation technique here, lets apply Log Transformation

#### C) If the outliers are there in Final_Appved_Amount and data distribution is skewed. Apply the required trasnformation technique to reduce the variation that the outlier values cause in the data set. (3 Marks) 

df['Final_Appved_Amount_log'] = np.log(df['Final_Appved_Amount'])
fig, ax = plt.subplots(1, 2, figsize=(18,8))
sns.distplot(df['Final_Appved_Amount_log'], hist = True, kde = True, bins = 15, ax=ax[0], color = 'red', 
             hist_kws={'edgecolor':'black'})
ax[0].set_title('Distribution of Approved Amount Normalized',fontsize=14)
sns.boxplot(y=df['Final_Appved_Amount_log'], ax=ax[1])
ax[1].set_title('Box plot of Approved Amount (Normalized)',fontsize=14)

#### D)Are they any outliers after transformation? Remove the outliers if required. (5 Marks)
After normalizing the Approved amount follows a normal distribution
From the box plot, we can visualize there are still few outliers which are above upper whisker and below lower whiskers.
There are various thumb rules to detect outliers. Some of them are:
Any value, which is beyond the range of +/-1.5 times IQR or +/-3 times IQR. IQR is interquartile range i.e Q3 - Q1.
Use capping methods. Any value which out of range of 1st and 99th percentile can be considered as outlier
Data points, three or more standard deviation away from mean are considered outlier
df.shape
Q1 = df['Final_Appved_Amount_log'].quantile(0.25)
Q3 = df['Final_Appved_Amount_log'].quantile(0.75)
Q2= df['Final_Appved_Amount_log'].quantile(0.50)
IQR = Q3 - Q1
Approved_amount_accept=df[(df['Final_Appved_Amount_log'] >= (Q1 - 1.5 * IQR)) & (df['Final_Appved_Amount_log'] <= (Q3 + 1.5 * IQR))]
Approved_amount_accept.shape
From above, we can infer there are no outliers in Approved Amount.
#### E)Find the relationship between Numerical variables (2 marks)
df.columns
plt.figure(figsize=(25,10))
sns.heatmap(df.corr(),annot=True,linewidths=0.1,vmax=1.0)
with the correlation matrix, we can infer that Gross Approved amount has high Correlation with Final Approved amount and Term
#### F) Check Categorical variables in the dataset,and apply required encoding techniques on Bank Type, City or Rural, Documents Provided, Buisness Owner State and Bank State and specify reasons for selecting the respective encoding technique. 10 marks
df.describe(include='object')
df_cat = df[['Bank Type','Business Owner State','BankState', 'City or Rural','Documents Provided']]
df_cat.head(2)
#There are two kinds of encodings that can be applied on categorical variables:

        a) If the feature is ordinal in nature we should apply label encoding
        b) Else if the there is no order we should apply one hot encoding
        
We can observe that all the categorical columns don't have any order, so we can apply one hot encoding on them.
df_cat=pd.get_dummies(df_cat,drop_first=True)
df_cat.head(2)
df_data=pd.concat((df,df_cat),axis=1)
df_data=df_data.drop(['Bank Type', 'Business Owner State', 'BankState', 'City or Rural',
       'Documents Provided'],axis=1)
df_data.head(2)"
"Read the 'Sales.csv' and do answer the following question-

A. Find out the percentage of missing values with the missing count in each column. (5 Marks)
B. Given the columns 'ItemCategory2' and 'ItemCategory3'  fill the null value with 0 and change the data type into an integer.(3 Marks)
C. Given the columns 'CustomerID' and 'Profession'  change the data type into a String. (2 Mark)
",10,Medium,,,EDA,Final Exam,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as ss
from time import time
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings(""ignore"")
df = pd.read_csv('Sales.csv',sep=';')
df.head(10)
#### A. Find out the percentage of missing values with the missing count in each column. (5 Marks)
def assess_missing_data(df):   
    rec = []
    for column_name in df.columns:
        miss_count = df[column_name].isnull().sum(axis=0)
        miss_percent=miss_count/df.shape[0]
        rec.append([column_name,miss_count,miss_percent*100])
        df_missing_values = pd.DataFrame.from_records(rec, columns = ['column name','missing_count','missing_percentage'])  
        df_missing_values = df_missing_values.sort_values('missing_percentage',axis=0, ascending = False )
    return df_missing_values
df_missing_values = assess_missing_data(df)
df_missing_values
#### B. Given the columns 'ItemCategory2' and 'ItemCategory3'  fill the null value with 0 and change the data type into an integer.(3 Marks)
df[['ItemCategory2','ItemCategory3']] = df[['ItemCategory2','ItemCategory3']].fillna(0).astype('int64')
df.info()
#### C. Given the columns 'CustomerID' and 'Profession'  change the data type into a String. (2 Mark)
df[['CustomerID','Profession']] = df[['CustomerID','Profession']].astype('str')
df.info()
"
"Read the sales.csv file and answer the following questions-

A. Create a user-defined function for plotting all the features distribution with customerID. 
Each plot should display the two different graphs[Bar plot, pie chart].(7 Marks)
B. Create a user-defined function for showing the proportion of the sub-categories using tabular format. (3 marks)
C. Plot distribution of the below mentioned variables using the above function and write your observations. (5 Marks)
i. Customer distribution by Sex.
ii.Customer distribution by Age.
iii.Customer distribution by Profession.
iv.Customer distribution by With Children or Not.
v.Customer distribution by City Type.
",15,Hard,,,EDA,Final Exam,"#### A. Create a user-defined function for plotting all the features distribution with customerID. Each plot should display the three different graphs[Bar plot, pie chart, table]. (7 Marks)

def plot_demography(features, color):
    ax = df_clean.groupby(features)['CustomerID'].count().sort_values().plot(x=features, y ='count', kind='barh',\
              figsize=(5,4), fontsize=12, width = 0.8, color = color, zorder=3)
    ax.set_title(""Customer distribution by "" + str(features), fontdict={'fontsize': 14, 'fontweight': 'medium'})
    plt.legend(loc='upper right', bbox_to_anchor=(1.4, 1))
    ax.grid(color = 'w', zorder=0)
    for spine in ax.spines:
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')
        ax.set_facecolor('whitesmoke')            
    plt.figure()
    df_clean[features].value_counts().plot.pie(textprops={'color':""w""},pctdistance=0.7,autopct='%.2f%%', figsize=(5,5),labels=None,subplots=True)
    plt.title(str(features) +' Percentage Distribution',fontsize=14,ha='right')
    plt.legend(labels=df_clean[features].value_counts().index, loc=""best"",bbox_to_anchor=(1, 0.25, 0.5, 0.5))
    plt.show()

#### B. Create a user-defined function for showing the table. (3 marks)

def show_table(features):
    return df_clean.groupby(features, as_index=False )['CustomerID'].count().sort_values('CustomerID',ascending = False)   

#### C. Plot distribution using the above function and write your observations. (5 Marks)

i. Customer distribution by Sex.
ii.Customer distribution by Age.
iii.Customer distribution by Profession.
iv.Customer distribution by With Children or Not.
v.Customer distribution by City Type.
##### i. Customer distribution by Sex.
plot_demography('Sex', 'rebeccapurple')
show_table('Sex')
#### ii.Customer distribution by Age.
plot_demography('Age', 'navy')
show_table('Age')
#### iii.Customer distribution by Profession.
plot_demography('Profession', 'mediumaquamarine')
show_table('Profession')
#### iv.Customer distribution by City Type.
plot_demography('CityType', 'cadetblue')
show_table('CityType')
#### v.Customer distribution by YearsInCity
plot_demography('YearsInCity', 'limegreen')
show_table('YearsInCity')
**Observations on demographic**
1. ``Gender``: nearly 69% of the customer are **male**, only 31% are **female** .
2. ``Age``: customers with **26-35 years** old have occupied 31% of the whole customers. Among them, people with 18-25 (22%) are the most frequent buyers.
3. ``Profession``: there are in total 21 different professions appear in the customer data. But profession **4,0,7,1,17** occupied nearly 53% of the total customers. 

**Observations geographic**
1. ``City type``: 57% of the customers live in **city C**. 
2. ``Years in the city``: customer who live in the **city 1 year** stand for 32% of the total customers, and customer with 2 years in city follows with 19%.
"
"Read the sales.csv file and answer the following questions-

A. Check the correlation matrix for all numeric variables. Observe and name the Strong positive and Negative correlations columns.(5 Marks)
B. Define a bar char function to plot all the features['Sex', 'Age', 'Profession','CityType', 'YearsInCity', 'HaveChildren']and find out who spent most of the money? (5 Marks)
",10,Hard,,,EDA,Final Exam,"###A.
plt.figure(figsize = [20, 10])
sns.heatmap(df_clean.corr(), annot = True, fmt = '.3f',
           cmap = 'vlag_r', center = 0)
plt.title('Correlation Matrix') 
plt.show()
* Strong positive correlations between purchased_units and Amount, Category_1 and Amount,purchased_units and Category_8 etc.
* Negative correlation between Category_3,avg_spend,Category_4,Category_12 and HaveChildren.etc

#### B. Define a bar char function to plot all the features['Sex', 'Age', 'Profession','CityType', 'YearsInCity', 'HaveChildren']and find out who spent most of the money? (10 Marks)

def plot_bar_chart(col,axs):
    c = df_clean.groupby(col, as_index=False ).agg({'CustomerID':'count', 'Amount': 'sum'})
    c['avg_spend'] =  round(c['Amount']/c['CustomerID'],2)
    c.reset_index(inplace=True)
    sns.barplot(x=col, y='avg_spend', data=c, ax=axs)
    axs.set_title('Customer spent by ' + str(col))
fig, ax = plt.subplots(2,3, figsize=(15,10))
plot_bar_chart('Sex',ax[0,0])
plot_bar_chart('Age',ax[0,1])
plot_bar_chart('Profession',ax[0,2])
plot_bar_chart('HaveChildren',ax[1,0])
plot_bar_chart('CityType',ax[1,1])
plot_bar_chart('YearsInCity',ax[1,2])"
"Read the sales.csv file and answer the following questions-

A. Create a user-defined function to drop or fill all the null values and encoding all the categorical data into numerical data? (5 Marks)
B. Split the dataset into train and test (80:20) and the target column is HaveChildren? How would you ascertain this statistically? (5marks)",10,Easy,,,EDA,Final Exam,"#### A. Create a user-defined function to drop or fill all the null values and encoding all the categorical data into numerical data? (5 Marks)
df_clean = df_clean.dropna()
def Label_enc(feat):
    LabelE = LabelEncoder()
    LabelE.fit(feat)
    return LabelE.transform(feat)
for col in df_clean.columns:
    df_clean[str(col)] = Label_enc(df_clean[str(col)])
from sklearn.preprocessing import StandardScaler,MinMaxScaler
scaler = MinMaxScaler()
df_clean[df_clean.columns] = scaler.fit_transform(df_clean[df_clean.columns].to_numpy())

#### B. Split the dataset into train and test (80:20) and the target column is HaveChildren? How would you ascertain this statistically? (5marks)
target = df_clean['HaveChildren']
features = df_clean.drop(['HaveChildren','CustomerID','Amount','purchased_units','avg_spend'], axis =1)
X_train, X_test, y_train, y_test = train_test_split(features, 
                                                    target, 
                                                    test_size = 0.2, 
                                                    random_state = 42)
print(X_train.shape)print(X_test.shape)
print(y_test.shape)
X_train.describe()
y_train.describe()
X_test.describe()
y_test.describe()"
"1. Read the jobs.csv dataset and do answer the following questions using `Rating` and `Founded` columns (5 Marks)

* Remove unwanted columns
Step1: Visualize with a suitable graph for both columns(1 Mark)
Step2: Handle the -1 values in both columns (3 Mark)
Step3: Visualize the outliers with a suitable graph for both columns(1 Mark)
",5,Medium,,,EDA,Final Exam,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
# Loading the dataset
df = pd.read_csv(""jobs.csv"")
df.head()

### 1. Answer the following questions using `Rating` and `Founded` columns (5 Marks)
* Remove unwanted columns
Step1: Visualize with a suitable graph for both columns(1 Mark)
Step2: Handle the -1 values in both columns (3 Mark)
Step3: Visualize the outliers with a suitable graph for both columns(1 Mark)

print('Shape before removing: {}'.format(df.shape))
df.drop(labels=['Unnamed: 0'], axis='columns', inplace=True)
print('Shape after removing: {}'.format(df.shape))

# Rating column
plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Rating'])
p = plt.title('Before handling -1 value')

# Founded column
plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Founded'])
p = plt.title('Before handling -1 value')

# -1 values in Rating column
df['Rating'] = df['Rating'].apply(lambda x: np.NaN if x==-1 else x)
df['Rating'] = df['Rating'].fillna(df['Rating'].mean())

plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Rating'])
p = plt.title('After handling -1 value')

# -1 values in Founded column
df['Founded'] = df['Founded'].apply(lambda x: np.NaN if x==-1 else x)
df['Founded'] = df['Founded'].fillna(int(df['Founded'].median()))
df['Founded'] = df['Founded'].astype('int')

plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Founded'])
p = plt.title('After handling -1 value')

# Outliers in Rating
plt.figure(figsize=(5,5))
sns.boxplot(y='Rating', data=df, orient='v', palette='Set1')
p = plt.title('Boxplot for Rating')
p = plt.ylabel('Rating')

# Outliers in Founded
plt.figure(figsize=(5,5))
sns.boxplot(y='Founded', data=df, orient='v', palette='Set1')
p = plt.title('Boxplot for Founded')
p = plt.ylabel('Founded year')"
"Read the jobs.csv dataset and do answer the following questions.

A. Create a new column called job_title with the below conditions 

**Step1:** Create a user define function for converting the below job title names into lower case (5 Marks)
    Data Scientist = data scientist
    Data Engineer  = data engineer
    Data Analyst = data analyst
    Machine Learning Engineer = mle
    Manager = manager
    Director = director
    The other titles = other
**Step2:** Display the count plot for job_title (2 Marks)
B. Create a new column called job_seniority with the below conditions 
**Step1:** Create a user define function for converting the below job title names into lower case (4 Marks)
    sr = senior or lead or principal
    jr = junior or jr.
    The other titles = other
**Step2:** Display the count plot for job_seniority (2 Marks)
C. Remove the Job Title column from the dataframe (2 Mark)",15,Medium,,,EDA,Final Exam,"def title_cleaner(title):
    if 'data scientist' in title.lower() or 'scientist' in title.lower():
        return 'data scientist'
    elif 'data engineer' in title.lower():
        return 'data engineer'
    elif 'data analyst' in title.lower():
        return 'data analyst'
    elif 'machine learning' in title.lower():
        return 'mle'
    elif 'manager' in title.lower():
        return 'manager'
    elif 'director' in title.lower():
        return 'director'
    else:
        return 'other'

df['job_title'] = df['Job Title'].apply(title_cleaner)
df['job_title'].value_counts()

plt.figure(figsize=(8,8))
g = sns.countplot(x='job_title', data=df, order = df['job_title'].value_counts().index)
p = plt.title('Count plot for Job Title')
p = plt.xlabel('Job Title')
p = plt.ylabel('Count')
p = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')

def title_seniority(title):
    if 'sr.' in title.lower() or 'senior' in title.lower() or 'lead' in title.lower() or 'principal' in title.lower():
            return 'sr'
    elif 'junior' in title.lower() or 'jr.' in title.lower():
        return 'jr'
    else:
        return 'other'

df['job_seniority'] = df['Job Title'].apply(title_seniority)
df['job_seniority'].value_counts()

plt.figure(figsize=(8,8))
g = sns.countplot(x='job_seniority', data=df, order = df['job_seniority'].value_counts().index)
p = plt.title('Count plot for Job Seniority')
p = plt.xlabel('Job Seniority')
p = plt.ylabel('Count')

# Remove Job Title column
df.drop(labels=['Job Title'], axis=1, inplace=True)
"
"Read the jobs.csv dataset
Answer the following questions using `salary` column ()

Step1:Create a new column called `salary` from `Salary Estimate` with the below (2 marks)
Condition:** Extract from 53𝐾− 91K (Glassdoor est.) into $53K-$91K
Step2: Replace -1 value with NaN (2 Mark)
Step3: Removing '$' and 'K' (1 Mark)
Step4: Remove the string employer provided salary from the salary array (2 marks)

**Input:**'Employer Provided Salary:120-140'
**Output:** '120-140'

Step5: Convert per hour salaries to per year salaries (2 marks)
Step6: Creating again new column called `Salary` from `salary` with example average of the range and also display the histogram.(2 marks)
Step7: Handle NaN values in the `Salary` column(2 marks)
Setp8: Check outliers in `Salary` with a suitable graph (2 marks)",15,Hard,,,EDA,Final Exam,"#### Step1:Create a new column called `salary` from `Salary Estimate` with the below  (3 Marks)

**Condition:** Extract from 53𝐾− 91K (Glassdoor est.) into $53K-$91K
salary = df['Salary Estimate'].apply(lambda x: x.split(""("")[0])
salary
salary.value_counts()
##### Step2: Replace -1 value with NaN
salary = salary.apply(lambda x: np.NaN if x=='-1' else x)
salary
##### Step3: Removing '$' and 'K' (2 Mark)
salary = salary.apply(lambda x: x if type(x)== type(3.5) else x.replace('$','').replace('K',''))
salary
##### Step4: Remove the string employer provided salary from the salary array (3 marks)
**Input:**'Employer Provided Salary:120-140'
**Output:** '120-140'
print(""Length of Salary: "",len(salary.unique()))
salary.unique()[380:]
salary = salary.apply(lambda x: x if type(x)==type(3.5) else x.lower().replace(""employer provided salary:"", """"))
salary.unique()[380:]
##### Step5: Convert per hour salaries to per year salaries (3 marks)
def hourly_to_yearly(minlimit, maxlimit):
    x = minlimit.strip()
    y = maxlimit.strip()
    x = int(int(minlimit)*45*52/1000)
    y = int(int(maxlimit)*45*52/1000)
    return '{}-{}'.format(x,y)
salary = salary.apply(lambda x: x if type(x)==type(3.5) else (hourly_to_yearly(x.lower().replace(""per hour"", """").split('-')[0], x.lower().replace(""per hour"", """").split('-')[1]) if ""per hour"" in x.lower() else x))
salary.unique()[380:]
##### Step6: Creating again new column called `Salary` from `salary` with example average of the range and also display the histogram.(3 marks)
df['Salary'] = salary.apply(lambda x:  x if type(x)==type(3.5) else (int(x.split(""-"")[0]) + int(x.split(""-"")[1].strip()))/2)
plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Salary'])
p = plt.title('Before handling NaN values')
#####  Step7: Handle NaN values in the `Salary` column(2 marks)
df['Salary'] = df['Salary'].fillna(df['Salary'].median())
plt.figure(figsize=(6,6))
g = sns.distplot(a=df['Salary'])
p = plt.title('After handling NaN value')
##### Setp8: Check outliers in `Salary` with a suitable graph (2 marks)
plt.figure(figsize=(5,5))
g = sns.boxplot(y='Salary', data=df, orient='v', palette='Set1')
p = plt.title('Boxplot for Salary')
p = plt.ylabel('Salary')"
"Read the jobs.csv dataset and do answer the following questions - 
Create columns of 'python_jobs, excel_jobs, sql_jobs, tableau_jobs'  from `Job Description`. Display count plot for all coulmns and drop Job Description column.(10 Marks)
",10,Medium,,,EDA,Final Exam,"df['python_job'] = df['Job Description'].apply(lambda x: 1 if 'python' in x.lower() else 0)
df['excel_job'] = df['Job Description'].apply(lambda x: 1 if 'excel' in x.lower() else 0)
df['sql_job'] = df['Job Description'].apply(lambda x: 1 if 'sql' in x.lower() else 0)
df['tableau_job'] = df['Job Description'].apply(lambda x: 1 if 'tableau' in x.lower() else 0)

plt.figure(figsize=(5,5))
g = sns.countplot(x='python_job', data=df)
p = plt.title('Count plot for Python jobs')
p = plt.xlabel(""Is Python job?"")
p = plt.ylabel('Count')

plt.figure(figsize=(5,5))
g = sns.countplot(x='excel_job', data=df)
p = plt.title('Count plot for Excel jobs')
p = plt.xlabel(""Is Excel job?"")
p = plt.ylabel('Count')

plt.figure(figsize=(5,5))
g = sns.countplot(x='sql_job', data=df)
p = plt.title('Count plot for SQL jobs')
p = plt.xlabel(""Is SQL job?"")
p = plt.ylabel('Count')

plt.figure(figsize=(5,5))
g = sns.countplot(x='tableau_job', data=df)
p = plt.title('Count plot for Tableau jobs')
p = plt.xlabel(""Is Tableau job?"")
p = plt.ylabel('Count')

df.drop(labels=['Job Description'], axis=1, inplace=True)"
"Read the jobs.csv dataset and do answer the following questions - 
Take the top 9 sectors from Sector column, and replace the remaining by 'Others'. Display the count plot. (5 Marks)",5,Medium,,,EDA,Final Exam,"df['Sector'] = df['Sector'].apply(lambda x: 'Others' if x=='-1' else x)

sector_list = list(df['Sector'].value_counts()[:10].index)
def sector_simplifier(text):
  if text not in sector_list:
    return 'Others'
  else:
    return text

df['Sector'] = df['Sector'].apply(sector_simplifier)
sector_list

plt.figure(figsize=(8,8))
g = sns.countplot(x='Sector', data=df, order = df['Sector'].value_counts().index)
p = plt.title('Final countplot for Sector')
p = plt.xlabel('Sector')
p = plt.ylabel('Count')
p = g.set_xticklabels(g.get_xticklabels(), rotation=45, horizontalalignment='right')"
"Read the jobs.csv dataset and do answer the following questions - 
Answer the following questions (10 marks)

A. Convert categorical variables to numeric variables in `Size` column (6 marks)
1. 'Unknown': 0, 
2. '1 to 50 employees': 1,
3. '51 to 200 employees': 2, 
4. '201 to 500 employees': 3,
5. '501 to 1000 employees': 4, 
6. '1001 to 5000 employees': 5, 
7. '5001 to 10000 employees': 6, 
8. '10000+ employees': 7
B. Convert categorical variables to numeric variables in `Revenue` column (4 marks)
1. 'Unknown / Non-Applicable': 0, 
2. 'Less than $1 million (USD)': 1, 
13. '$10+ billion (USD)':12
",10,Medium,,,EDA,Final Exam,"size_map = {'Unknown': 0, '1 to 50 employees': 1, '51 to 200 employees': 2, '201 to 500 employees': 3,
            '501 to 1000 employees': 4, '1001 to 5000 employees': 5, '5001 to 10000 employees': 6, '10000+ employees': 7}
df['company_size'] = df['Size'].map(size_map)

revenue_map = {'Unknown / Non-Applicable': 0, 'Less than $1 million (USD)': 1, '$1 to $5 million (USD)': 2, '$5 to $10 million (USD)': 3,
            '$10 to $25 million (USD)': 4, '$25 to $50 million (USD)': 5, '$50 to $100 million (USD)': 6, '$100 to $500 million (USD)': 7,
            '$500 million to $1 billion (USD)': 8, '$1 to $2 billion (USD)': 9, '$2 to $5 billion (USD)':10, '$5 to $10 billion (USD)':11,
            '$10+ billion (USD)':12}

df['revenue'] = df['Revenue'].map(revenue_map)
df.head()"
"Read the dataset(Loan Sanction data) answer the questions below
A)Display the categorical and Numerical columns? (1 Marks)
B)Check if there any mismatch in the data values and the Data type of the column. Convert the columns in other datatype if required (2 Marks)
C)Split the Dataset into Train and Test. Statically prove that Training and Testing Data represent population? (2 Marks)",5,Easy,,,EDA,Final Exam,"#### 1. A) Display the categorical and Numerical variables? (1 Marks)
num_cols = df.select_dtypes(include=np.number).columns
num_cols 
cat_cols = df.select_dtypes(include='object').columns
cat_cols
#### B). Check if there any mismatch in the data values and the Data type of the column. Convert the columns in other datatype if required (2 Marks)
# converting co-applicants to categorical variable
df['Co-Applicant'] = df['Co-Applicant'].astype('object')
# converting Property type as categorical variable
df['Property Type'] = df['Property Type'].astype('object')
#  converting 'Dependents' as categorical variable
df['Dependents'] = df['Dependents'].astype('object')
cat_cols = df.select_dtypes(include='object').columns
cat_cols
##### C) Split the Dataset into Train and Test. Also give us the reason behind your split 
Assume `'Loan Sanction Amount (USD)'` Column to be the Target variable(2 Marks) 
from sklearn.model_selection import train_test_split
X=df.drop(['Loan Sanction Amount (USD)'],axis=1)
y=df['Loan Sanction Amount (USD)']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size = 0.3, random_state=100)"
"Read the dataset(Loan Sanction data) answer the questions below.
A) Display percentage of negative values in each column rounded upto two decimal places(1 marks)
B) Determine the presence of invalid/garbage values in the dataset and replace them with NaN (4 Marks)
",5,Easy,,,EDA,Final Exam,"#### A) Display percentage of negative values in each column rounded upto two decimal places(1 marks)
np.round((df.select_dtypes(np.number)<0).sum()/df.shape[0],2)
df.describe()
* Looking at Five point summary of numerical columns, It cab be observed that there are some negative values in the columns like Current Loan Expenses (USD),Co-Applicant, Property Price, Loan Sanction Amount (USD)
* However its not possible to have negative values in above mentioned columns, so it can be treated as invalid value and can be replaced with NaN
#### B) Determine the presence of invalid/garbage values in the dataset and replace them with NaN (4 Marks)
df.replace(-999.0,np.nan,inplace=True)
np.round((df.select_dtypes(np.number)<0).sum()/df.shape[0],2)
#### Check for garbage/Invalid values in Categorical columns
cat_cols = df.select_dtypes(include='object').columns
cat_cols = cat_cols.drop(['Customer ID'])
for i in cat_cols:
    print(df[i].value_counts())
    print('-------------------------------------')
Conclusion : There are no Invalid/Garbage values in categorical columns"
"Read the dataset(Loan Sanction data) answer the questions below
A) Display the %of missing values in each column.(1 marks)
B) Replace missing values with appropriate values(4 Marks)
",5,Easy,,,EDA,Final Exam,"#### A) Display the %of missing values in each column.(1 marks)
 np.round(df.isnull().sum()/df.shape[0],2)
 #### B) Replace missing values with appropriate values(4 Marks)
 missing_index = np.where(np.round(df.isnull().sum()/df.shape[0],2)>0)
 missing_cols = df.columns[missing_index]
 missing_cols
 for i in missing_cols:
  if df[i].dtype ==np.number:
  df[i] = df[i].fillna(df[i].mean())
  else:
  df[i] = df[i].fillna(df[i].mode().iloc[0])
 np.round(df.isnull().sum()/df.shape[0],2)"
"Read the dataset(Loan Sanction data) answer the questions below
A) Plot correlation Heat map for the dataset and indetify the features impacting Target variables(3 marks)
B) Is multicollinearity present in the dataset?(2 Marks)",5,Medium,,,EDA,Final Exam,"plt.figure(figsize=(15,8))
sns.heatmap(np.round(df.corr(),1),cmap='PiYG',vmin=-1,vmax=1,annot=True)
**Conclusion: Loan Amount Request(USD), Current Loan Expenses(USD),Property Price, Credit Score features are impacting Target variable `Loan Sanction Amount(USD)`**
Conclusion: 
* Loan Amount Request(USD), Current Loan Expenses(USD) and Property Price are positively correlated with correlation value 0.8
* Income(USD),Property Age are positively correlated with correlation value 1.
* There is a presence of Strong multicollinearity.
"
"Read the dataset(Loan Sanction data) answer the questions below
Identiy top 5 and bottom 5 employment type wrt income and visualise it using appropriate plot (10 Marks)",10,Medium,,,EDA,Final Exam,"# Top 5 employment wrt income
top_employement = pd.DataFrame(df['Income (USD)'].groupby(df['Type of Employment']).mean().sort_values(ascending = False)[:5])
top_employement['Employment'] = top_employement.index.values
top_employement
plt.figure(figsize=(12,6))
sns.barplot(y='Income (USD)' ,x= 'Employment',data=top_employement)
#### Conclusion: Avearage Income for managers is more than other employement categories.
# Bottom 5 employment wrt income
bottom_employement = pd.DataFrame(df['Income (USD)'].groupby(df['Type of Employment']).mean().sort_values(ascending = True)[:5])
bottom_employement['Employment'] = bottom_employement.index.values
bottom_employement
plt.figure(figsize=(12,6))
sns.barplot(y='Income (USD)' ,x= 'Employment',data=bottom_employement)
#### Conclusion: Avearage Income for cleaning staff is less than other employement categories."
"Read the dataset(Loan Sanction data) answer the questions below

A) Identify the trend between loan between features given below and write your inferences (5 Marks)
- Current loan Expenses and Loan Sanction Amount
- Credit score and Loan Sanction Amount
B) Identify percentage of peaple in has active credit card class as per each location and using appropriate plot visualize it.(5 Marks)
",10,Hard,,,EDA,Final Exam,"## A.
sns.scatterplot(df['Current Loan Expenses (USD)'],df['Loan Sanction Amount (USD)'])
 plt.show()
 **There is a positive linear relationship in Current loan Expenses and Loan Sanction Amount
 sns.scatterplot(df['Credit Score'],df['Loan Sanction Amount (USD)'])
 plt.show()
 **There is a No relationship in Credit Score and Loan Sanction Amount**
 #### B) Identify percentage of peaple in has active credit card class as per each location and using appropriate plot visualize it.(5 Marks)¶
 pd.crosstab(df['Has Active Credit Card'],df['Location'],normalize = 'columns' )
 pd.crosstab(df['Has Active Credit Card'],df['Location'],normalize = 'columns' ).plot(kind='bar')
 **Conclusion : Urban customers have more active credit cards as compared to Semi-Urban and Rural people and overall there are more active credit card customers in the datasets**"
"Read the dataset(Loan Sanction data) answer the questions below

A. Make a distribution plot for all the features and provide insights on it (5 marks)
B. Write a code for following. (10 Marks)
    - Divide the Age into bins such that now there will be 3 categories of ages with labels as Young, middle aged and old.(5 marks).
    - Make a new column Age_Groups.(2 mark). 
    - Provide inference on how the Age_groups are distributed with respect to the income, also use a plot to show the relationship.(3 marks)
",15,Hard,,,EDA,Final Exam,"df.columns
#### A. Make a distribution plot for all the features and provide insights on it (5 marks)
num_col=df._get_numeric_data().columns
num_col[0]
for i in num_col:
    plt.figure()
    sns.kdeplot(df[i])
plt.show()
##### B. Divide the Age into bins such that now there will be 3 categories of ages with labels as Young, middle aged and old.(5 marks).
#### Make a new column Age_Groups.(2 mark). 
##### Provide inference on how the Age_groups are distributed with respect to the loan sanction amount, also use a plot to show the relationship.(3 marks)(Total 10 marks)
pd.cut(df['Age'], bins=3, labels = ['young', 'middle aged', 'old'])
df['Age_Groups']= pd.cut(df['Age'], bins=3, labels = ['young', 'middle aged', 'old'])
df.columns
sns.boxplot(x=df['Age_Groups'],y=df['Loan Sanction Amount (USD)'])
plt.xticks(rotation=45)
plt.show()
We can observe that, majority of young, middle aged and old age groups have sanctioned the loan of similar amount.
Though, we also observe that we have very high amount sanctioned loan for middle aged and young aged people.
"
"Read the dataset(Loan Sanction data) answer the questions below -
Find the average price of the property based on its type, Propertly location also use a plot to show the relationship.(5 marks)
",5,Medium,,,EDA,Final Exam,"df.groupby(by=['Property Type','Property Location'])['Property Price'].mean()
plt.figure(figsize=(18,10))
sns.boxplot(x='Property Location',y='Property Price',hue='Property Type',data=df)
plt.figure(figsize=(18,10))
sns.boxplot(x='Income Stability',y='Credit Score',data=df)"
"Read the dataset(Loan Sanction data) answer the questions below -
A. Explain Skewness and Kurtosis : 4 Marks
B. Using the subplot display the histogram of Income and box plot. 3 Marks
C. If the outliers are in Income and data distribution is skewed. Apply the log to reduce the variation that the outlier values cause in the data set. 3 Marks
",10,Hard,,,EDA,Final Exam,"### Skewness
Skewness helps us to study the shape of the data.It represents how much a distribution differs from a normal distribution, either to the left or to the right.</li>
The value of the skewness can be either positive, negative or zero.
To find the skewness of the data, we find use the function `skew()

Kurtosis measures the peakedness of the distribution.In other words, kurtosis is a statistical measure that defines how the tails of the distribution differ from the normal distribution</li>Kurtosis identifies whether the tails of a given distribution contain extreme values</li>
To find the kurtosis of the data, we find use the function `kurt()`
#### B. Using the subplot display the histogram of Income and box plot. 3 Marks
fig, ax = plt.subplots(1, 2, figsize=(18,8))
sns.distplot(df['Income (USD)'], hist=False,kde = True, ax=ax[0], color = 'blue', hist_kws={'edgecolor':'black'})
ax[0].set_title(' Income',fontsize=14)
sns.boxplot(y=df['Income (USD)'], ax=ax[1])
ax[1].set_title('Box plot of Annual Income',fontsize=14)
plt.ylim(0,50000)
There seems to be a outliers in income.
The data is skewed due to those one of large amounts. 
To deal with outliers, we can delete those entries or transform or impute them. Let's use log to reduce the variation that the outlier values cause in the data set.

#### C. If the outliers are in Income and data distribution is skewed. Apply the log to reduce the variation that the outlier values cause in the data set. 3 Marks
df['Income (Log)'] = np.log(df['Income (USD)'])
fig, ax = plt.subplots(1, 2, figsize=(18,8))
sns.distplot(df['Income (Log)'], hist = True, kde = True, bins = 15, ax=ax[0], color = 'blue', 
             hist_kws={'edgecolor':'black'})
ax[0].set_title('Income (Normalized)',fontsize=14)
sns.boxplot(y=df['Income (Log)'], ax=ax[1])
ax[1].set_title('Box plot of Income (Normalized)',fontsize=14)
After normalizing the annual income follows a normal distribution
From the box plot, we can visualize there are still few outliers which are above and below lower whiskers.
There are various thumb rules to detect outliers. Some of them are:
Any value, which is beyond the range of +/-1.5 times IQR or +/-3 times IQR. IQR is interquartile range i.e Q3 - Q1.
Use capping methods. Any value which out of range of 1st and 99th percentile can be considered as outlier
Data points, three or more standard deviation away from mean are considered outlier"
"Read the 'Salaries_2018.csv' and do answer the following questions (5 Marks)
A. Calculate a five-point summary of numerical and categorical variables(1 marks)
B. Calculate IQR(the difference between 75% and 25% quartile) for ANNUAL_RT and GROSS(2 marks)
C. Calculate the standard deviation and variance for the last 2 columns.(2 marks)
",5,Easy,,,EDA,Final Exam,"import pandas as pd
import warnings
warnings.filterwarnings('ignore') 
salary_df =pd .read_csv('Salaries_2018.csv')
salary_df.head(5)
#### A. Calculate a five-point summary of numerical and categorical variables(1 marks)
salary_df.describe(include='all')
salary_df.describe(include='object')
#### B. Calculate IQR(the difference between 75% and 25% quartile) for ANNUAL_RT and GROSS(2 marks)
IQR=salary_df[""ANNUAL_RT""].quantile(0.75)-salary_df[""GROSS""].quantile(0.25)
IQR
#### C. Calculate the standard deviation and variance for the last 2 columns.(2 marks)
pd.DataFrame(salary_df.iloc[:,2:].std().to_frame()).T
pd.DataFrame(salary_df.iloc[:,2:].var().to_frame()).T"
"Read the 'Salaries_2018.csv' and do answer the following question-
A)What are the data types for the columns in the data frame? How many unique entries are there in each column where a type is an object? Write your observation. (5 marks)
B)Count the frequency of these unique values per column and print the top five most frequent elements. Check if a column with object data type has categorical data or not?(5 Marks)
C) Transform the object data type for `JOBTITLE`, `DEPTID`, `DESCR` to category data type. Write your observations?(5 Marks)",15,Medium,,,EDA,Final Exam,"import pandas as pd
import warnings
warnings.filterwarnings('ignore') 
salary_df =pd .read_csv('Salaries_2018.csv')
salary_df.head(5)
##A. What are the data types for the columns in the data frame? How many unique entries are there in each column where a type is an object? Write your observation. (5 marks)

first_n_entries=2
print('Total rows in the dataframe:', salary_df.shape[0])
for col, col_type in salary_df.dtypes.iteritems():
    if(col_type=='object'):
        print('\n',col,'has',salary_df[col].nunique(),'unique entries')
        print('First', first_n_entries, 'entries are\n')
        print(salary_df[col][0:first_n_entries])

* **In the data set, there are five object type columns: NAME, JOBTITLE, DEPTID, DESCR, HIRE_DT**
### B. Count the frequency of these unique values per column and print the top five most frequent elements. Check if a column with object data type has categorical data or not?(5 Marks)
def uniq_per_col(df,count):
    for this_column in df.columns:
        print(""\n==== "",this_column,""has"",df[this_column].nunique(),""unique entries ===="")
        print(df[this_column].value_counts().head(count))
uniq_per_col(salary_df,2)
* By exploring the data I observed that the Jobtitle, DeptId and Descr columns contain categorical data.
### C. Transform the object data type for `JOBTITLE`, `DEPTID`, `DESCR` to category data type. Write your observations?(5 Marks) 
salary_df['JOBTITLE'] = salary_df['JOBTITLE'].astype('category')
salary_df['JOBTITLE'].dtype
salary_df['DEPTID'] = salary_df['DEPTID'].astype('category')
salary_df['DEPTID'].dtype
salary_df['DESCR'] = salary_df['DESCR'].astype('category')
salary_df['DESCR'].dtype
#### Let us look at the data types of columns after transformation 
salary_df.dtypes
**observations...**
* **Two object type columns: NAME, HIRE_DT**
* **Three categorical columns: JOBTITLE, DEPTID, DESCR and**
* **Two numerical columns: ANNUAL_RT,GROSS with data type float64**"
"Read the 'Salaries_2018.csv' and do answer the following question-
A. Drop all rows and columns where the entire row or column is NaN. (3 Marks)
B. Drop columns with duplicate data or with 50% missing value. (3 Marks)
C. Drop columns where all rows have the same value. (3 Marks)
D. Display the percentage of missing data per column. (3 marks)
E. Write your observations. (3 Marks)
",15,Medium,,,EDA,Final Exam,"print('before:',salary_df.shape)
#### A. Drop all rows and columns where the entire row or column is NaN. (3 Marks)
print('Drop all rows and columns where entire row or column is NaN.')
salary_df.dropna(how='all',axis=0,inplace=True) # rows 
salary_df.dropna(how='all',axis=1,inplace=True) # columns
#### B. Drop columns with duplicate data or with 50% missing value. (3 Marks)
print('Drop columns with duplicate data or with 50% missing value.')
half_count = len(salary_df)*.5
salary_df = salary_df.dropna(thresh=half_count, axis=1)
salary_df = salary_df.drop_duplicates()
#### C. Drop columns where all rows have the same value. (3 Marks)
print('Drop columns where all rows have the same value.')
for this_column in salary_df.columns:
    if (salary_df[this_column].nunique()==1):
        salary_df.drop([this_column],axis=1,inplace=True)   
print('after:',salary_df.shape)
#### D. Display the percentage of missing data per column. (3 marks)
salary_df.head().T
##### Counting null data per column 
salary_df.isnull().sum()
##### Percentage of missing data per column
(salary_df.isnull().sum()/len(salary_df)).sort_values(ascending=False)
#### E. Write your observations. (3 Marks)
* There are no rows and columns where entire row or column is NaN.
* There are no columns with duplicate data and with 50% missing value.
* There are no columns where all rows have the same value.
* GROSS Columns have missing data.
"
"Read the 'Salaries_2018.csv' and do answer the following question-
A. How many missing data for GROSS Column? (1 Mark)
B. How many other columns have missing data of the rows with missing GROSS data? (2 Marks)
C. Impute  missing data for GROSS Column? (2 Marks)",5,Medium,,,EDA,Final Exam,"##### A. How many missing data for GROSS Column? (1 Mark)
salary_df['GROSS'].isnull().sum()
##### B. How many other columns have missing data of the rows with missing GROSS data? (2 Marks)
salary_df[salary_df['GROSS'].isnull()].isnull().sum().sum()
salary_df[salary_df['GROSS'].isnull()].shape
##### C. Impute missing data for GROSS Column? (2 Marks)
salary_df['GROSS'].fillna(salary_df['ANNUAL_RT']-2000.0,inplace=True)
salary_df.isnull().sum()"
"Read the 'Salaries_2018.csv' and do answer the following question-
A. Find out the distribution of annual_pay & Gross Pay using histograms and write your inferences?(5 Marks)
B. Display a suitable graph with the percentage of the population getting a certain annual pay in 10000s?(5 Marks)
C. Display a suitable graph with the average annual pay for the top ten most common jobs. Write your observations? (5 Marks)
",15,Hard,,,EDA,Final Exam,"### Find out the distribution of annual_pay & Gross Pay using histograms and write your inferences?(5 Marks)
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('bmh')
sns.set_style('whitegrid')
plt.figure(figsize=(15,10))
salary_df['ANNUAL_RT'].plot.hist(bins=15,alpha=.8)
plt.title(""Histogram showing how many employees gets the annual pay"",fontsize=22)
plt.xlabel(""Annual pay in Dollars"",fontsize=16)
plt.ylabel(""Number of employees"",fontsize=16)
plt.show()
plt.figure(figsize=(15,10))
salary_df['GROSS'].plot.hist(bins=15,alpha=.8)
plt.title(""Histogram showing how employees gets the gross pay"",fontsize=22)
plt.xlabel(""Gross pay in Dollars"",fontsize=16)
plt.ylabel(""Number of employees"",fontsize=16)
plt.show()

#Display a suitable graph with the percentage of the population getting a certain annual pay in 10000s?(5 Marks)
import numpy as np
salary_in_thousands_df = (salary_df['ANNUAL_RT']/1000).to_frame()
freq_count = []
for i in range(0, 26):
    freq_count.append(0)
for salary in salary_in_thousands_df['ANNUAL_RT']:
    freq_count[int(salary/10)] += 1
freq_percent = []
for i in range(0, 26):
    freq_percent.append(round(freq_count[i]/len(salary_df['ANNUAL_RT'])*100, 2))
freq_df = pd.DataFrame({'freq':freq_percent})
plt.figure(figsize=(15,10))
freq_df['freq'].plot(kind='line')
plt.xticks(np.arange(1,27))
plt.title(""Percentage of population getting a certain Annual pay in 10000s"",fontsize=22)
plt.xlabel(""Annual pay in 10000s of Dollars"",fontsize=16)
plt.ylabel(""Percentage of population"",fontsize=16)
plt.show()

##Display a suitable graph with the average annual pay for the top ten most common jobs. Write your observations? (5 Marks)
common_job_filter = salary_df['JOBTITLE'].value_counts().head(10).keys()
ten_most_common_job = salary_df[salary_df['JOBTITLE'].isin(common_job_filter)
                              ].groupby('JOBTITLE').mean().dropna().sort_values(['ANNUAL_RT'], ascending=True)
plt.figure(figsize=(15,10))
plt.barh(ten_most_common_job.index.values, ten_most_common_job['ANNUAL_RT'])
plt.title('Average annual pay of the top ten most common jobs',fontsize=22)
plt.xlabel('Average annual pay in Dollars',fontsize=16)
plt.ylabel('Ten most common jobs',fontsize=16)
plt.show()
##### observations
* Not suprisingly, higher ranked officials for example a BPD makes more money than a Police Officer*
* Jobs requiring less specialized training and experience, for example a crossing guard makes less money
"
"Read the 'Salaries_2018.csv' and do answer the following question-
A. Display a suitable graph with average annual pay for departments considering the top ten employers. Write your observations? (7.5 Marks)
B. Display a suitable graph with the top ten job titles with most employees. Write your observations? (7.5 Marks)
",15,Hard,,,EDA,Final Exam,"### Display a suitable graph with average annual pay for departments considering the top ten employers. Write your observations? (7.5 Marks)

top_dept_filter = salary_df['DESCR'].value_counts().head(10).keys()
ten_most_common_dept = salary_df[salary_df['DESCR'].isin(top_dept_filter)
                               ].groupby('DESCR').mean().dropna().sort_values(['ANNUAL_RT'], ascending=True)
plt.figure(figsize=(15,10))
plt.barh(ten_most_common_dept.index.values, ten_most_common_dept['ANNUAL_RT'])
plt.title('Average annual pay for departments that are the top ten employers',fontsize=22)
plt.xlabel('Average annual pay in Dollars',fontsize=16)
plt.ylabel('Departments that are the top ten employers',fontsize=16)
plt.show()
##### observations
* Once more, departments requiring more training or having potentially higher risk factors, for example the Police and Sherrif's department tend to make more money.
###Display a suitable graph with the top ten job titles with most employees. Write your observations? (7.5 Marks)
job_wise_head_count = salary_df.groupby('JOBTITLE').count()['NAME'].sort_values(ascending=False)
top_ten_head_count_job_wise = job_wise_head_count.head(10)
top_ten_head_count_job_wise
plt.figure(figsize=(15,10))
plt.barh(top_ten_head_count_job_wise.index.values, top_ten_head_count_job_wise)
plt.title('Top ten job titles with most employees',fontsize=22)
plt.xlabel('Employee count',fontsize=16)
plt.ylabel('Job Titles',fontsize=16)
plt.show()
##### observations
* The most common job title in City Government is that of a Police Officer.
"